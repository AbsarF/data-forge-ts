{
	"id": 0,
	"name": "data-forge-ts-beta-test",
	"kind": 0,
	"flags": {},
	"children": [
		{
			"id": 4294,
			"name": "\"index\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "C:/projects/github/data-forge/data-forge-ts/src/index.ts",
			"children": [
				{
					"id": 4305,
					"name": "AsyncFileReader",
					"kind": 128,
					"kindString": "Class",
					"flags": {},
					"comment": {
						"shortText": "Reads a file asynchonrously to a dataframe."
					},
					"children": [
						{
							"id": 4307,
							"name": "constructor",
							"kind": 512,
							"kindString": "Constructor",
							"flags": {},
							"signatures": [
								{
									"id": 4308,
									"name": "new AsyncFileReader",
									"kind": 16384,
									"kindString": "Constructor signature",
									"flags": {},
									"parameters": [
										{
											"id": 4309,
											"name": "filePath",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "AsyncFileReader",
										"id": 4305
									}
								}
							],
							"sources": [
								{
									"fileName": "index.ts",
									"line": 145,
									"character": 21
								}
							]
						},
						{
							"id": 4306,
							"name": "filePath",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"sources": [
								{
									"fileName": "index.ts",
									"line": 145,
									"character": 12
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 4310,
							"name": "parseCSV",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"signatures": [
								{
									"id": 4311,
									"name": "parseCSV",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Deserialize a CSV file to a DataFrame.\nReturns a promise that later resolves to a DataFrame.",
										"returns": "Returns a promise of a dataframe loaded from the file.\n"
									},
									"parameters": [
										{
											"id": 4312,
											"name": "config",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "reference",
												"name": "ICSVOptions",
												"id": 4295
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Promise",
										"typeArguments": [
											{
												"type": "reference",
												"name": "IDataFrame",
												"id": 683,
												"typeArguments": [
													{
														"type": "intrinsic",
														"name": "number"
													},
													{
														"type": "intrinsic",
														"name": "any"
													}
												]
											}
										]
									},
									"implementationOf": {
										"type": "reference",
										"name": "IAsyncFileReader.parseCSV",
										"id": 4301
									}
								}
							],
							"sources": [
								{
									"fileName": "index.ts",
									"line": 159,
									"character": 12
								}
							],
							"implementationOf": {
								"type": "reference",
								"name": "IAsyncFileReader.parseCSV",
								"id": 4300
							}
						},
						{
							"id": 4313,
							"name": "parseJSON",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"signatures": [
								{
									"id": 4314,
									"name": "parseJSON",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Deserialize a JSON file to a DataFrame.\nReturns a promise that later resolves to a DataFrame.",
										"returns": "Returns a promise of a dataframe loaded from the file.\n"
									},
									"type": {
										"type": "reference",
										"name": "Promise",
										"typeArguments": [
											{
												"type": "reference",
												"name": "IDataFrame",
												"id": 683,
												"typeArguments": [
													{
														"type": "intrinsic",
														"name": "number"
													},
													{
														"type": "intrinsic",
														"name": "any"
													}
												]
											}
										]
									},
									"implementationOf": {
										"type": "reference",
										"name": "IAsyncFileReader.parseJSON",
										"id": 4304
									}
								}
							],
							"sources": [
								{
									"fileName": "index.ts",
									"line": 183,
									"character": 13
								}
							],
							"implementationOf": {
								"type": "reference",
								"name": "IAsyncFileReader.parseJSON",
								"id": 4303
							}
						}
					],
					"groups": [
						{
							"title": "Constructors",
							"kind": 512,
							"children": [
								4307
							]
						},
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								4306
							]
						},
						{
							"title": "Methods",
							"kind": 2048,
							"children": [
								4310,
								4313
							]
						}
					],
					"sources": [
						{
							"fileName": "index.ts",
							"line": 143,
							"character": 21
						}
					],
					"implementedTypes": [
						{
							"type": "reference",
							"name": "IAsyncFileReader",
							"id": 4299
						}
					]
				},
				{
					"id": 4321,
					"name": "SyncFileReader",
					"kind": 128,
					"kindString": "Class",
					"flags": {},
					"comment": {
						"shortText": "Reads a file synchonrously to a dataframe."
					},
					"children": [
						{
							"id": 4323,
							"name": "constructor",
							"kind": 512,
							"kindString": "Constructor",
							"flags": {},
							"signatures": [
								{
									"id": 4324,
									"name": "new SyncFileReader",
									"kind": 16384,
									"kindString": "Constructor signature",
									"flags": {},
									"parameters": [
										{
											"id": 4325,
											"name": "filePath",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "SyncFileReader",
										"id": 4321
									}
								}
							],
							"sources": [
								{
									"fileName": "index.ts",
									"line": 241,
									"character": 21
								}
							]
						},
						{
							"id": 4322,
							"name": "filePath",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"sources": [
								{
									"fileName": "index.ts",
									"line": 241,
									"character": 12
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 4326,
							"name": "parseCSV",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"signatures": [
								{
									"id": 4327,
									"name": "parseCSV",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Deserialize a CSV file to a DataFrame.",
										"returns": "Returns a dataframe that was deserialized from the file.\n"
									},
									"parameters": [
										{
											"id": 4328,
											"name": "config",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "reference",
												"name": "ICSVOptions",
												"id": 4295
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "IDataFrame",
										"id": 683,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "number"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										]
									},
									"implementationOf": {
										"type": "reference",
										"name": "ISyncFileReader.parseCSV",
										"id": 4317
									}
								}
							],
							"sources": [
								{
									"fileName": "index.ts",
									"line": 254,
									"character": 12
								}
							],
							"implementationOf": {
								"type": "reference",
								"name": "ISyncFileReader.parseCSV",
								"id": 4316
							}
						},
						{
							"id": 4329,
							"name": "parseJSON",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"signatures": [
								{
									"id": 4330,
									"name": "parseJSON",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Deserialize a JSON file to a DataFrame.",
										"returns": "Returns a dataframe that was deserialized from the file.\n"
									},
									"type": {
										"type": "reference",
										"name": "IDataFrame",
										"id": 683,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "number"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										]
									},
									"implementationOf": {
										"type": "reference",
										"name": "ISyncFileReader.parseJSON",
										"id": 4320
									}
								}
							],
							"sources": [
								{
									"fileName": "index.ts",
									"line": 270,
									"character": 13
								}
							],
							"implementationOf": {
								"type": "reference",
								"name": "ISyncFileReader.parseJSON",
								"id": 4319
							}
						}
					],
					"groups": [
						{
							"title": "Constructors",
							"kind": 512,
							"children": [
								4323
							]
						},
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								4322
							]
						},
						{
							"title": "Methods",
							"kind": 2048,
							"children": [
								4326,
								4329
							]
						}
					],
					"sources": [
						{
							"fileName": "index.ts",
							"line": 239,
							"character": 20
						}
					],
					"implementedTypes": [
						{
							"type": "reference",
							"name": "ISyncFileReader",
							"id": 4315
						}
					]
				},
				{
					"id": 4299,
					"name": "IAsyncFileReader",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "Reads a file asynchonrously to a dataframe."
					},
					"children": [
						{
							"id": 4300,
							"name": "parseCSV",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 4301,
									"name": "parseCSV",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Deserialize a CSV file to a DataFrame.\nReturns a promise that later resolves to a DataFrame.",
										"returns": "Returns a promise of a dataframe loaded from the file.\n"
									},
									"parameters": [
										{
											"id": 4302,
											"name": "config",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "reference",
												"name": "ICSVOptions",
												"id": 4295
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Promise",
										"typeArguments": [
											{
												"type": "reference",
												"name": "IDataFrame",
												"id": 683,
												"typeArguments": [
													{
														"type": "intrinsic",
														"name": "number"
													},
													{
														"type": "intrinsic",
														"name": "any"
													}
												]
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "index.ts",
									"line": 129,
									"character": 12
								}
							]
						},
						{
							"id": 4303,
							"name": "parseJSON",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 4304,
									"name": "parseJSON",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Deserialize a JSON file to a DataFrame.\nReturns a promise that later resolves to a DataFrame.",
										"returns": "Returns a promise of a dataframe loaded from the file.\n"
									},
									"type": {
										"type": "reference",
										"name": "Promise",
										"typeArguments": [
											{
												"type": "reference",
												"name": "IDataFrame",
												"id": 683,
												"typeArguments": [
													{
														"type": "intrinsic",
														"name": "number"
													},
													{
														"type": "intrinsic",
														"name": "any"
													}
												]
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "index.ts",
									"line": 137,
									"character": 13
								}
							]
						}
					],
					"groups": [
						{
							"title": "Methods",
							"kind": 2048,
							"children": [
								4300,
								4303
							]
						}
					],
					"sources": [
						{
							"fileName": "index.ts",
							"line": 119,
							"character": 33
						}
					],
					"implementedBy": [
						{
							"type": "reference",
							"name": "AsyncFileReader",
							"id": 4305
						}
					]
				},
				{
					"id": 4295,
					"name": "ICSVOptions",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "Options for parsing CSV data."
					},
					"children": [
						{
							"id": 4296,
							"name": "columnNames",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Optionally specifies the column names (when enabled, assumes that the header row is not read from the CSV data).\nDefault: undefined"
							},
							"sources": [
								{
									"fileName": "index.ts",
									"line": 40,
									"character": 15
								}
							],
							"type": {
								"type": "reference",
								"name": "Iterable",
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							}
						},
						{
							"id": 4297,
							"name": "dynamicTyping",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Automatically pick types based on what the value looks like.\nDefault: false."
							},
							"sources": [
								{
									"fileName": "index.ts",
									"line": 46,
									"character": 17
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "true"
									},
									{
										"type": "intrinsic",
										"name": "false"
									}
								]
							}
						},
						{
							"id": 4298,
							"name": "skipEmptyLines",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Skip empty lines in the input.\nDefault: true"
							},
							"sources": [
								{
									"fileName": "index.ts",
									"line": 52,
									"character": 18
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "true"
									},
									{
										"type": "intrinsic",
										"name": "false"
									}
								]
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								4296,
								4297,
								4298
							]
						}
					],
					"sources": [
						{
							"fileName": "index.ts",
							"line": 35,
							"character": 28
						}
					]
				},
				{
					"id": 4315,
					"name": "ISyncFileReader",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "Reads a file synchonrously to a dataframe."
					},
					"children": [
						{
							"id": 4316,
							"name": "parseCSV",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 4317,
									"name": "parseCSV",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Deserialize a CSV file to a DataFrame.",
										"returns": "Returns a dataframe that was deserialized from the file.\n"
									},
									"parameters": [
										{
											"id": 4318,
											"name": "config",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "reference",
												"name": "ICSVOptions",
												"id": 4295
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "IDataFrame",
										"id": 683,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "number"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "index.ts",
									"line": 226,
									"character": 12
								}
							]
						},
						{
							"id": 4319,
							"name": "parseJSON",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 4320,
									"name": "parseJSON",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Deserialize a JSON file to a DataFrame.",
										"returns": "Returns a dataframe that was deserialized from the file.\n"
									},
									"type": {
										"type": "reference",
										"name": "IDataFrame",
										"id": 683,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "number"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "index.ts",
									"line": 233,
									"character": 13
								}
							]
						}
					],
					"groups": [
						{
							"title": "Methods",
							"kind": 2048,
							"children": [
								4316,
								4319
							]
						}
					],
					"sources": [
						{
							"fileName": "index.ts",
							"line": 217,
							"character": 32
						}
					],
					"implementedBy": [
						{
							"type": "reference",
							"name": "SyncFileReader",
							"id": 4321
						}
					]
				},
				{
					"id": 4344,
					"name": "concat",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isConst": true
					},
					"sources": [
						{
							"fileName": "index.ts",
							"line": 292,
							"character": 12
						}
					],
					"type": {
						"type": "reference",
						"name": "concat",
						"id": 3088
					},
					"defaultValue": " Series.concat"
				},
				{
					"id": 4345,
					"name": "zip",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isConst": true
					},
					"sources": [
						{
							"fileName": "index.ts",
							"line": 304,
							"character": 9
						}
					],
					"type": {
						"type": "reference",
						"name": "zip",
						"id": 3096
					},
					"defaultValue": " Series.zip"
				},
				{
					"id": 4334,
					"name": "fromCSV",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 4335,
							"name": "fromCSV",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Deserialize a DataFrame from a CSV text string.",
								"returns": "Returns a dataframe that has been deserialized from the CSV data.\n"
							},
							"parameters": [
								{
									"id": 4336,
									"name": "csvTextString",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "The CSV text to deserialize."
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 4337,
									"name": "config",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isOptional": true
									},
									"type": {
										"type": "reference",
										"name": "ICSVOptions",
										"id": 4295
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "DataFrame",
								"id": 1420,
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "number"
									},
									{
										"type": "intrinsic",
										"name": "any"
									}
								]
							}
						}
					],
					"sources": [
						{
							"fileName": "index.ts",
							"line": 63,
							"character": 23
						}
					]
				},
				{
					"id": 4331,
					"name": "fromJSON",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 4332,
							"name": "fromJSON",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Deserialize a dataframe from a JSON text string.",
								"returns": "Returns a dataframe that has been deserialized from the JSON data.\n"
							},
							"parameters": [
								{
									"id": 4333,
									"name": "jsonTextString",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "The JSON text to deserialize.\n"
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "IDataFrame",
								"id": 683,
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "number"
									},
									{
										"type": "intrinsic",
										"name": "any"
									}
								]
							}
						}
					],
					"sources": [
						{
							"fileName": "index.ts",
							"line": 23,
							"character": 24
						}
					]
				},
				{
					"id": 4350,
					"name": "matrix",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 4351,
							"name": "matrix",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Generate a data-frame containing a matrix of values.",
								"returns": "Returns a dataframe that contains a matrix of generated values.\n"
							},
							"parameters": [
								{
									"id": 4352,
									"name": "numColumns",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "The number of columns in the data-frame."
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 4353,
									"name": "numRows",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "The number of rows in the data-frame."
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 4354,
									"name": "start",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "The starting value."
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 4355,
									"name": "increment",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "The value to increment by for each new value.\n"
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "IDataFrame",
								"id": 683,
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "number"
									},
									{
										"type": "intrinsic",
										"name": "any"
									}
								]
							}
						}
					],
					"sources": [
						{
							"fileName": "index.ts",
							"line": 348,
							"character": 22
						}
					]
				},
				{
					"id": 4346,
					"name": "range",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 4347,
							"name": "range",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Generate a series from a range of numbers.",
								"returns": "Returns a series with a sequence of generated values. The series contains 'count' values beginning at 'start'.\n"
							},
							"parameters": [
								{
									"id": 4348,
									"name": "start",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "The value of the first number in the range."
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 4349,
									"name": "count",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "The number of sequential values in the range.\n"
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "ISeries",
								"id": 2287,
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "number"
									},
									{
										"type": "intrinsic",
										"name": "number"
									}
								]
							}
						}
					],
					"sources": [
						{
							"fileName": "index.ts",
							"line": 325,
							"character": 21
						}
					]
				},
				{
					"id": 4338,
					"name": "readFile",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 4339,
							"name": "readFile",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Read a file asynchronously from the file system.\nWorks in Nodejs, doesn't work in the browser.",
								"returns": "Returns an object that represents the file. Use `parseCSV` or `parseJSON` to deserialize to a DataFrame.\n"
							},
							"parameters": [
								{
									"id": 4340,
									"name": "filePath",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "The path to the file to read.\n"
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "IAsyncFileReader",
								"id": 4299
							}
						}
					],
					"sources": [
						{
							"fileName": "index.ts",
							"line": 207,
							"character": 24
						}
					]
				},
				{
					"id": 4341,
					"name": "readFileSync",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 4342,
							"name": "readFileSync",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Read a file synchronously from the file system.\nWorks in Nodejs, doesn't work in the browser.",
								"returns": "Returns an object that represents the file. Use `parseCSV` or `parseJSON` to deserialize to a DataFrame.\n"
							},
							"parameters": [
								{
									"id": 4343,
									"name": "filePath",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "The path to the file to read.\n"
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "ISyncFileReader",
								"id": 4315
							}
						}
					],
					"sources": [
						{
							"fileName": "index.ts",
							"line": 285,
							"character": 28
						}
					]
				}
			],
			"groups": [
				{
					"title": "Classes",
					"kind": 128,
					"children": [
						4305,
						4321
					]
				},
				{
					"title": "Interfaces",
					"kind": 256,
					"children": [
						4299,
						4295,
						4315
					]
				},
				{
					"title": "Variables",
					"kind": 32,
					"children": [
						4344,
						4345
					]
				},
				{
					"title": "Functions",
					"kind": 64,
					"children": [
						4334,
						4331,
						4350,
						4346,
						4338,
						4341
					]
				}
			],
			"sources": [
				{
					"fileName": "index.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 642,
			"name": "\"lib/dataframe\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "C:/projects/github/data-forge/data-forge-ts/src/lib/dataframe.ts",
			"children": [
				{
					"id": 1829,
					"name": "CsvSerializer",
					"kind": 128,
					"kindString": "Class",
					"flags": {},
					"typeParameter": [
						{
							"id": 1830,
							"name": "IndexT",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {}
						},
						{
							"id": 1831,
							"name": "ValueT",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {}
						}
					],
					"children": [
						{
							"id": 1833,
							"name": "constructor",
							"kind": 512,
							"kindString": "Constructor",
							"flags": {},
							"signatures": [
								{
									"id": 1834,
									"name": "new CsvSerializer",
									"kind": 16384,
									"kindString": "Constructor signature",
									"flags": {},
									"parameters": [
										{
											"id": 1835,
											"name": "dataframe",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "IDataFrame",
												"id": 683,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "IndexT"
													},
													{
														"type": "typeParameter",
														"name": "ValueT"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "CsvSerializer",
										"id": 1829
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/dataframe.ts",
									"line": 3618,
									"character": 42
								}
							]
						},
						{
							"id": 1832,
							"name": "dataframe",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"sources": [
								{
									"fileName": "lib/dataframe.ts",
									"line": 3618,
									"character": 13
								}
							],
							"type": {
								"type": "reference",
								"name": "IDataFrame",
								"id": 683,
								"typeArguments": [
									{
										"type": "typeParameter",
										"name": "IndexT"
									},
									{
										"type": "typeParameter",
										"name": "ValueT"
									}
								]
							}
						},
						{
							"id": 1836,
							"name": "writeFile",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"signatures": [
								{
									"id": 1837,
									"name": "writeFile",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Serialize the dataframe to a CSV file in the local file system.\nAsynchronous version."
									},
									"parameters": [
										{
											"id": 1838,
											"name": "filePath",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Specifies the output path for the file.\n\n @returns Returns a promise that resolves when the file has been written.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Promise",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											}
										]
									},
									"implementationOf": {
										"type": "reference",
										"name": "ICsvSerializer.writeFile",
										"id": 1824
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/dataframe.ts",
									"line": 3632,
									"character": 13
								}
							],
							"implementationOf": {
								"type": "reference",
								"name": "ICsvSerializer.writeFile",
								"id": 1823
							}
						},
						{
							"id": 1839,
							"name": "writeFileSync",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"signatures": [
								{
									"id": 1840,
									"name": "writeFileSync",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Serialize the dataframe to a CSV file in the local file system.\nSynchronous version."
									},
									"parameters": [
										{
											"id": 1841,
											"name": "filePath",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Specifies the output path for the file.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									},
									"implementationOf": {
										"type": "reference",
										"name": "ICsvSerializer.writeFileSync",
										"id": 1827
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/dataframe.ts",
									"line": 3654,
									"character": 17
								}
							],
							"implementationOf": {
								"type": "reference",
								"name": "ICsvSerializer.writeFileSync",
								"id": 1826
							}
						}
					],
					"groups": [
						{
							"title": "Constructors",
							"kind": 512,
							"children": [
								1833
							]
						},
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								1832
							]
						},
						{
							"title": "Methods",
							"kind": 2048,
							"children": [
								1836,
								1839
							]
						}
					],
					"sources": [
						{
							"fileName": "lib/dataframe.ts",
							"line": 3616,
							"character": 19
						}
					],
					"implementedTypes": [
						{
							"type": "reference",
							"name": "ICsvSerializer",
							"id": 1822
						}
					]
				},
				{
					"id": 1420,
					"name": "DataFrame",
					"kind": 128,
					"kindString": "Class",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "Class that represents a dataframe containing a sequence of indexed rows of data."
					},
					"typeParameter": [
						{
							"id": 1421,
							"name": "IndexT",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {}
						},
						{
							"id": 1422,
							"name": "ValueT",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {}
						}
					],
					"children": [
						{
							"id": 1449,
							"name": "constructor",
							"kind": 512,
							"kindString": "Constructor",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "Create a dataframe."
							},
							"signatures": [
								{
									"id": 1450,
									"name": "new DataFrame",
									"kind": 16384,
									"kindString": "Constructor signature",
									"flags": {},
									"comment": {
										"shortText": "Create a dataframe."
									},
									"parameters": [
										{
											"id": 1451,
											"name": "config",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"shortText": "This can be either an array or a config object the sets the values that the dataframe contains.\nIf it is an array it specifies the values that the dataframe contains.\nIf it is a config object that can contain:\n     values: Optional array or iterable of values that the dataframe contains.\n     index: Optional array or iterable of values that index the dataframe, defaults to a dataframe of integers from 1 and counting upward.\n     pairs: Optional iterable of pairs (index and value) that the dataframe contains.\n"
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "reference",
														"name": "Iterable",
														"typeArguments": [
															{
																"type": "typeParameter",
																"name": "ValueT"
															}
														]
													},
													{
														"type": "reference",
														"name": "IDataFrameConfig",
														"id": 649,
														"typeArguments": [
															{
																"type": "typeParameter",
																"name": "IndexT"
															},
															{
																"type": "typeParameter",
																"name": "ValueT"
															}
														]
													},
													{
														"type": "reference",
														"name": "DataFrameConfigFn",
														"id": 2268,
														"typeArguments": [
															{
																"type": "typeParameter",
																"name": "IndexT"
															},
															{
																"type": "typeParameter",
																"name": "ValueT"
															}
														]
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "DataFrame",
										"id": 1420
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/dataframe.ts",
									"line": 1262,
									"character": 5
								}
							]
						},
						{
							"id": 1423,
							"name": "configFn",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPrivate": true,
								"isExported": true
							},
							"sources": [
								{
									"fileName": "lib/dataframe.ts",
									"line": 1064,
									"character": 20
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "reference",
										"name": "DataFrameConfigFn",
										"id": 2268,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "IndexT"
											},
											{
												"type": "typeParameter",
												"name": "ValueT"
											}
										]
									},
									{
										"type": "intrinsic",
										"name": "null"
									}
								]
							},
							"defaultValue": " null"
						},
						{
							"id": 1424,
							"name": "content",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPrivate": true,
								"isExported": true
							},
							"sources": [
								{
									"fileName": "lib/dataframe.ts",
									"line": 1070,
									"character": 19
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "reference",
										"name": "IDataFrameContent",
										"id": 1412,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "IndexT"
											},
											{
												"type": "typeParameter",
												"name": "ValueT"
											}
										]
									},
									{
										"type": "intrinsic",
										"name": "null"
									}
								]
							},
							"defaultValue": " null"
						},
						{
							"id": 1425,
							"name": "defaultCountIterable",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isStatic": true,
								"isPrivate": true,
								"isExported": true
							},
							"sources": [
								{
									"fileName": "lib/dataframe.ts",
									"line": 1072,
									"character": 48
								}
							],
							"type": {
								"type": "reference",
								"name": "CountIterable",
								"id": 34
							},
							"defaultValue": " new CountIterable()"
						},
						{
							"id": 1426,
							"name": "defaultEmptyIterable",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isStatic": true,
								"isPrivate": true,
								"isExported": true
							},
							"sources": [
								{
									"fileName": "lib/dataframe.ts",
									"line": 1073,
									"character": 48
								}
							],
							"type": {
								"type": "reference",
								"name": "EmptyIterable",
								"id": 25
							},
							"defaultValue": " new EmptyIterable()"
						},
						{
							"id": 1456,
							"name": "__@iterator",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1457,
									"name": "__@iterator",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Get an iterator to enumerate the values of the dataframe.\nEnumerating the iterator forces lazy evaluation to complete."
									},
									"type": {
										"type": "reference",
										"name": "Iterator",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "any"
											}
										]
									},
									"implementationOf": {
										"type": "reference",
										"name": "IDataFrame.__@iterator",
										"id": 687
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/dataframe.ts",
									"line": 1313,
									"character": 21
								}
							],
							"implementationOf": {
								"type": "reference",
								"name": "IDataFrame.__@iterator",
								"id": 686
							}
						},
						{
							"id": 1636,
							"name": "after",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1637,
									"name": "after",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Get a new series containing all values after the specified index value (exclusive).",
										"returns": "Returns a new series containing all values after the specified index value.\n"
									},
									"parameters": [
										{
											"id": 1638,
											"name": "indexValue",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The index value to search for.\n"
											},
											"type": {
												"type": "typeParameter",
												"name": "IndexT"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "IDataFrame",
										"id": 683,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "IndexT"
											},
											{
												"type": "typeParameter",
												"name": "ValueT"
											}
										]
									},
									"implementationOf": {
										"type": "reference",
										"name": "IDataFrame.after",
										"id": 867
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/dataframe.ts",
									"line": 2641,
									"character": 9
								}
							],
							"implementationOf": {
								"type": "reference",
								"name": "IDataFrame.after",
								"id": 866
							}
						},
						{
							"id": 1574,
							"name": "aggregate",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1575,
									"name": "aggregate",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Aggregate the values in the dataframe.",
										"returns": "Returns a new value that has been aggregated from the input sequence by the 'selector' function.\n"
									},
									"typeParameter": [
										{
											"id": 1576,
											"name": "ToT",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										}
									],
									"parameters": [
										{
											"id": 1577,
											"name": "seedOrSelector",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "reference",
														"name": "AggregateFn",
														"id": 3644,
														"typeArguments": [
															{
																"type": "typeParameter",
																"name": "ValueT"
															},
															{
																"type": "typeParameter",
																"name": "ToT"
															}
														]
													},
													{
														"type": "typeParameter",
														"name": "ToT"
													},
													{
														"type": "reference",
														"name": "IColumnAggregateSpec",
														"id": 672
													}
												]
											}
										},
										{
											"id": 1578,
											"name": "selector",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"text": "Function that takes the seed and then each value in the dataframe and produces the aggregate value.\n"
											},
											"type": {
												"type": "reference",
												"name": "AggregateFn",
												"id": 3644,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "ValueT"
													},
													{
														"type": "typeParameter",
														"name": "ToT"
													}
												]
											}
										}
									],
									"type": {
										"type": "typeParameter",
										"name": "ToT"
									},
									"implementationOf": {
										"type": "reference",
										"name": "IDataFrame.aggregate",
										"id": 805
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/dataframe.ts",
									"line": 2186,
									"character": 13
								}
							],
							"implementationOf": {
								"type": "reference",
								"name": "IDataFrame.aggregate",
								"id": 804
							}
						},
						{
							"id": 1618,
							"name": "all",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1619,
									"name": "all",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Determine if the predicate returns truthy for all values in the series.\nReturns false as soon as the predicate evaluates to falsy.\nReturns true if the predicate returns truthy for all values in the series.\nReturns false if the series is empty.",
										"returns": "Returns true if the predicate has returned truthy for every value in the sequence, otherwise returns false.\n"
									},
									"parameters": [
										{
											"id": 1620,
											"name": "predicate",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Predicate function that receives each value in turn and returns truthy for a match, otherwise falsy.\n"
											},
											"type": {
												"type": "reference",
												"name": "PredicateFn",
												"id": 152,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "ValueT"
													}
												]
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									},
									"implementationOf": {
										"type": "reference",
										"name": "IDataFrame.all",
										"id": 849
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/dataframe.ts",
									"line": 2486,
									"character": 7
								}
							],
							"implementationOf": {
								"type": "reference",
								"name": "IDataFrame.all",
								"id": 848
							}
						},
						{
							"id": 1621,
							"name": "any",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1622,
									"name": "any",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Determine if the predicate returns truthy for any of the values in the series.\nReturns true as soon as the predicate returns truthy.\nReturns false if the predicate never returns truthy.\nIf no predicate is specified the value itself is checked.",
										"returns": "Returns true if the predicate has returned truthy for any value in the sequence, otherwise returns false.\n"
									},
									"parameters": [
										{
											"id": 1623,
											"name": "predicate",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "reference",
												"name": "PredicateFn",
												"id": 152,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "ValueT"
													}
												]
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									},
									"implementationOf": {
										"type": "reference",
										"name": "IDataFrame.any",
										"id": 852
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/dataframe.ts",
									"line": 2512,
									"character": 7
								}
							],
							"implementationOf": {
								"type": "reference",
								"name": "IDataFrame.any",
								"id": 851
							}
						},
						{
							"id": 1798,
							"name": "appendPair",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1799,
									"name": "appendPair",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Append a pair to the end of a dataframe.",
										"returns": "Returns a new dataframe with the specified pair appended.\n"
									},
									"parameters": [
										{
											"id": 1800,
											"name": "pair",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The pair to append.\n"
											},
											"type": {
												"type": "tuple",
												"elements": [
													{
														"type": "typeParameter",
														"name": "IndexT"
													},
													{
														"type": "typeParameter",
														"name": "ValueT"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "IDataFrame",
										"id": 683,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "IndexT"
											},
											{
												"type": "typeParameter",
												"name": "ValueT"
											}
										]
									},
									"implementationOf": {
										"type": "reference",
										"name": "IDataFrame.appendPair",
										"id": 1020
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/dataframe.ts",
									"line": 3399,
									"character": 14
								}
							],
							"implementationOf": {
								"type": "reference",
								"name": "IDataFrame.appendPair",
								"id": 1019
							}
						},
						{
							"id": 1816,
							"name": "asCSV",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1817,
									"name": "asCSV",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Treat the dataframe as CSV data for purposes of serialization.",
										"returns": "Returns an object that represents the dataframe for serialization in the CSV format. Call `writeFile`, `writeFileSync` to output the dataframe via different media.\n"
									},
									"type": {
										"type": "reference",
										"name": "ICsvSerializer",
										"id": 1822
									},
									"implementationOf": {
										"type": "reference",
										"name": "IDataFrame.asCSV",
										"id": 1038
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/dataframe.ts",
									"line": 3533,
									"character": 9
								}
							],
							"implementationOf": {
								"type": "reference",
								"name": "IDataFrame.asCSV",
								"id": 1037
							}
						},
						{
							"id": 1818,
							"name": "asJSON",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1819,
									"name": "asJSON",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Treat the dataframe as JSON data for purposes of serialization.",
										"returns": "Returns an object that can serialize the dataframe in the JSON format. Call `writeFile` or `writeFileSync` to output the dataframe via different media.\n"
									},
									"type": {
										"type": "reference",
										"name": "IJsonSerializer",
										"id": 1842
									},
									"implementationOf": {
										"type": "reference",
										"name": "IDataFrame.asJSON",
										"id": 1040
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/dataframe.ts",
									"line": 3542,
									"character": 10
								}
							],
							"implementationOf": {
								"type": "reference",
								"name": "IDataFrame.asJSON",
								"id": 1039
							}
						},
						{
							"id": 1603,
							"name": "at",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1604,
									"name": "at",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Get the value at a specified index.",
										"returns": "Returns the value from the specified index in the sequence or undefined if there is no such index in the series.\n"
									},
									"parameters": [
										{
											"id": 1605,
											"name": "index",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Index to for which to retreive the value.\n"
											},
											"type": {
												"type": "typeParameter",
												"name": "IndexT"
											}
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "typeParameter",
												"name": "ValueT"
											},
											{
												"type": "intrinsic",
												"name": "undefined"
											}
										]
									},
									"implementationOf": {
										"type": "reference",
										"name": "IDataFrame.at",
										"id": 834
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/dataframe.ts",
									"line": 2377,
									"character": 6
								}
							],
							"implementationOf": {
								"type": "reference",
								"name": "IDataFrame.at",
								"id": 833
							}
						},
						{
							"id": 1662,
							"name": "bake",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1663,
									"name": "bake",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Forces lazy evaluation to complete and 'bakes' the dataframe into memory.",
										"returns": "Returns a dataframe that has been 'baked', all lazy evaluation has completed.\n"
									},
									"type": {
										"type": "reference",
										"name": "IDataFrame",
										"id": 683,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "IndexT"
											},
											{
												"type": "typeParameter",
												"name": "ValueT"
											}
										]
									},
									"implementationOf": {
										"type": "reference",
										"name": "IDataFrame.bake",
										"id": 893
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/dataframe.ts",
									"line": 2819,
									"character": 8
								}
							],
							"implementationOf": {
								"type": "reference",
								"name": "IDataFrame.bake",
								"id": 892
							}
						},
						{
							"id": 1633,
							"name": "before",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1634,
									"name": "before",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Get a new series containing all values up to the specified index value (exclusive).",
										"returns": "Returns a new series containing all values up to the specified inde value.\n"
									},
									"parameters": [
										{
											"id": 1635,
											"name": "indexValue",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The index value to search for before ending the new series.\n"
											},
											"type": {
												"type": "typeParameter",
												"name": "IndexT"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "IDataFrame",
										"id": 683,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "IndexT"
											},
											{
												"type": "typeParameter",
												"name": "ValueT"
											}
										]
									},
									"implementationOf": {
										"type": "reference",
										"name": "IDataFrame.before",
										"id": 864
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/dataframe.ts",
									"line": 2621,
									"character": 10
								}
							],
							"implementationOf": {
								"type": "reference",
								"name": "IDataFrame.before",
								"id": 863
							}
						},
						{
							"id": 1639,
							"name": "between",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1640,
									"name": "between",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Get a new dataframe containing all values between the specified index values (inclusive).",
										"returns": "Returns a new dataframe containing all values between the specified index values (inclusive).\n"
									},
									"parameters": [
										{
											"id": 1641,
											"name": "startIndexValue",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The index where the new sequence starts."
											},
											"type": {
												"type": "typeParameter",
												"name": "IndexT"
											}
										},
										{
											"id": 1642,
											"name": "endIndexValue",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The index where the new sequence ends.\n"
											},
											"type": {
												"type": "typeParameter",
												"name": "IndexT"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "IDataFrame",
										"id": 683,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "IndexT"
											},
											{
												"type": "typeParameter",
												"name": "ValueT"
											}
										]
									},
									"implementationOf": {
										"type": "reference",
										"name": "IDataFrame.between",
										"id": 870
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/dataframe.ts",
									"line": 2661,
									"character": 11
								}
							],
							"implementationOf": {
								"type": "reference",
								"name": "IDataFrame.between",
								"id": 869
							}
						},
						{
							"id": 1510,
							"name": "bringToBack",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1511,
									"name": "bringToBack",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Bring the name column (or columns) to the back, making it (or them) the last column(s) in the data-frame.",
										"returns": "Returns a new dataframe with 1 or more columns bought to the back of the column ordering.\n"
									},
									"parameters": [
										{
											"id": 1512,
											"name": "columnOrColumns",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Specifies the column or columns to bring to the back.\n"
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "array",
														"elementType": {
															"type": "intrinsic",
															"name": "string"
														}
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "IDataFrame",
										"id": 683,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "IndexT"
											},
											{
												"type": "typeParameter",
												"name": "ValueT"
											}
										]
									},
									"implementationOf": {
										"type": "reference",
										"name": "IDataFrame.bringToBack",
										"id": 741
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/dataframe.ts",
									"line": 1759,
									"character": 15
								}
							],
							"implementationOf": {
								"type": "reference",
								"name": "IDataFrame.bringToBack",
								"id": 740
							}
						},
						{
							"id": 1507,
							"name": "bringToFront",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1508,
									"name": "bringToFront",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Bring the name column (or columns) to the front, making it (or them) the first column(s) in the data-frame.",
										"returns": "Returns a new dataframe with 1 or more columns bought to the front of the column ordering.\n"
									},
									"parameters": [
										{
											"id": 1509,
											"name": "columnOrColumns",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Specifies the column or columns to bring to the front.\n"
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "array",
														"elementType": {
															"type": "intrinsic",
															"name": "string"
														}
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "IDataFrame",
										"id": 683,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "IndexT"
											},
											{
												"type": "typeParameter",
												"name": "ValueT"
											}
										]
									},
									"implementationOf": {
										"type": "reference",
										"name": "IDataFrame.bringToFront",
										"id": 738
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/dataframe.ts",
									"line": 1712,
									"character": 16
								}
							],
							"implementationOf": {
								"type": "reference",
								"name": "IDataFrame.bringToFront",
								"id": 737
							}
						},
						{
							"id": 1683,
							"name": "concat",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1684,
									"name": "concat",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Concatenate multiple other dataframes onto this dataframe.",
										"returns": "Returns a single dataframes concatenated from multiple input dataframes.\n"
									},
									"parameters": [
										{
											"id": 1685,
											"name": "dataframes",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isRest": true
											},
											"comment": {
												"text": "Multiple arguments. Each can be either a dataframe or an array of dataframes.\n"
											},
											"type": {
												"type": "array",
												"elementType": {
													"type": "union",
													"types": [
														{
															"type": "reference",
															"name": "IDataFrame",
															"id": 683,
															"typeArguments": [
																{
																	"type": "unknown",
																	"name": "IndexT"
																},
																{
																	"type": "unknown",
																	"name": "ValueT"
																}
															]
														},
														{
															"type": "array",
															"elementType": {
																"type": "reference",
																"name": "IDataFrame",
																"id": 683,
																"typeArguments": [
																	{
																		"type": "unknown",
																		"name": "IndexT"
																	},
																	{
																		"type": "unknown",
																		"name": "ValueT"
																	}
																]
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "IDataFrame",
										"id": 683,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "IndexT"
											},
											{
												"type": "typeParameter",
												"name": "ValueT"
											}
										]
									},
									"implementationOf": {
										"type": "reference",
										"name": "IDataFrame.concat",
										"id": 909
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/dataframe.ts",
									"line": 2964,
									"character": 10
								}
							],
							"implementationOf": {
								"type": "reference",
								"name": "IDataFrame.concat",
								"id": 908
							}
						},
						{
							"id": 1597,
							"name": "count",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1598,
									"name": "count",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Count the number of values in the series.",
										"returns": "Returns the count of all values in the series.\n"
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									},
									"implementationOf": {
										"type": "reference",
										"name": "IDataFrame.count",
										"id": 828
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/dataframe.ts",
									"line": 2327,
									"character": 9
								}
							],
							"implementationOf": {
								"type": "reference",
								"name": "IDataFrame.count",
								"id": 827
							}
						},
						{
							"id": 1805,
							"name": "defaultIfEmpty",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1806,
									"name": "defaultIfEmpty",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Returns the specified default sequence if the dataframe is empty.",
										"returns": "Returns 'defaultSequence' if the dataframe is empty.\n"
									},
									"parameters": [
										{
											"id": 1807,
											"name": "defaultSequence",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Default sequence to return if the dataframe is empty.\n"
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "array",
														"elementType": {
															"type": "typeParameter",
															"name": "ValueT"
														}
													},
													{
														"type": "reference",
														"name": "IDataFrame",
														"id": 683,
														"typeArguments": [
															{
																"type": "typeParameter",
																"name": "IndexT"
															},
															{
																"type": "typeParameter",
																"name": "ValueT"
															}
														]
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "IDataFrame",
										"id": 683,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "IndexT"
											},
											{
												"type": "typeParameter",
												"name": "ValueT"
											}
										]
									},
									"implementationOf": {
										"type": "reference",
										"name": "IDataFrame.defaultIfEmpty",
										"id": 1027
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/dataframe.ts",
									"line": 3444,
									"character": 18
								}
							],
							"implementationOf": {
								"type": "reference",
								"name": "IDataFrame.defaultIfEmpty",
								"id": 1026
							}
						},
						{
							"id": 1552,
							"name": "deflate",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1553,
									"name": "deflate",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Deflate a data-frame to a series.",
										"returns": "Returns a series that was created from the input dataframe.\n"
									},
									"typeParameter": [
										{
											"id": 1554,
											"name": "ToT",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										}
									],
									"parameters": [
										{
											"id": 1555,
											"name": "selector",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "reference",
												"name": "SelectorWithIndexFn",
												"id": 3569,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "ValueT"
													},
													{
														"type": "typeParameter",
														"name": "ToT"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "ISeries",
										"id": 2287,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "IndexT"
											},
											{
												"type": "typeParameter",
												"name": "ToT"
											}
										]
									},
									"implementationOf": {
										"type": "reference",
										"name": "IDataFrame.deflate",
										"id": 783
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/dataframe.ts",
									"line": 2044,
									"character": 11
								}
							],
							"implementationOf": {
								"type": "reference",
								"name": "IDataFrame.deflate",
								"id": 782
							}
						},
						{
							"id": 1808,
							"name": "detectTypes",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1809,
									"name": "detectTypes",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Detect the the frequency of the types of the values in the dataframe.",
										"returns": "Returns a dataframe that describes the data types contained in the dataframe.\n"
									},
									"type": {
										"type": "reference",
										"name": "IDataFrame",
										"id": 683,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "number"
											},
											{
												"type": "reference",
												"name": "ITypeFrequency",
												"id": 675
											}
										]
									},
									"implementationOf": {
										"type": "reference",
										"name": "IDataFrame.detectTypes",
										"id": 1030
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/dataframe.ts",
									"line": 3467,
									"character": 15
								}
							],
							"implementationOf": {
								"type": "reference",
								"name": "IDataFrame.detectTypes",
								"id": 1029
							}
						},
						{
							"id": 1810,
							"name": "detectValues",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1811,
									"name": "detectValues",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Detect the frequency of the values in the dataframe.",
										"returns": "Returns a dataframe that describes the values contained in the dataframe.\n"
									},
									"type": {
										"type": "reference",
										"name": "IDataFrame",
										"id": 683,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "number"
											},
											{
												"type": "reference",
												"name": "IValueFrequency",
												"id": 679
											}
										]
									},
									"implementationOf": {
										"type": "reference",
										"name": "IDataFrame.detectValues",
										"id": 1032
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/dataframe.ts",
									"line": 3490,
									"character": 16
								}
							],
							"implementationOf": {
								"type": "reference",
								"name": "IDataFrame.detectValues",
								"id": 1031
							}
						},
						{
							"id": 1666,
							"name": "distinct",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1667,
									"name": "distinct",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Returns only values in the dataframe that are distinct.",
										"returns": "Returns a dataframe containing only unique values as determined by the 'selector' function.\n"
									},
									"typeParameter": [
										{
											"id": 1668,
											"name": "ToT",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										}
									],
									"parameters": [
										{
											"id": 1669,
											"name": "selector",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"text": "Selects the value used to compare for duplicates.\n"
											},
											"type": {
												"type": "reference",
												"name": "SelectorFn",
												"id": 66,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "ValueT"
													},
													{
														"type": "typeParameter",
														"name": "ToT"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "IDataFrame",
										"id": 683,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "IndexT"
											},
											{
												"type": "typeParameter",
												"name": "ValueT"
											}
										]
									},
									"implementationOf": {
										"type": "reference",
										"name": "IDataFrame.distinct",
										"id": 897
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/dataframe.ts",
									"line": 2858,
									"character": 12
								}
							],
							"implementationOf": {
								"type": "reference",
								"name": "IDataFrame.distinct",
								"id": 896
							}
						},
						{
							"id": 1499,
							"name": "dropSeries",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1500,
									"name": "dropSeries",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Create a new data frame with the requested column or columns dropped.",
										"returns": "Returns a new dataframe with a particular name column or columns removed.\n"
									},
									"typeParameter": [
										{
											"id": 1501,
											"name": "NewValueT",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										}
									],
									"parameters": [
										{
											"id": 1502,
											"name": "columnOrColumns",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Specifies the column name (a string) or columns (array of column names) to drop.\n"
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "array",
														"elementType": {
															"type": "intrinsic",
															"name": "string"
														}
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "IDataFrame",
										"id": 683,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "IndexT"
											},
											{
												"type": "typeParameter",
												"name": "NewValueT"
											}
										]
									},
									"implementationOf": {
										"type": "reference",
										"name": "IDataFrame.dropSeries",
										"id": 730
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/dataframe.ts",
									"line": 1625,
									"character": 14
								}
							],
							"implementationOf": {
								"type": "reference",
								"name": "IDataFrame.dropSeries",
								"id": 729
							}
						},
						{
							"id": 1630,
							"name": "endAt",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1631,
									"name": "endAt",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Get a new series containing all values up until and including the specified index value (inclusive).",
										"returns": "Returns a new series containing all values up until and including the specified index value.\n"
									},
									"parameters": [
										{
											"id": 1632,
											"name": "indexValue",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The index value to search for before ending the new series.\n"
											},
											"type": {
												"type": "typeParameter",
												"name": "IndexT"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "IDataFrame",
										"id": 683,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "IndexT"
											},
											{
												"type": "typeParameter",
												"name": "ValueT"
											}
										]
									},
									"implementationOf": {
										"type": "reference",
										"name": "IDataFrame.endAt",
										"id": 861
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/dataframe.ts",
									"line": 2601,
									"character": 9
								}
							],
							"implementationOf": {
								"type": "reference",
								"name": "IDataFrame.endAt",
								"id": 860
							}
						},
						{
							"id": 1490,
							"name": "ensureSeries",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1491,
									"name": "ensureSeries",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Add a series if it doesn't already exist.",
										"returns": "Returns a new dataframe with the specified series added, if the series didn't already exist. Otherwise if the requested series already exists the same dataframe is returned.\n"
									},
									"typeParameter": [
										{
											"id": 1492,
											"name": "SeriesValueT",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										}
									],
									"parameters": [
										{
											"id": 1493,
											"name": "columnNameOrSpec",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The name of the series to add or a column spec that defines the new column."
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "reference",
														"name": "IColumnGenSpec",
														"id": 663
													}
												]
											}
										},
										{
											"id": 1494,
											"name": "series",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"text": "The series to add to the dataframe. Can also be a function that returns the series.\n"
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "reference",
														"name": "ISeries",
														"id": 2287,
														"typeArguments": [
															{
																"type": "typeParameter",
																"name": "IndexT"
															},
															{
																"type": "typeParameter",
																"name": "SeriesValueT"
															}
														]
													},
													{
														"type": "reference",
														"name": "SeriesSelectorFn",
														"id": 2261,
														"typeArguments": [
															{
																"type": "typeParameter",
																"name": "IndexT"
															},
															{
																"type": "typeParameter",
																"name": "ValueT"
															},
															{
																"type": "typeParameter",
																"name": "SeriesValueT"
															}
														]
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "IDataFrame",
										"id": 683,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "IndexT"
											},
											{
												"type": "typeParameter",
												"name": "ValueT"
											}
										]
									},
									"implementationOf": {
										"type": "reference",
										"name": "IDataFrame.ensureSeries",
										"id": 721
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/dataframe.ts",
									"line": 1552,
									"character": 16
								}
							],
							"implementationOf": {
								"type": "reference",
								"name": "IDataFrame.ensureSeries",
								"id": 720
							}
						},
						{
							"id": 1742,
							"name": "except",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1743,
									"name": "except",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Returns the exception of values between two dataframes.",
										"returns": "Returns the difference between the two series.\n"
									},
									"typeParameter": [
										{
											"id": 1744,
											"name": "InnerIndexT",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										},
										{
											"id": 1745,
											"name": "InnerValueT",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										},
										{
											"id": 1746,
											"name": "KeyT",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										}
									],
									"parameters": [
										{
											"id": 1747,
											"name": "inner",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The other dataframe to combine."
											},
											"type": {
												"type": "reference",
												"name": "IDataFrame",
												"id": 683,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "InnerIndexT"
													},
													{
														"type": "typeParameter",
														"name": "InnerValueT"
													}
												]
											}
										},
										{
											"id": 1748,
											"name": "outerSelector",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "reference",
												"name": "SelectorFn",
												"id": 66,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "ValueT"
													},
													{
														"type": "typeParameter",
														"name": "KeyT"
													}
												]
											}
										},
										{
											"id": 1749,
											"name": "innerSelector",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "reference",
												"name": "SelectorFn",
												"id": 66,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "InnerValueT"
													},
													{
														"type": "typeParameter",
														"name": "KeyT"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "IDataFrame",
										"id": 683,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "IndexT"
											},
											{
												"type": "typeParameter",
												"name": "ValueT"
											}
										]
									},
									"implementationOf": {
										"type": "reference",
										"name": "IDataFrame.except",
										"id": 964
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/dataframe.ts",
									"line": 3124,
									"character": 10
								}
							],
							"implementationOf": {
								"type": "reference",
								"name": "IDataFrame.except",
								"id": 963
							}
						},
						{
							"id": 1481,
							"name": "expectSeries",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1482,
									"name": "expectSeries",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Verify the existance of a column and return it.\nThrows an exception if the column doesn't exist."
									},
									"typeParameter": [
										{
											"id": 1483,
											"name": "SeriesValueT",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										}
									],
									"parameters": [
										{
											"id": 1484,
											"name": "columnName",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Name or index of the column to retreive.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "ISeries",
										"id": 2287,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "IndexT"
											},
											{
												"type": "typeParameter",
												"name": "SeriesValueT"
											}
										]
									},
									"implementationOf": {
										"type": "reference",
										"name": "IDataFrame.expectSeries",
										"id": 712
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/dataframe.ts",
									"line": 1455,
									"character": 16
								}
							],
							"implementationOf": {
								"type": "reference",
								"name": "IDataFrame.expectSeries",
								"id": 711
							}
						},
						{
							"id": 1801,
							"name": "fillGaps",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1802,
									"name": "fillGaps",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Fill gaps in a dataframe.",
										"returns": "Returns a new dataframe with gaps filled in.\n"
									},
									"parameters": [
										{
											"id": 1803,
											"name": "comparer",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Comparer that is passed pairA and pairB, two consecutive rows, return truthy if there is a gap between the rows, or falsey if there is no gap."
											},
											"type": {
												"type": "reference",
												"name": "ComparerFn",
												"id": 371,
												"typeArguments": [
													{
														"type": "tuple",
														"elements": [
															{
																"type": "typeParameter",
																"name": "IndexT"
															},
															{
																"type": "typeParameter",
																"name": "ValueT"
															}
														]
													},
													{
														"type": "tuple",
														"elements": [
															{
																"type": "typeParameter",
																"name": "IndexT"
															},
															{
																"type": "typeParameter",
																"name": "ValueT"
															}
														]
													}
												]
											}
										},
										{
											"id": 1804,
											"name": "generator",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Generator that is passed pairA and pairB, two consecutive rows, returns an array of pairs that fills the gap between the rows.\n"
											},
											"type": {
												"type": "reference",
												"name": "GapFillFn",
												"id": 3663,
												"typeArguments": [
													{
														"type": "tuple",
														"elements": [
															{
																"type": "typeParameter",
																"name": "IndexT"
															},
															{
																"type": "typeParameter",
																"name": "ValueT"
															}
														]
													},
													{
														"type": "tuple",
														"elements": [
															{
																"type": "typeParameter",
																"name": "IndexT"
															},
															{
																"type": "typeParameter",
																"name": "ValueT"
															}
														]
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "IDataFrame",
										"id": 683,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "IndexT"
											},
											{
												"type": "typeParameter",
												"name": "ValueT"
											}
										]
									},
									"implementationOf": {
										"type": "reference",
										"name": "IDataFrame.fillGaps",
										"id": 1023
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/dataframe.ts",
									"line": 3414,
									"character": 12
								}
							],
							"implementationOf": {
								"type": "reference",
								"name": "IDataFrame.fillGaps",
								"id": 1022
							}
						},
						{
							"id": 1599,
							"name": "first",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1600,
									"name": "first",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Get the first value of the series.",
										"returns": "Returns the first value of the series.\n"
									},
									"type": {
										"type": "typeParameter",
										"name": "ValueT"
									},
									"implementationOf": {
										"type": "reference",
										"name": "IDataFrame.first",
										"id": 830
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/dataframe.ts",
									"line": 2341,
									"character": 9
								}
							],
							"implementationOf": {
								"type": "reference",
								"name": "IDataFrame.first",
								"id": 829
							}
						},
						{
							"id": 1615,
							"name": "forEach",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1616,
									"name": "forEach",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Invoke a callback function for each value in the series.",
										"returns": "Returns the input series with no modifications.\n"
									},
									"parameters": [
										{
											"id": 1617,
											"name": "callback",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The calback to invoke for each value.\n"
											},
											"type": {
												"type": "reference",
												"name": "CallbackFn",
												"id": 3563,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "ValueT"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "IDataFrame",
										"id": 683,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "IndexT"
											},
											{
												"type": "typeParameter",
												"name": "ValueT"
											}
										]
									},
									"implementationOf": {
										"type": "reference",
										"name": "IDataFrame.forEach",
										"id": 846
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/dataframe.ts",
									"line": 2465,
									"character": 11
								}
							],
							"implementationOf": {
								"type": "reference",
								"name": "IDataFrame.forEach",
								"id": 845
							}
						},
						{
							"id": 1548,
							"name": "generateSeries",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1549,
									"name": "generateSeries",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Generate new columns based on existing rows.",
										"returns": "Returns a new dataframe with 1 or more new columns.\n"
									},
									"typeParameter": [
										{
											"id": 1550,
											"name": "NewValueT",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										}
									],
									"parameters": [
										{
											"id": 1551,
											"name": "generator",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Generator function that transforms each row to a new set of columns.\n"
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "reference",
														"name": "SelectorWithIndexFn",
														"id": 3569,
														"typeArguments": [
															{
																"type": "intrinsic",
																"name": "any"
															},
															{
																"type": "intrinsic",
																"name": "any"
															}
														]
													},
													{
														"type": "reference",
														"name": "IColumnTransformSpec",
														"id": 669
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "IDataFrame",
										"id": 683,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "IndexT"
											},
											{
												"type": "typeParameter",
												"name": "NewValueT"
											}
										]
									},
									"implementationOf": {
										"type": "reference",
										"name": "IDataFrame.generateSeries",
										"id": 779
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/dataframe.ts",
									"line": 2004,
									"character": 18
								}
							],
							"implementationOf": {
								"type": "reference",
								"name": "IDataFrame.generateSeries",
								"id": 778
							}
						},
						{
							"id": 1458,
							"name": "getColumnNames",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1459,
									"name": "getColumnNames",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Get the names of the columns in the dataframe.",
										"returns": "Returns an array of the column names in the dataframe.\n"
									},
									"type": {
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "string"
										}
									},
									"implementationOf": {
										"type": "reference",
										"name": "IDataFrame.getColumnNames",
										"id": 689
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/dataframe.ts",
									"line": 1322,
									"character": 18
								}
							],
							"implementationOf": {
								"type": "reference",
								"name": "IDataFrame.getColumnNames",
								"id": 688
							}
						},
						{
							"id": 1460,
							"name": "getColumns",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1461,
									"name": "getColumns",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Retreive a collection of all columns in the dataframe.",
										"returns": "Returns a series the columns in the dataframe.\n"
									},
									"type": {
										"type": "reference",
										"name": "ISeries",
										"id": 2287,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "number"
											},
											{
												"type": "reference",
												"name": "IColumn",
												"id": 660
											}
										]
									},
									"implementationOf": {
										"type": "reference",
										"name": "IDataFrame.getColumns",
										"id": 691
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/dataframe.ts",
									"line": 1331,
									"character": 14
								}
							],
							"implementationOf": {
								"type": "reference",
								"name": "IDataFrame.getColumns",
								"id": 690
							}
						},
						{
							"id": 1454,
							"name": "getContent",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPrivate": true,
								"isExported": true
							},
							"signatures": [
								{
									"id": 1455,
									"name": "getContent",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "IDataFrameContent",
										"id": 1412,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "IndexT"
											},
											{
												"type": "typeParameter",
												"name": "ValueT"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/dataframe.ts",
									"line": 1304,
									"character": 22
								}
							]
						},
						{
							"id": 1462,
							"name": "getIndex",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1463,
									"name": "getIndex",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Get the index for the dataframe."
									},
									"type": {
										"type": "reference",
										"name": "IIndex",
										"id": 3671,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "IndexT"
											}
										]
									},
									"implementationOf": {
										"type": "reference",
										"name": "IDataFrame.getIndex",
										"id": 693
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/dataframe.ts",
									"line": 1348,
									"character": 12
								}
							],
							"implementationOf": {
								"type": "reference",
								"name": "IDataFrame.getIndex",
								"id": 692
							}
						},
						{
							"id": 1474,
							"name": "getSeries",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1475,
									"name": "getSeries",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Retreive a series from a column of the dataframe."
									},
									"typeParameter": [
										{
											"id": 1476,
											"name": "SeriesValueT",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										}
									],
									"parameters": [
										{
											"id": 1477,
											"name": "columnName",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Specifies the name of the column that contains the series to retreive.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "ISeries",
										"id": 2287,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "IndexT"
											},
											{
												"type": "typeParameter",
												"name": "SeriesValueT"
											}
										]
									},
									"implementationOf": {
										"type": "reference",
										"name": "IDataFrame.getSeries",
										"id": 705
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/dataframe.ts",
									"line": 1419,
									"character": 13
								}
							],
							"implementationOf": {
								"type": "reference",
								"name": "IDataFrame.getSeries",
								"id": 704
							}
						},
						{
							"id": 1670,
							"name": "groupBy",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1671,
									"name": "groupBy",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Groups the dataframe according to the selector.",
										"returns": "Returns a series of groups. Each group is a series with values that have been grouped by the 'selector' function.\n"
									},
									"typeParameter": [
										{
											"id": 1672,
											"name": "GroupT",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										}
									],
									"parameters": [
										{
											"id": 1673,
											"name": "selector",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Selector that defines the value to group by.\n"
											},
											"type": {
												"type": "reference",
												"name": "SelectorWithIndexFn",
												"id": 3569,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "ValueT"
													},
													{
														"type": "typeParameter",
														"name": "GroupT"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "ISeries",
										"id": 2287,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "number"
											},
											{
												"type": "reference",
												"name": "IDataFrame",
												"id": 683,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "IndexT"
													},
													{
														"type": "typeParameter",
														"name": "ValueT"
													}
												]
											}
										]
									},
									"implementationOf": {
										"type": "reference",
										"name": "IDataFrame.groupBy",
										"id": 901
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/dataframe.ts",
									"line": 2876,
									"character": 11
								}
							],
							"implementationOf": {
								"type": "reference",
								"name": "IDataFrame.groupBy",
								"id": 900
							}
						},
						{
							"id": 1674,
							"name": "groupSequentialBy",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1675,
									"name": "groupSequentialBy",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Group sequential values into a series of windows.",
										"returns": "Returns a series of groups. Each group is a dataframe with values that have been grouped by the 'selector' function.\n"
									},
									"typeParameter": [
										{
											"id": 1676,
											"name": "GroupT",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										}
									],
									"parameters": [
										{
											"id": 1677,
											"name": "selector",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"text": "Optional selector that defines the value to group by.\n"
											},
											"type": {
												"type": "reference",
												"name": "SelectorFn",
												"id": 66,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "ValueT"
													},
													{
														"type": "typeParameter",
														"name": "GroupT"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "ISeries",
										"id": 2287,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "number"
											},
											{
												"type": "reference",
												"name": "IDataFrame",
												"id": 683,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "IndexT"
													},
													{
														"type": "typeParameter",
														"name": "ValueT"
													}
												]
											}
										]
									},
									"implementationOf": {
										"type": "reference",
										"name": "IDataFrame.groupSequentialBy",
										"id": 905
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/dataframe.ts",
									"line": 2914,
									"character": 21
								}
							],
							"implementationOf": {
								"type": "reference",
								"name": "IDataFrame.groupSequentialBy",
								"id": 904
							}
						},
						{
							"id": 1478,
							"name": "hasSeries",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1479,
									"name": "hasSeries",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Returns true if the column with the requested name exists in the dataframe."
									},
									"parameters": [
										{
											"id": 1480,
											"name": "columnName",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Name of the column to check.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									},
									"implementationOf": {
										"type": "reference",
										"name": "IDataFrame.hasSeries",
										"id": 709
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/dataframe.ts",
									"line": 1437,
									"character": 13
								}
							],
							"implementationOf": {
								"type": "reference",
								"name": "IDataFrame.hasSeries",
								"id": 708
							}
						},
						{
							"id": 1606,
							"name": "head",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1607,
									"name": "head",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Get X values from the start of the dataframe.\nPass in a negative value to get all items at the head except X values at the tail.",
										"returns": "Returns a new dataframe that has only the specified number of values taken from the start of the input sequence.\n"
									},
									"parameters": [
										{
											"id": 1608,
											"name": "numValues",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Number of values to take.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "IDataFrame",
										"id": 683,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "IndexT"
											},
											{
												"type": "typeParameter",
												"name": "ValueT"
											}
										]
									},
									"implementationOf": {
										"type": "reference",
										"name": "IDataFrame.head",
										"id": 837
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/dataframe.ts",
									"line": 2405,
									"character": 8
								}
							],
							"implementationOf": {
								"type": "reference",
								"name": "IDataFrame.head",
								"id": 836
							}
						},
						{
							"id": 1556,
							"name": "inflateSeries",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1557,
									"name": "inflateSeries",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Inflate a named series in the data-frame to 1 or more new series in the new dataframe.",
										"returns": "Returns a new dataframe with a column inflated to 1 or more new columns.\n"
									},
									"typeParameter": [
										{
											"id": 1558,
											"name": "NewValueT",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										}
									],
									"parameters": [
										{
											"id": 1559,
											"name": "columnName",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Name or index of the column to retreive."
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 1560,
											"name": "selector",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "reference",
												"name": "SelectorWithIndexFn",
												"id": 3569,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "IndexT"
													},
													{
														"type": "intrinsic",
														"name": "any"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "IDataFrame",
										"id": 683,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "IndexT"
											},
											{
												"type": "typeParameter",
												"name": "ValueT"
											}
										]
									},
									"implementationOf": {
										"type": "reference",
										"name": "IDataFrame.inflateSeries",
										"id": 787
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/dataframe.ts",
									"line": 2082,
									"character": 17
								}
							],
							"implementationOf": {
								"type": "reference",
								"name": "IDataFrame.inflateSeries",
								"id": 786
							}
						},
						{
							"id": 1795,
							"name": "insertPair",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1796,
									"name": "insertPair",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Insert a pair at the start of the dataframe.",
										"returns": "Returns a new dataframe with the specified pair inserted.\n"
									},
									"parameters": [
										{
											"id": 1797,
											"name": "pair",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The pair to insert.\n"
											},
											"type": {
												"type": "tuple",
												"elements": [
													{
														"type": "typeParameter",
														"name": "IndexT"
													},
													{
														"type": "typeParameter",
														"name": "ValueT"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "IDataFrame",
										"id": 683,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "IndexT"
											},
											{
												"type": "typeParameter",
												"name": "ValueT"
											}
										]
									},
									"implementationOf": {
										"type": "reference",
										"name": "IDataFrame.insertPair",
										"id": 1017
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/dataframe.ts",
									"line": 3385,
									"character": 14
								}
							],
							"implementationOf": {
								"type": "reference",
								"name": "IDataFrame.insertPair",
								"id": 1016
							}
						},
						{
							"id": 1734,
							"name": "intersection",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1735,
									"name": "intersection",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Returns the intersection of values between two dataframes.",
										"returns": "Returns the intersection of two series.\n"
									},
									"typeParameter": [
										{
											"id": 1736,
											"name": "InnerIndexT",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										},
										{
											"id": 1737,
											"name": "InnerValueT",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										},
										{
											"id": 1738,
											"name": "KeyT",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										}
									],
									"parameters": [
										{
											"id": 1739,
											"name": "inner",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The other dataframe to combine."
											},
											"type": {
												"type": "reference",
												"name": "IDataFrame",
												"id": 683,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "InnerIndexT"
													},
													{
														"type": "typeParameter",
														"name": "InnerValueT"
													}
												]
											}
										},
										{
											"id": 1740,
											"name": "outerSelector",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "reference",
												"name": "SelectorFn",
												"id": 66,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "ValueT"
													},
													{
														"type": "typeParameter",
														"name": "KeyT"
													}
												]
											}
										},
										{
											"id": 1741,
											"name": "innerSelector",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "reference",
												"name": "SelectorFn",
												"id": 66,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "InnerValueT"
													},
													{
														"type": "typeParameter",
														"name": "KeyT"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "IDataFrame",
										"id": 683,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "IndexT"
											},
											{
												"type": "typeParameter",
												"name": "ValueT"
											}
										]
									},
									"implementationOf": {
										"type": "reference",
										"name": "IDataFrame.intersection",
										"id": 956
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/dataframe.ts",
									"line": 3086,
									"character": 16
								}
							],
							"implementationOf": {
								"type": "reference",
								"name": "IDataFrame.intersection",
								"id": 955
							}
						},
						{
							"id": 1750,
							"name": "join",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1751,
									"name": "join",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Correlates the elements of two dataframes on matching keys.",
										"returns": "Returns the joined dataframe.\n"
									},
									"typeParameter": [
										{
											"id": 1752,
											"name": "KeyT",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										},
										{
											"id": 1753,
											"name": "InnerIndexT",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										},
										{
											"id": 1754,
											"name": "InnerValueT",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										},
										{
											"id": 1755,
											"name": "ResultValueT",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										}
									],
									"parameters": [
										{
											"id": 1756,
											"name": "inner",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The inner dataframe to join."
											},
											"type": {
												"type": "reference",
												"name": "IDataFrame",
												"id": 683,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "InnerIndexT"
													},
													{
														"type": "typeParameter",
														"name": "InnerValueT"
													}
												]
											}
										},
										{
											"id": 1757,
											"name": "outerKeySelector",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Selector that chooses the join key from the outer sequence."
											},
											"type": {
												"type": "reference",
												"name": "SelectorFn",
												"id": 66,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "ValueT"
													},
													{
														"type": "typeParameter",
														"name": "KeyT"
													}
												]
											}
										},
										{
											"id": 1758,
											"name": "innerKeySelector",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Selector that chooses the join key from the inner sequence."
											},
											"type": {
												"type": "reference",
												"name": "SelectorFn",
												"id": 66,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "InnerValueT"
													},
													{
														"type": "typeParameter",
														"name": "KeyT"
													}
												]
											}
										},
										{
											"id": 1759,
											"name": "resultSelector",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Selector that defines how to merge outer and inner values.\n"
											},
											"type": {
												"type": "reference",
												"name": "JoinFn",
												"id": 3631,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "ValueT"
													},
													{
														"type": "typeParameter",
														"name": "InnerValueT"
													},
													{
														"type": "typeParameter",
														"name": "ResultValueT"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "IDataFrame",
										"id": 683,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "number"
											},
											{
												"type": "typeParameter",
												"name": "ResultValueT"
											}
										]
									},
									"implementationOf": {
										"type": "reference",
										"name": "IDataFrame.join",
										"id": 972
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/dataframe.ts",
									"line": 3164,
									"character": 8
								}
							],
							"implementationOf": {
								"type": "reference",
								"name": "IDataFrame.join",
								"id": 971
							}
						},
						{
							"id": 1760,
							"name": "joinOuter",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1761,
									"name": "joinOuter",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Performs an outer join on two series. Correlates the elements based on matching keys.\nIncludes elements from both series that have no correlation in the other series.",
										"returns": "Returns the joined series.\n"
									},
									"typeParameter": [
										{
											"id": 1762,
											"name": "KeyT",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										},
										{
											"id": 1763,
											"name": "InnerIndexT",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										},
										{
											"id": 1764,
											"name": "InnerValueT",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										},
										{
											"id": 1765,
											"name": "ResultValueT",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										}
									],
									"parameters": [
										{
											"id": 1766,
											"name": "inner",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The inner series to join."
											},
											"type": {
												"type": "reference",
												"name": "IDataFrame",
												"id": 683,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "InnerIndexT"
													},
													{
														"type": "typeParameter",
														"name": "InnerValueT"
													}
												]
											}
										},
										{
											"id": 1767,
											"name": "outerKeySelector",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Selector that chooses the join key from the outer sequence."
											},
											"type": {
												"type": "reference",
												"name": "SelectorFn",
												"id": 66,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "ValueT"
													},
													{
														"type": "typeParameter",
														"name": "KeyT"
													}
												]
											}
										},
										{
											"id": 1768,
											"name": "innerKeySelector",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Selector that chooses the join key from the inner sequence."
											},
											"type": {
												"type": "reference",
												"name": "SelectorFn",
												"id": 66,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "InnerValueT"
													},
													{
														"type": "typeParameter",
														"name": "KeyT"
													}
												]
											}
										},
										{
											"id": 1769,
											"name": "resultSelector",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Selector that defines how to merge outer and inner values.\n\nImplementation from here:\n\n\thttp://blogs.geniuscode.net/RyanDHatch/?p=116\n"
											},
											"type": {
												"type": "reference",
												"name": "JoinFn",
												"id": 3631,
												"typeArguments": [
													{
														"type": "union",
														"types": [
															{
																"type": "typeParameter",
																"name": "ValueT"
															},
															{
																"type": "intrinsic",
																"name": "null"
															}
														]
													},
													{
														"type": "union",
														"types": [
															{
																"type": "typeParameter",
																"name": "InnerValueT"
															},
															{
																"type": "intrinsic",
																"name": "null"
															}
														]
													},
													{
														"type": "typeParameter",
														"name": "ResultValueT"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "IDataFrame",
										"id": 683,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "number"
											},
											{
												"type": "typeParameter",
												"name": "ResultValueT"
											}
										]
									},
									"implementationOf": {
										"type": "reference",
										"name": "IDataFrame.joinOuter",
										"id": 982
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/dataframe.ts",
									"line": 3221,
									"character": 13
								}
							],
							"implementationOf": {
								"type": "reference",
								"name": "IDataFrame.joinOuter",
								"id": 981
							}
						},
						{
							"id": 1770,
							"name": "joinOuterLeft",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1771,
									"name": "joinOuterLeft",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Performs a left outer join on two dataframes. Correlates the elements based on matching keys.\nIncludes left elements that have no correlation.",
										"returns": "Returns the joined dataframes.\n"
									},
									"typeParameter": [
										{
											"id": 1772,
											"name": "KeyT",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										},
										{
											"id": 1773,
											"name": "InnerIndexT",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										},
										{
											"id": 1774,
											"name": "InnerValueT",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										},
										{
											"id": 1775,
											"name": "ResultValueT",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										}
									],
									"parameters": [
										{
											"id": 1776,
											"name": "inner",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The inner dataframe to join."
											},
											"type": {
												"type": "reference",
												"name": "IDataFrame",
												"id": 683,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "InnerIndexT"
													},
													{
														"type": "typeParameter",
														"name": "InnerValueT"
													}
												]
											}
										},
										{
											"id": 1777,
											"name": "outerKeySelector",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Selector that chooses the join key from the outer sequence."
											},
											"type": {
												"type": "reference",
												"name": "SelectorFn",
												"id": 66,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "ValueT"
													},
													{
														"type": "typeParameter",
														"name": "KeyT"
													}
												]
											}
										},
										{
											"id": 1778,
											"name": "innerKeySelector",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Selector that chooses the join key from the inner sequence."
											},
											"type": {
												"type": "reference",
												"name": "SelectorFn",
												"id": 66,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "InnerValueT"
													},
													{
														"type": "typeParameter",
														"name": "KeyT"
													}
												]
											}
										},
										{
											"id": 1779,
											"name": "resultSelector",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Selector that defines how to merge outer and inner values.\n\nImplementation from here:\n\n\thttp://blogs.geniuscode.net/RyanDHatch/?p=116\n"
											},
											"type": {
												"type": "reference",
												"name": "JoinFn",
												"id": 3631,
												"typeArguments": [
													{
														"type": "union",
														"types": [
															{
																"type": "typeParameter",
																"name": "ValueT"
															},
															{
																"type": "intrinsic",
																"name": "null"
															}
														]
													},
													{
														"type": "union",
														"types": [
															{
																"type": "typeParameter",
																"name": "InnerValueT"
															},
															{
																"type": "intrinsic",
																"name": "null"
															}
														]
													},
													{
														"type": "typeParameter",
														"name": "ResultValueT"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "IDataFrame",
										"id": 683,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "number"
											},
											{
												"type": "typeParameter",
												"name": "ResultValueT"
											}
										]
									},
									"implementationOf": {
										"type": "reference",
										"name": "IDataFrame.joinOuterLeft",
										"id": 992
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/dataframe.ts",
									"line": 3268,
									"character": 17
								}
							],
							"implementationOf": {
								"type": "reference",
								"name": "IDataFrame.joinOuterLeft",
								"id": 991
							}
						},
						{
							"id": 1780,
							"name": "joinOuterRight",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1781,
									"name": "joinOuterRight",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Performs a right outer join on two dataframes. Correlates the elements based on matching keys.\nIncludes right elements that have no correlation.",
										"returns": "Returns the joined dataframes.\n"
									},
									"typeParameter": [
										{
											"id": 1782,
											"name": "KeyT",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										},
										{
											"id": 1783,
											"name": "InnerIndexT",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										},
										{
											"id": 1784,
											"name": "InnerValueT",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										},
										{
											"id": 1785,
											"name": "ResultValueT",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										}
									],
									"parameters": [
										{
											"id": 1786,
											"name": "inner",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The inner dataframe to join."
											},
											"type": {
												"type": "reference",
												"name": "IDataFrame",
												"id": 683,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "InnerIndexT"
													},
													{
														"type": "typeParameter",
														"name": "InnerValueT"
													}
												]
											}
										},
										{
											"id": 1787,
											"name": "outerKeySelector",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Selector that chooses the join key from the outer sequence."
											},
											"type": {
												"type": "reference",
												"name": "SelectorFn",
												"id": 66,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "ValueT"
													},
													{
														"type": "typeParameter",
														"name": "KeyT"
													}
												]
											}
										},
										{
											"id": 1788,
											"name": "innerKeySelector",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Selector that chooses the join key from the inner sequence."
											},
											"type": {
												"type": "reference",
												"name": "SelectorFn",
												"id": 66,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "InnerValueT"
													},
													{
														"type": "typeParameter",
														"name": "KeyT"
													}
												]
											}
										},
										{
											"id": 1789,
											"name": "resultSelector",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Selector that defines how to merge outer and inner values.\n\nImplementation from here:\n\n\thttp://blogs.geniuscode.net/RyanDHatch/?p=116\n"
											},
											"type": {
												"type": "reference",
												"name": "JoinFn",
												"id": 3631,
												"typeArguments": [
													{
														"type": "union",
														"types": [
															{
																"type": "typeParameter",
																"name": "ValueT"
															},
															{
																"type": "intrinsic",
																"name": "null"
															}
														]
													},
													{
														"type": "union",
														"types": [
															{
																"type": "typeParameter",
																"name": "InnerValueT"
															},
															{
																"type": "intrinsic",
																"name": "null"
															}
														]
													},
													{
														"type": "typeParameter",
														"name": "ResultValueT"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "IDataFrame",
										"id": 683,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "number"
											},
											{
												"type": "typeParameter",
												"name": "ResultValueT"
											}
										]
									},
									"implementationOf": {
										"type": "reference",
										"name": "IDataFrame.joinOuterRight",
										"id": 1002
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/dataframe.ts",
									"line": 3309,
									"character": 18
								}
							],
							"implementationOf": {
								"type": "reference",
								"name": "IDataFrame.joinOuterRight",
								"id": 1001
							}
						},
						{
							"id": 1601,
							"name": "last",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1602,
									"name": "last",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Get the last value of the series.",
										"returns": "Returns the last value of the series.\n"
									},
									"type": {
										"type": "typeParameter",
										"name": "ValueT"
									},
									"implementationOf": {
										"type": "reference",
										"name": "IDataFrame.last",
										"id": 832
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/dataframe.ts",
									"line": 2355,
									"character": 8
								}
							],
							"implementationOf": {
								"type": "reference",
								"name": "IDataFrame.last",
								"id": 831
							}
						},
						{
							"id": 1452,
							"name": "lazyInit",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPrivate": true,
								"isExported": true
							},
							"signatures": [
								{
									"id": 1453,
									"name": "lazyInit",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/dataframe.ts",
									"line": 1295,
									"character": 20
								}
							]
						},
						{
							"id": 1624,
							"name": "none",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1625,
									"name": "none",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Determine if the predicate returns truthy for none of the values in the series.\nReturns true for an empty series.\nReturns true if the predicate always returns falsy.\nOtherwise returns false.\nIf no predicate is specified the value itself is checked.",
										"returns": "Returns true if the predicate has returned truthy for no values in the series, otherwise returns false.\n"
									},
									"parameters": [
										{
											"id": 1626,
											"name": "predicate",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "reference",
												"name": "PredicateFn",
												"id": 152,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "ValueT"
													}
												]
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									},
									"implementationOf": {
										"type": "reference",
										"name": "IDataFrame.none",
										"id": 855
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/dataframe.ts",
									"line": 2548,
									"character": 8
								}
							],
							"implementationOf": {
								"type": "reference",
								"name": "IDataFrame.none",
								"id": 854
							}
						},
						{
							"id": 1721,
							"name": "orderBy",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1722,
									"name": "orderBy",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Sorts the dataframe by a value defined by the selector (ascending).",
										"returns": "Returns a new ordered dataframe that has been sorted by the value returned by the selector.\n"
									},
									"typeParameter": [
										{
											"id": 1723,
											"name": "SortT",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										}
									],
									"parameters": [
										{
											"id": 1724,
											"name": "selector",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Selects the value to sort by.\n"
											},
											"type": {
												"type": "reference",
												"name": "SelectorWithIndexFn",
												"id": 3569,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "ValueT"
													},
													{
														"type": "typeParameter",
														"name": "SortT"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "IOrderedDataFrame",
										"id": 1043,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "IndexT"
											},
											{
												"type": "typeParameter",
												"name": "ValueT"
											},
											{
												"type": "typeParameter",
												"name": "SortT"
											}
										]
									},
									"implementationOf": {
										"type": "reference",
										"name": "IDataFrame.orderBy",
										"id": 943
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/dataframe.ts",
									"line": 3040,
									"character": 11
								}
							],
							"implementationOf": {
								"type": "reference",
								"name": "IDataFrame.orderBy",
								"id": 942
							}
						},
						{
							"id": 1725,
							"name": "orderByDescending",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1726,
									"name": "orderByDescending",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Sorts the dataframe by a value defined by the selector (descending).",
										"returns": "Returns a new ordered dataframe that has been sorted by the value returned by the selector.\n"
									},
									"typeParameter": [
										{
											"id": 1727,
											"name": "SortT",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										}
									],
									"parameters": [
										{
											"id": 1728,
											"name": "selector",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Selects the value to sort by.\n"
											},
											"type": {
												"type": "reference",
												"name": "SelectorWithIndexFn",
												"id": 3569,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "ValueT"
													},
													{
														"type": "typeParameter",
														"name": "SortT"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "IOrderedDataFrame",
										"id": 1043,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "IndexT"
											},
											{
												"type": "typeParameter",
												"name": "ValueT"
											},
											{
												"type": "typeParameter",
												"name": "SortT"
											}
										]
									},
									"implementationOf": {
										"type": "reference",
										"name": "IDataFrame.orderByDescending",
										"id": 947
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/dataframe.ts",
									"line": 3052,
									"character": 21
								}
							],
							"implementationOf": {
								"type": "reference",
								"name": "IDataFrame.orderByDescending",
								"id": 946
							}
						},
						{
							"id": 1651,
							"name": "parseDates",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1652,
									"name": "parseDates",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Parse a column with string values to a column with date values.",
										"returns": "Returns a new dataframe with a particular named column parsed as dates.\n"
									},
									"parameters": [
										{
											"id": 1653,
											"name": "columnNameOrNames",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Specifies the column name or array of column names to parse."
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "array",
														"elementType": {
															"type": "intrinsic",
															"name": "string"
														}
													}
												]
											}
										},
										{
											"id": 1654,
											"name": "formatString",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "undefined"
													},
													{
														"type": "intrinsic",
														"name": "string"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "IDataFrame",
										"id": 683,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "IndexT"
											},
											{
												"type": "typeParameter",
												"name": "ValueT"
											}
										]
									},
									"implementationOf": {
										"type": "reference",
										"name": "IDataFrame.parseDates",
										"id": 882
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/dataframe.ts",
									"line": 2743,
									"character": 14
								}
							],
							"implementationOf": {
								"type": "reference",
								"name": "IDataFrame.parseDates",
								"id": 881
							}
						},
						{
							"id": 1648,
							"name": "parseFloats",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1649,
									"name": "parseFloats",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Parse a column with string values to a column with float values.",
										"returns": "Returns a new dataframe with a particular named column parsed as floats.\n"
									},
									"parameters": [
										{
											"id": 1650,
											"name": "columnNameOrNames",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Specifies the column name or array of column names to parse.\n"
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "array",
														"elementType": {
															"type": "intrinsic",
															"name": "string"
														}
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "IDataFrame",
										"id": 683,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "IndexT"
											},
											{
												"type": "typeParameter",
												"name": "ValueT"
											}
										]
									},
									"implementationOf": {
										"type": "reference",
										"name": "IDataFrame.parseFloats",
										"id": 879
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/dataframe.ts",
									"line": 2720,
									"character": 15
								}
							],
							"implementationOf": {
								"type": "reference",
								"name": "IDataFrame.parseFloats",
								"id": 878
							}
						},
						{
							"id": 1645,
							"name": "parseInts",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1646,
									"name": "parseInts",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Parse a column with string values to a column with int values.",
										"returns": "Returns a new dataframe with a particular named column parsed as ints.\n"
									},
									"parameters": [
										{
											"id": 1647,
											"name": "columnNameOrNames",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Specifies the column name or array of column names to parse.\n"
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "array",
														"elementType": {
															"type": "intrinsic",
															"name": "string"
														}
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "IDataFrame",
										"id": 683,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "IndexT"
											},
											{
												"type": "typeParameter",
												"name": "ValueT"
											}
										]
									},
									"implementationOf": {
										"type": "reference",
										"name": "IDataFrame.parseInts",
										"id": 876
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/dataframe.ts",
									"line": 2698,
									"character": 13
								}
							],
							"implementationOf": {
								"type": "reference",
								"name": "IDataFrame.parseInts",
								"id": 875
							}
						},
						{
							"id": 1790,
							"name": "pivot",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1791,
									"name": "pivot",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Reshape (or pivot) a table based on column values.",
										"returns": "Returns a new dataframe that has been pivoted based on a particular column's values.\n"
									},
									"typeParameter": [
										{
											"id": 1792,
											"name": "NewValueT",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										}
									],
									"parameters": [
										{
											"id": 1793,
											"name": "column",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Column name whose values make the new DataFrame's columns."
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 1794,
											"name": "value",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Column name whose values populate the new DataFrame's values.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "IDataFrame",
										"id": 683,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "IndexT"
											},
											{
												"type": "typeParameter",
												"name": "NewValueT"
											}
										]
									},
									"implementationOf": {
										"type": "reference",
										"name": "IDataFrame.pivot",
										"id": 1012
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/dataframe.ts",
									"line": 3342,
									"character": 9
								}
							],
							"implementationOf": {
								"type": "reference",
								"name": "IDataFrame.pivot",
								"id": 1011
							}
						},
						{
							"id": 1513,
							"name": "renameSeries",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1514,
									"name": "renameSeries",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Create a new data-frame with renamed series.",
										"returns": "Returns a new dataframe with columns renamed.\n"
									},
									"typeParameter": [
										{
											"id": 1515,
											"name": "NewValueT",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										}
									],
									"parameters": [
										{
											"id": 1516,
											"name": "newColumnNames",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "A column rename spec - maps existing column names to new column names.\n"
											},
											"type": {
												"type": "reference",
												"name": "IColumnRenameSpec",
												"id": 666
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "IDataFrame",
										"id": 683,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "IndexT"
											},
											{
												"type": "typeParameter",
												"name": "NewValueT"
											}
										]
									},
									"implementationOf": {
										"type": "reference",
										"name": "IDataFrame.renameSeries",
										"id": 744
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/dataframe.ts",
									"line": 1806,
									"character": 16
								}
							],
							"implementationOf": {
								"type": "reference",
								"name": "IDataFrame.renameSeries",
								"id": 743
							}
						},
						{
							"id": 1503,
							"name": "reorderSeries",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1504,
									"name": "reorderSeries",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Create a new data frame with columns reordered.\nNew column names create new columns (with undefined values), omitting existing column names causes those columns to be dropped.",
										"returns": "Returns a new dataframe with columns remapped according to the specified column layout.\n"
									},
									"typeParameter": [
										{
											"id": 1505,
											"name": "NewValueT",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										}
									],
									"parameters": [
										{
											"id": 1506,
											"name": "columnNames",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The new order for columns.\n"
											},
											"type": {
												"type": "array",
												"elementType": {
													"type": "intrinsic",
													"name": "string"
												}
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "IDataFrame",
										"id": 683,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "IndexT"
											},
											{
												"type": "typeParameter",
												"name": "NewValueT"
											}
										]
									},
									"implementationOf": {
										"type": "reference",
										"name": "IDataFrame.reorderSeries",
										"id": 734
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/dataframe.ts",
									"line": 1671,
									"character": 17
								}
							],
							"implementationOf": {
								"type": "reference",
								"name": "IDataFrame.reorderSeries",
								"id": 733
							}
						},
						{
							"id": 1472,
							"name": "resetIndex",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1473,
									"name": "resetIndex",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Resets the index of the dataframe back to the default zero-based sequential integer index.",
										"returns": "Returns a new dataframe with the index reset to the default zero-based index.\n"
									},
									"type": {
										"type": "reference",
										"name": "IDataFrame",
										"id": 683,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "number"
											},
											{
												"type": "typeParameter",
												"name": "ValueT"
											}
										]
									},
									"implementationOf": {
										"type": "reference",
										"name": "IDataFrame.resetIndex",
										"id": 703
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/dataframe.ts",
									"line": 1403,
									"character": 14
								}
							],
							"implementationOf": {
								"type": "reference",
								"name": "IDataFrame.resetIndex",
								"id": 702
							}
						},
						{
							"id": 1664,
							"name": "reverse",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1665,
									"name": "reverse",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Reverse the dataframe.",
										"returns": "Returns a new dataframe that is the reverse of the input.\n"
									},
									"type": {
										"type": "reference",
										"name": "IDataFrame",
										"id": 683,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "IndexT"
											},
											{
												"type": "typeParameter",
												"name": "ValueT"
											}
										]
									},
									"implementationOf": {
										"type": "reference",
										"name": "IDataFrame.reverse",
										"id": 895
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/dataframe.ts",
									"line": 2839,
									"character": 11
								}
							],
							"implementationOf": {
								"type": "reference",
								"name": "IDataFrame.reverse",
								"id": 894
							}
						},
						{
							"id": 1564,
							"name": "rollingWindow",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1565,
									"name": "rollingWindow",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Segment a dataframe into 'rolling windows'. Returns a new series. Each value in the new series contains a 'window' (or segment) of the original series.",
										"returns": "Returns a new series, each value of which is a 'window' (or segment) of the original series.\n"
									},
									"parameters": [
										{
											"id": 1566,
											"name": "period",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The number of values in the window.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "ISeries",
										"id": 2287,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "number"
											},
											{
												"type": "reference",
												"name": "IDataFrame",
												"id": 683,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "IndexT"
													},
													{
														"type": "typeParameter",
														"name": "ValueT"
													}
												]
											}
										]
									},
									"implementationOf": {
										"type": "reference",
										"name": "IDataFrame.rollingWindow",
										"id": 795
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/dataframe.ts",
									"line": 2123,
									"character": 17
								}
							],
							"implementationOf": {
								"type": "reference",
								"name": "IDataFrame.rollingWindow",
								"id": 794
							}
						},
						{
							"id": 1536,
							"name": "select",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1537,
									"name": "select",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Generate a new dataframe based by calling the selector function on each value.",
										"returns": "Returns a new dataframe that has been transformed by the selector function.\n"
									},
									"typeParameter": [
										{
											"id": 1538,
											"name": "ToT",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										}
									],
									"parameters": [
										{
											"id": 1539,
											"name": "selector",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Selector function that transforms each value to create a new dataframe.\n"
											},
											"type": {
												"type": "reference",
												"name": "SelectorWithIndexFn",
												"id": 3569,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "ValueT"
													},
													{
														"type": "typeParameter",
														"name": "ToT"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "IDataFrame",
										"id": 683,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "IndexT"
											},
											{
												"type": "typeParameter",
												"name": "ToT"
											}
										]
									},
									"implementationOf": {
										"type": "reference",
										"name": "IDataFrame.select",
										"id": 767
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/dataframe.ts",
									"line": 1931,
									"character": 10
								}
							],
							"implementationOf": {
								"type": "reference",
								"name": "IDataFrame.select",
								"id": 766
							}
						},
						{
							"id": 1540,
							"name": "selectMany",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1541,
									"name": "selectMany",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Generate a new dataframe based on the results of the selector function.",
										"returns": "Returns a new dataframe with values that have been produced by the selector function.\n"
									},
									"typeParameter": [
										{
											"id": 1542,
											"name": "ToT",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										}
									],
									"parameters": [
										{
											"id": 1543,
											"name": "selector",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Selector function that transforms each value into a list of values.\n"
											},
											"type": {
												"type": "reference",
												"name": "SelectorWithIndexFn",
												"id": 3569,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "ValueT"
													},
													{
														"type": "reference",
														"name": "Iterable",
														"typeArguments": [
															{
																"type": "typeParameter",
																"name": "ToT"
															}
														]
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "IDataFrame",
										"id": 683,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "IndexT"
											},
											{
												"type": "typeParameter",
												"name": "ToT"
											}
										]
									},
									"implementationOf": {
										"type": "reference",
										"name": "IDataFrame.selectMany",
										"id": 771
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/dataframe.ts",
									"line": 1950,
									"character": 14
								}
							],
							"implementationOf": {
								"type": "reference",
								"name": "IDataFrame.selectMany",
								"id": 770
							}
						},
						{
							"id": 1570,
							"name": "sequentialDistinct",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1571,
									"name": "sequentialDistinct",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Group sequential duplicate values into a series of windows.",
										"returns": "Returns a series of groups. Each group is itself a series.\n"
									},
									"typeParameter": [
										{
											"id": 1572,
											"name": "ToT",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										}
									],
									"parameters": [
										{
											"id": 1573,
											"name": "selector",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "reference",
												"name": "SelectorFn",
												"id": 66,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "ValueT"
													},
													{
														"type": "typeParameter",
														"name": "ToT"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "IDataFrame",
										"id": 683,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "IndexT"
											},
											{
												"type": "typeParameter",
												"name": "ValueT"
											}
										]
									},
									"implementationOf": {
										"type": "reference",
										"name": "IDataFrame.sequentialDistinct",
										"id": 801
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/dataframe.ts",
									"line": 2161,
									"character": 22
								}
							],
							"implementationOf": {
								"type": "reference",
								"name": "IDataFrame.sequentialDistinct",
								"id": 800
							}
						},
						{
							"id": 1464,
							"name": "setIndex",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1465,
									"name": "setIndex",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Set a named column as the index of the data-frame.",
										"returns": "Returns a new dataframe with the values of a particular named column as the index.\n"
									},
									"typeParameter": [
										{
											"id": 1466,
											"name": "NewIndexT",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										}
									],
									"parameters": [
										{
											"id": 1467,
											"name": "columnName",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Name or index of the column to set as the index.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "IDataFrame",
										"id": 683,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "NewIndexT"
											},
											{
												"type": "typeParameter",
												"name": "ValueT"
											}
										]
									},
									"implementationOf": {
										"type": "reference",
										"name": "IDataFrame.setIndex",
										"id": 695
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/dataframe.ts",
									"line": 1359,
									"character": 12
								}
							],
							"implementationOf": {
								"type": "reference",
								"name": "IDataFrame.setIndex",
								"id": 694
							}
						},
						{
							"id": 1579,
							"name": "skip",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1580,
									"name": "skip",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Skip a number of values in the dataframe.",
										"returns": "Returns a new dataframe or dataframe with the specified number of values skipped.\n"
									},
									"parameters": [
										{
											"id": 1581,
											"name": "numValues",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Number of values to skip."
											},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "IDataFrame",
										"id": 683,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "IndexT"
											},
											{
												"type": "typeParameter",
												"name": "ValueT"
											}
										]
									},
									"implementationOf": {
										"type": "reference",
										"name": "IDataFrame.skip",
										"id": 810
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/dataframe.ts",
									"line": 2223,
									"character": 8
								}
							],
							"implementationOf": {
								"type": "reference",
								"name": "IDataFrame.skip",
								"id": 809
							}
						},
						{
							"id": 1585,
							"name": "skipUntil",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1586,
									"name": "skipUntil",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Skips values in the series until a condition is met.",
										"returns": "Returns a new series with all initial sequential values removed that don't match the predicate.\n"
									},
									"parameters": [
										{
											"id": 1587,
											"name": "predicate",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Return true to indicate the condition met.\n"
											},
											"type": {
												"type": "reference",
												"name": "PredicateFn",
												"id": 152,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "ValueT"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "IDataFrame",
										"id": 683,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "IndexT"
											},
											{
												"type": "typeParameter",
												"name": "ValueT"
											}
										]
									},
									"implementationOf": {
										"type": "reference",
										"name": "IDataFrame.skipUntil",
										"id": 816
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/dataframe.ts",
									"line": 2262,
									"character": 13
								}
							],
							"implementationOf": {
								"type": "reference",
								"name": "IDataFrame.skipUntil",
								"id": 815
							}
						},
						{
							"id": 1582,
							"name": "skipWhile",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1583,
									"name": "skipWhile",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Skips values in the series while a condition is met.",
										"returns": "Returns a new series with all initial sequential values removed that match the predicate.\n"
									},
									"parameters": [
										{
											"id": 1584,
											"name": "predicate",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Return true to indicate the condition met.\n"
											},
											"type": {
												"type": "reference",
												"name": "PredicateFn",
												"id": 152,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "ValueT"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "IDataFrame",
										"id": 683,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "IndexT"
											},
											{
												"type": "typeParameter",
												"name": "ValueT"
											}
										]
									},
									"implementationOf": {
										"type": "reference",
										"name": "IDataFrame.skipWhile",
										"id": 813
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/dataframe.ts",
									"line": 2242,
									"character": 13
								}
							],
							"implementationOf": {
								"type": "reference",
								"name": "IDataFrame.skipWhile",
								"id": 812
							}
						},
						{
							"id": 1627,
							"name": "startAt",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1628,
									"name": "startAt",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Get a new series containing all values starting at and after the specified index value.",
										"returns": "Returns a new series containing all values starting at and after the specified index value.\n"
									},
									"parameters": [
										{
											"id": 1629,
											"name": "indexValue",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The index value to search for before starting the new series.\n"
											},
											"type": {
												"type": "typeParameter",
												"name": "IndexT"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "IDataFrame",
										"id": 683,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "IndexT"
											},
											{
												"type": "typeParameter",
												"name": "ValueT"
											}
										]
									},
									"implementationOf": {
										"type": "reference",
										"name": "IDataFrame.startAt",
										"id": 858
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/dataframe.ts",
									"line": 2581,
									"character": 11
								}
							],
							"implementationOf": {
								"type": "reference",
								"name": "IDataFrame.startAt",
								"id": 857
							}
						},
						{
							"id": 1495,
							"name": "subset",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1496,
									"name": "subset",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Create a new data-frame from a subset of columns.",
										"returns": "Returns a dataframe with a subset of columns from the input dataframe.\n"
									},
									"typeParameter": [
										{
											"id": 1497,
											"name": "NewValueT",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										}
									],
									"parameters": [
										{
											"id": 1498,
											"name": "columnNames",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Array of column names to include in the new data-frame.\n"
											},
											"type": {
												"type": "array",
												"elementType": {
													"type": "intrinsic",
													"name": "string"
												}
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "IDataFrame",
										"id": 683,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "IndexT"
											},
											{
												"type": "typeParameter",
												"name": "NewValueT"
											}
										]
									},
									"implementationOf": {
										"type": "reference",
										"name": "IDataFrame.subset",
										"id": 726
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/dataframe.ts",
									"line": 1591,
									"character": 10
								}
							],
							"implementationOf": {
								"type": "reference",
								"name": "IDataFrame.subset",
								"id": 725
							}
						},
						{
							"id": 1609,
							"name": "tail",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1610,
									"name": "tail",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Get X values from the end of the dataframe.\nPass in a negative value to get all items at the tail except X values at the head.",
										"returns": "Returns a new dataframe that has only the specified number of values taken from the end of the input sequence.\n"
									},
									"parameters": [
										{
											"id": 1611,
											"name": "numValues",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Number of values to take.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "IDataFrame",
										"id": 683,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "IndexT"
											},
											{
												"type": "typeParameter",
												"name": "ValueT"
											}
										]
									},
									"implementationOf": {
										"type": "reference",
										"name": "IDataFrame.tail",
										"id": 840
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/dataframe.ts",
									"line": 2425,
									"character": 8
								}
							],
							"implementationOf": {
								"type": "reference",
								"name": "IDataFrame.tail",
								"id": 839
							}
						},
						{
							"id": 1588,
							"name": "take",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1589,
									"name": "take",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Take a number of rows in the series.",
										"returns": "Returns a new series with up to the specified number of values included.\n"
									},
									"parameters": [
										{
											"id": 1590,
											"name": "numRows",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Number of rows to take.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "IDataFrame",
										"id": 683,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "IndexT"
											},
											{
												"type": "typeParameter",
												"name": "ValueT"
											}
										]
									},
									"implementationOf": {
										"type": "reference",
										"name": "IDataFrame.take",
										"id": 819
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/dataframe.ts",
									"line": 2275,
									"character": 8
								}
							],
							"implementationOf": {
								"type": "reference",
								"name": "IDataFrame.take",
								"id": 818
							}
						},
						{
							"id": 1594,
							"name": "takeUntil",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1595,
									"name": "takeUntil",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Take values from the series until a condition is met.",
										"returns": "Returns a new series or dataframe that only includes the initial sequential values that have not matched the predicate.\n"
									},
									"parameters": [
										{
											"id": 1596,
											"name": "predicate",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Return true to indicate the condition met.\n"
											},
											"type": {
												"type": "reference",
												"name": "PredicateFn",
												"id": 152,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "ValueT"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "IDataFrame",
										"id": 683,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "IndexT"
											},
											{
												"type": "typeParameter",
												"name": "ValueT"
											}
										]
									},
									"implementationOf": {
										"type": "reference",
										"name": "IDataFrame.takeUntil",
										"id": 825
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/dataframe.ts",
									"line": 2316,
									"character": 13
								}
							],
							"implementationOf": {
								"type": "reference",
								"name": "IDataFrame.takeUntil",
								"id": 824
							}
						},
						{
							"id": 1591,
							"name": "takeWhile",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1592,
									"name": "takeWhile",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Take values from the series while a condition is met.",
										"returns": "Returns a new series that only includes the initial sequential values that have matched the predicate.\n"
									},
									"parameters": [
										{
											"id": 1593,
											"name": "predicate",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Return true to indicate the condition met.\n"
											},
											"type": {
												"type": "reference",
												"name": "PredicateFn",
												"id": 152,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "ValueT"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "IDataFrame",
										"id": 683,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "IndexT"
											},
											{
												"type": "typeParameter",
												"name": "ValueT"
											}
										]
									},
									"implementationOf": {
										"type": "reference",
										"name": "IDataFrame.takeWhile",
										"id": 822
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/dataframe.ts",
									"line": 2296,
									"character": 13
								}
							],
							"implementationOf": {
								"type": "reference",
								"name": "IDataFrame.takeWhile",
								"id": 821
							}
						},
						{
							"id": 1517,
							"name": "toArray",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1518,
									"name": "toArray",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Extract values from the dataframe as an array.\nThis forces lazy evaluation to complete.",
										"returns": "Returns an array of values contained within the dataframe.\n"
									},
									"type": {
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "any"
										}
									},
									"implementationOf": {
										"type": "reference",
										"name": "IDataFrame.toArray",
										"id": 748
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/dataframe.ts",
									"line": 1861,
									"character": 11
								}
							],
							"implementationOf": {
								"type": "reference",
								"name": "IDataFrame.toArray",
								"id": 747
							}
						},
						{
							"id": 1814,
							"name": "toCSV",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1815,
									"name": "toCSV",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Serialize the dataframe to CSV.",
										"text": " @returns Returns a CSV format string representing the dataframe.\n"
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									},
									"implementationOf": {
										"type": "reference",
										"name": "IDataFrame.toCSV",
										"id": 1036
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/dataframe.ts",
									"line": 3522,
									"character": 9
								}
							],
							"implementationOf": {
								"type": "reference",
								"name": "IDataFrame.toCSV",
								"id": 1035
							}
						},
						{
							"id": 1820,
							"name": "toHTML",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1821,
									"name": "toHTML",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Serialize the data frame to HTML.",
										"text": " @returns Returns a HTML format string representing the dataframe.\n"
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									},
									"implementationOf": {
										"type": "reference",
										"name": "IDataFrame.toHTML",
										"id": 1042
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/dataframe.ts",
									"line": 3551,
									"character": 10
								}
							],
							"implementationOf": {
								"type": "reference",
								"name": "IDataFrame.toHTML",
								"id": 1041
							}
						},
						{
							"id": 1812,
							"name": "toJSON",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1813,
									"name": "toJSON",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Serialize the dataframe to JSON.",
										"text": " @returns Returns a JSON format string representing the dataframe.\n"
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									},
									"implementationOf": {
										"type": "reference",
										"name": "IDataFrame.toJSON",
										"id": 1034
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/dataframe.ts",
									"line": 3513,
									"character": 10
								}
							],
							"implementationOf": {
								"type": "reference",
								"name": "IDataFrame.toJSON",
								"id": 1033
							}
						},
						{
							"id": 1521,
							"name": "toObject",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1522,
									"name": "toObject",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Convert the dataframe to a JavaScript object.",
										"returns": "Returns a JavaScript object generated from the input sequence by the key and value selector funtions.\n"
									},
									"typeParameter": [
										{
											"id": 1523,
											"name": "KeyT",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										},
										{
											"id": 1524,
											"name": "FieldT",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										},
										{
											"id": 1525,
											"name": "OutT",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										}
									],
									"parameters": [
										{
											"id": 1526,
											"name": "keySelector",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Function that selects keys for the resulting object."
											},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 1527,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"signatures": [
														{
															"id": 1528,
															"name": "__call",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {},
															"parameters": [
																{
																	"id": 1529,
																	"name": "value",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {},
																	"type": {
																		"type": "typeParameter",
																		"name": "ValueT"
																	}
																}
															],
															"type": {
																"type": "typeParameter",
																"name": "KeyT"
															}
														}
													],
													"sources": [
														{
															"fileName": "lib/dataframe.ts",
															"line": 1896,
															"character": 64
														}
													]
												}
											}
										},
										{
											"id": 1530,
											"name": "valueSelector",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Function that selects values for the resulting object.\n"
											},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 1531,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"signatures": [
														{
															"id": 1532,
															"name": "__call",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {},
															"parameters": [
																{
																	"id": 1533,
																	"name": "value",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {},
																	"type": {
																		"type": "typeParameter",
																		"name": "ValueT"
																	}
																}
															],
															"type": {
																"type": "typeParameter",
																"name": "FieldT"
															}
														}
													],
													"sources": [
														{
															"fileName": "lib/dataframe.ts",
															"line": 1896,
															"character": 104
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "typeParameter",
										"name": "OutT"
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/dataframe.ts",
									"line": 1896,
									"character": 12
								}
							],
							"implementationOf": {
								"type": "reference",
								"name": "IDataFrame.toObject",
								"id": 751
							}
						},
						{
							"id": 1519,
							"name": "toPairs",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1520,
									"name": "toPairs",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Retreive the index and values from the DataFrame as an array of pairs.\nEach pair is [index, value].\nThis forces lazy evaluation to complete.",
										"returns": "Returns an array of pairs that contains the dataframe content. Each pair is a two element array that contains an index and a value.\n"
									},
									"type": {
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "Object"
										}
									},
									"implementationOf": {
										"type": "reference",
										"name": "IDataFrame.toPairs",
										"id": 750
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/dataframe.ts",
									"line": 1878,
									"character": 11
								}
							],
							"implementationOf": {
								"type": "reference",
								"name": "IDataFrame.toPairs",
								"id": 749
							}
						},
						{
							"id": 1534,
							"name": "toRows",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1535,
									"name": "toRows",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Bake the data frame to an array of rows.",
										"text": " @returns Returns an array of rows. Each row is an array of values in column order.\n"
									},
									"type": {
										"type": "array",
										"elementType": {
											"type": "array",
											"elementType": {
												"type": "intrinsic",
												"name": "any"
											}
										}
									},
									"implementationOf": {
										"type": "reference",
										"name": "IDataFrame.toRows",
										"id": 765
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/dataframe.ts",
									"line": 1909,
									"character": 10
								}
							],
							"implementationOf": {
								"type": "reference",
								"name": "IDataFrame.toRows",
								"id": 764
							}
						},
						{
							"id": 1643,
							"name": "toString",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1644,
									"name": "toString",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Format the dataframe for display as a string.\nThis forces lazy evaluation to complete.",
										"returns": "Generates and returns a string representation of the dataframe or dataframe.\n"
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									},
									"implementationOf": {
										"type": "reference",
										"name": "IDataFrame.toString",
										"id": 874
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/dataframe.ts",
									"line": 2671,
									"character": 12
								}
							],
							"implementationOf": {
								"type": "reference",
								"name": "IDataFrame.toString",
								"id": 873
							}
						},
						{
							"id": 1655,
							"name": "toStrings",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1656,
									"name": "toStrings",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Convert a column of values of different types to a column of string values.",
										"returns": "Returns a new dataframe with a particular named column convert to strings.\n"
									},
									"parameters": [
										{
											"id": 1657,
											"name": "columnNameOrNames",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Specifies the column name or array of column names to convert to strings."
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "array",
														"elementType": {
															"type": "intrinsic",
															"name": "string"
														}
													}
												]
											}
										},
										{
											"id": 1658,
											"name": "formatString",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "undefined"
													},
													{
														"type": "intrinsic",
														"name": "string"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "IDataFrame",
										"id": 683,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "IndexT"
											},
											{
												"type": "typeParameter",
												"name": "ValueT"
											}
										]
									},
									"implementationOf": {
										"type": "reference",
										"name": "IDataFrame.toStrings",
										"id": 886
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/dataframe.ts",
									"line": 2770,
									"character": 13
								}
							],
							"implementationOf": {
								"type": "reference",
								"name": "IDataFrame.toStrings",
								"id": 885
							}
						},
						{
							"id": 1544,
							"name": "transformSeries",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1545,
									"name": "transformSeries",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Transform one or more columns. This is equivalent to extracting a column, calling 'select' on it,\nthen plugging it back in as the same column.",
										"returns": "Returns a new dataframe with 1 or more columns transformed.\n"
									},
									"typeParameter": [
										{
											"id": 1546,
											"name": "NewValueT",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										}
									],
									"parameters": [
										{
											"id": 1547,
											"name": "columnSelectors",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Object with field names for each column to be transformed. Each field you be a selector that transforms that column.\n"
											},
											"type": {
												"type": "reference",
												"name": "IColumnTransformSpec",
												"id": 669
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "IDataFrame",
										"id": 683,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "IndexT"
											},
											{
												"type": "typeParameter",
												"name": "NewValueT"
											}
										]
									},
									"implementationOf": {
										"type": "reference",
										"name": "IDataFrame.transformSeries",
										"id": 775
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/dataframe.ts",
									"line": 1978,
									"character": 19
								}
							],
							"implementationOf": {
								"type": "reference",
								"name": "IDataFrame.transformSeries",
								"id": 774
							}
						},
						{
							"id": 1659,
							"name": "truncateStrings",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1660,
									"name": "truncateStrings",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Produces a new data frame with all string values truncated to the requested maximum length.",
										"returns": "Returns a new dataframe with all strings truncated to the specified maximum length.\n"
									},
									"parameters": [
										{
											"id": 1661,
											"name": "maxLength",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The maximum length of the string values after truncation.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "IDataFrame",
										"id": 683,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "IndexT"
											},
											{
												"type": "typeParameter",
												"name": "ValueT"
											}
										]
									},
									"implementationOf": {
										"type": "reference",
										"name": "IDataFrame.truncateStrings",
										"id": 890
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/dataframe.ts",
									"line": 2796,
									"character": 19
								}
							],
							"implementationOf": {
								"type": "reference",
								"name": "IDataFrame.truncateStrings",
								"id": 889
							}
						},
						{
							"id": 1729,
							"name": "union",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1730,
									"name": "union",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Returns the unique union of values between two dataframes.",
										"returns": "Returns the union of two dataframes.\n"
									},
									"typeParameter": [
										{
											"id": 1731,
											"name": "KeyT",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										}
									],
									"parameters": [
										{
											"id": 1732,
											"name": "other",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The other dataframes to combine."
											},
											"type": {
												"type": "reference",
												"name": "IDataFrame",
												"id": 683,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "IndexT"
													},
													{
														"type": "typeParameter",
														"name": "ValueT"
													}
												]
											}
										},
										{
											"id": 1733,
											"name": "selector",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "reference",
												"name": "SelectorFn",
												"id": 66,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "ValueT"
													},
													{
														"type": "typeParameter",
														"name": "KeyT"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "IDataFrame",
										"id": 683,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "IndexT"
											},
											{
												"type": "typeParameter",
												"name": "ValueT"
											}
										]
									},
									"implementationOf": {
										"type": "reference",
										"name": "IDataFrame.union",
										"id": 951
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/dataframe.ts",
									"line": 3065,
									"character": 9
								}
							],
							"implementationOf": {
								"type": "reference",
								"name": "IDataFrame.union",
								"id": 950
							}
						},
						{
							"id": 1567,
							"name": "variableWindow",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1568,
									"name": "variableWindow",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Groups sequential values into variable length 'windows'.",
										"returns": "Returns a series of groups. Each group is itself a series that contains the values in the 'window'.\n"
									},
									"parameters": [
										{
											"id": 1569,
											"name": "comparer",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Predicate that compares two values and returns true if they should be in the same window.\n"
											},
											"type": {
												"type": "reference",
												"name": "ComparerFn",
												"id": 371,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "ValueT"
													},
													{
														"type": "typeParameter",
														"name": "ValueT"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "ISeries",
										"id": 2287,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "number"
											},
											{
												"type": "reference",
												"name": "IDataFrame",
												"id": 683,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "IndexT"
													},
													{
														"type": "typeParameter",
														"name": "ValueT"
													}
												]
											}
										]
									},
									"implementationOf": {
										"type": "reference",
										"name": "IDataFrame.variableWindow",
										"id": 798
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/dataframe.ts",
									"line": 2142,
									"character": 18
								}
							],
							"implementationOf": {
								"type": "reference",
								"name": "IDataFrame.variableWindow",
								"id": 797
							}
						},
						{
							"id": 1612,
							"name": "where",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1613,
									"name": "where",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Filter a series by a predicate selector.",
										"returns": "Returns a new series containing only the values that match the predicate.\n"
									},
									"parameters": [
										{
											"id": 1614,
											"name": "predicate",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Predicte function to filter rows of the series.\n"
											},
											"type": {
												"type": "reference",
												"name": "PredicateFn",
												"id": 152,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "ValueT"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "IDataFrame",
										"id": 683,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "IndexT"
											},
											{
												"type": "typeParameter",
												"name": "ValueT"
											}
										]
									},
									"implementationOf": {
										"type": "reference",
										"name": "IDataFrame.where",
										"id": 843
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/dataframe.ts",
									"line": 2444,
									"character": 9
								}
							],
							"implementationOf": {
								"type": "reference",
								"name": "IDataFrame.where",
								"id": 842
							}
						},
						{
							"id": 1561,
							"name": "window",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1562,
									"name": "window",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Segment a dataframe into 'windows'. Returns a new series. Each value in the new series contains a 'window' (or segment) of the original dataframe.\nUse select or selectPairs to aggregate.",
										"returns": "Returns a new series, each value of which is a 'window' (or segment) of the original dataframe.\n"
									},
									"parameters": [
										{
											"id": 1563,
											"name": "period",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The number of values in the window.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "ISeries",
										"id": 2287,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "number"
											},
											{
												"type": "reference",
												"name": "IDataFrame",
												"id": 683,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "IndexT"
													},
													{
														"type": "typeParameter",
														"name": "ValueT"
													}
												]
											}
										]
									},
									"implementationOf": {
										"type": "reference",
										"name": "IDataFrame.window",
										"id": 792
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/dataframe.ts",
									"line": 2104,
									"character": 10
								}
							],
							"implementationOf": {
								"type": "reference",
								"name": "IDataFrame.window",
								"id": 791
							}
						},
						{
							"id": 1468,
							"name": "withIndex",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1469,
									"name": "withIndex",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Apply a new index to the dataframe.",
										"returns": "Returns a new dataframe or dataframe with the specified index attached.\n"
									},
									"typeParameter": [
										{
											"id": 1470,
											"name": "NewIndexT",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										}
									],
									"parameters": [
										{
											"id": 1471,
											"name": "newIndex",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The new array or iterable to apply to the dataframe. Can also be a selector to choose the index for each row in the dataframe.\n"
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "reference",
														"name": "Iterable",
														"typeArguments": [
															{
																"type": "typeParameter",
																"name": "NewIndexT"
															}
														]
													},
													{
														"type": "reference",
														"name": "SelectorFn",
														"id": 66,
														"typeArguments": [
															{
																"type": "typeParameter",
																"name": "ValueT"
															},
															{
																"type": "typeParameter",
																"name": "NewIndexT"
															}
														]
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "IDataFrame",
										"id": 683,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "NewIndexT"
											},
											{
												"type": "typeParameter",
												"name": "ValueT"
											}
										]
									},
									"implementationOf": {
										"type": "reference",
										"name": "IDataFrame.withIndex",
										"id": 699
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/dataframe.ts",
									"line": 1372,
									"character": 13
								}
							],
							"implementationOf": {
								"type": "reference",
								"name": "IDataFrame.withIndex",
								"id": 698
							}
						},
						{
							"id": 1485,
							"name": "withSeries",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1486,
									"name": "withSeries",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Create a new dataframe with an additional column specified by the passed-in series.",
										"returns": "Returns a new dataframe replacing or adding a particular named column.\n"
									},
									"typeParameter": [
										{
											"id": 1487,
											"name": "SeriesValueT",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										}
									],
									"parameters": [
										{
											"id": 1488,
											"name": "columnNameOrSpec",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The name of the column to add or replace."
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "reference",
														"name": "IColumnGenSpec",
														"id": 663
													}
												]
											}
										},
										{
											"id": 1489,
											"name": "series",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "reference",
														"name": "ISeries",
														"id": 2287,
														"typeArguments": [
															{
																"type": "typeParameter",
																"name": "IndexT"
															},
															{
																"type": "typeParameter",
																"name": "SeriesValueT"
															}
														]
													},
													{
														"type": "reference",
														"name": "SeriesSelectorFn",
														"id": 2261,
														"typeArguments": [
															{
																"type": "typeParameter",
																"name": "IndexT"
															},
															{
																"type": "typeParameter",
																"name": "ValueT"
															},
															{
																"type": "typeParameter",
																"name": "SeriesValueT"
															}
														]
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "IDataFrame",
										"id": 683,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "IndexT"
											},
											{
												"type": "typeParameter",
												"name": "ValueT"
											}
										]
									},
									"implementationOf": {
										"type": "reference",
										"name": "IDataFrame.withSeries",
										"id": 716
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/dataframe.ts",
									"line": 1471,
									"character": 14
								}
							],
							"implementationOf": {
								"type": "reference",
								"name": "IDataFrame.withSeries",
								"id": 715
							}
						},
						{
							"id": 1693,
							"name": "zip",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1694,
									"name": "zip",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Zip together multiple dataframes to create a new dataframe.\nPreserves the index of the first dataframe.",
										"returns": "Returns a single dataframe concatenated from multiple input dataframes.\n"
									},
									"typeParameter": [
										{
											"id": 1695,
											"name": "Index2T",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										},
										{
											"id": 1696,
											"name": "Value2T",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										},
										{
											"id": 1697,
											"name": "ResultT",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										}
									],
									"parameters": [
										{
											"id": 1698,
											"name": "s2",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "IDataFrame",
												"id": 683,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "Index2T"
													},
													{
														"type": "typeParameter",
														"name": "Value2T"
													}
												]
											}
										},
										{
											"id": 1699,
											"name": "zipper",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Zipper function that produces a new dataframe based on the input dataframes.\n"
											},
											"type": {
												"type": "reference",
												"name": "Zip2Fn",
												"id": 3582,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "ValueT"
													},
													{
														"type": "typeParameter",
														"name": "Value2T"
													},
													{
														"type": "typeParameter",
														"name": "ResultT"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "IDataFrame",
										"id": 683,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "IndexT"
											},
											{
												"type": "typeParameter",
												"name": "ResultT"
											}
										]
									},
									"implementationOf": {
										"type": "reference",
										"name": "IDataFrame.zip",
										"id": 912
									}
								},
								{
									"id": 1700,
									"name": "zip",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"typeParameter": [
										{
											"id": 1701,
											"name": "Index2T",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										},
										{
											"id": 1702,
											"name": "Value2T",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										},
										{
											"id": 1703,
											"name": "Index3T",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										},
										{
											"id": 1704,
											"name": "Value3T",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										},
										{
											"id": 1705,
											"name": "ResultT",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										}
									],
									"parameters": [
										{
											"id": 1706,
											"name": "s2",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "IDataFrame",
												"id": 683,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "Index2T"
													},
													{
														"type": "typeParameter",
														"name": "Value2T"
													}
												]
											}
										},
										{
											"id": 1707,
											"name": "s3",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "IDataFrame",
												"id": 683,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "Index3T"
													},
													{
														"type": "typeParameter",
														"name": "Value3T"
													}
												]
											}
										},
										{
											"id": 1708,
											"name": "zipper",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Zip3Fn",
												"id": 3590,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "ValueT"
													},
													{
														"type": "typeParameter",
														"name": "Value2T"
													},
													{
														"type": "typeParameter",
														"name": "Value3T"
													},
													{
														"type": "typeParameter",
														"name": "ResultT"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "IDataFrame",
										"id": 683,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "IndexT"
											},
											{
												"type": "typeParameter",
												"name": "ResultT"
											}
										]
									},
									"implementationOf": {
										"type": "reference",
										"name": "IDataFrame.zip",
										"id": 918
									}
								},
								{
									"id": 1709,
									"name": "zip",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"typeParameter": [
										{
											"id": 1710,
											"name": "Index2T",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										},
										{
											"id": 1711,
											"name": "Value2T",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										},
										{
											"id": 1712,
											"name": "Index3T",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										},
										{
											"id": 1713,
											"name": "Value3T",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										},
										{
											"id": 1714,
											"name": "Index4T",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										},
										{
											"id": 1715,
											"name": "Value4T",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										},
										{
											"id": 1716,
											"name": "ResultT",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										}
									],
									"parameters": [
										{
											"id": 1717,
											"name": "s2",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "IDataFrame",
												"id": 683,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "Index2T"
													},
													{
														"type": "typeParameter",
														"name": "Value2T"
													}
												]
											}
										},
										{
											"id": 1718,
											"name": "s3",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "IDataFrame",
												"id": 683,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "Index3T"
													},
													{
														"type": "typeParameter",
														"name": "Value3T"
													}
												]
											}
										},
										{
											"id": 1719,
											"name": "s4",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "IDataFrame",
												"id": 683,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "Index4T"
													},
													{
														"type": "typeParameter",
														"name": "Value4T"
													}
												]
											}
										},
										{
											"id": 1720,
											"name": "zipper",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Zip3Fn",
												"id": 3590,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "ValueT"
													},
													{
														"type": "typeParameter",
														"name": "Value2T"
													},
													{
														"type": "typeParameter",
														"name": "Value3T"
													},
													{
														"type": "typeParameter",
														"name": "ResultT"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "IDataFrame",
										"id": 683,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "IndexT"
											},
											{
												"type": "typeParameter",
												"name": "ResultT"
											}
										]
									},
									"implementationOf": {
										"type": "reference",
										"name": "IDataFrame.zip",
										"id": 927
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/dataframe.ts",
									"line": 3023,
									"character": 7
								},
								{
									"fileName": "lib/dataframe.ts",
									"line": 3024,
									"character": 7
								},
								{
									"fileName": "lib/dataframe.ts",
									"line": 3025,
									"character": 7
								},
								{
									"fileName": "lib/dataframe.ts",
									"line": 3026,
									"character": 7
								}
							],
							"implementationOf": {
								"type": "reference",
								"name": "IDataFrame.zip",
								"id": 911
							}
						},
						{
							"id": 1439,
							"name": "checkIterable",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isStatic": true,
								"isPrivate": true,
								"isExported": true
							},
							"signatures": [
								{
									"id": 1440,
									"name": "checkIterable",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"typeParameter": [
										{
											"id": 1441,
											"name": "T",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										}
									],
									"parameters": [
										{
											"id": 1442,
											"name": "input",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "array",
														"elementType": {
															"type": "typeParameter",
															"name": "T"
														}
													},
													{
														"type": "reference",
														"name": "Iterable",
														"typeArguments": [
															{
																"type": "typeParameter",
																"name": "T"
															}
														]
													}
												]
											}
										},
										{
											"id": 1443,
											"name": "fieldName",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/dataframe.ts",
									"line": 1148,
									"character": 32
								}
							]
						},
						{
							"id": 1678,
							"name": "concat",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isStatic": true,
								"isExported": true
							},
							"signatures": [
								{
									"id": 1679,
									"name": "concat",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Concatenate multiple dataframes into a single dataframe.",
										"returns": "Returns a single dataframe concatenated from multiple input dataframes.\n"
									},
									"typeParameter": [
										{
											"id": 1680,
											"name": "IndexT",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										},
										{
											"id": 1681,
											"name": "ValueT",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										}
									],
									"parameters": [
										{
											"id": 1682,
											"name": "dataframes",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Array of dataframes to concatenate.\n"
											},
											"type": {
												"type": "array",
												"elementType": {
													"type": "reference",
													"name": "IDataFrame",
													"id": 683,
													"typeArguments": [
														{
															"type": "typeParameter",
															"name": "IndexT"
														},
														{
															"type": "typeParameter",
															"name": "ValueT"
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "IDataFrame",
										"id": 683,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "IndexT"
											},
											{
												"type": "typeParameter",
												"name": "ValueT"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/dataframe.ts",
									"line": 2933,
									"character": 17
								}
							]
						},
						{
							"id": 1436,
							"name": "initColumnNames",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isStatic": true,
								"isPrivate": true,
								"isExported": true
							},
							"signatures": [
								{
									"id": 1437,
									"name": "initColumnNames",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 1438,
											"name": "inputColumnNames",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Iterable",
												"typeArguments": [
													{
														"type": "intrinsic",
														"name": "string"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Iterable",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/dataframe.ts",
									"line": 1106,
									"character": 34
								}
							]
						},
						{
							"id": 1432,
							"name": "initEmpty",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isStatic": true,
								"isPrivate": true,
								"isExported": true
							},
							"signatures": [
								{
									"id": 1433,
									"name": "initEmpty",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"typeParameter": [
										{
											"id": 1434,
											"name": "IndexT",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										},
										{
											"id": 1435,
											"name": "ValueT",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										}
									],
									"type": {
										"type": "reference",
										"name": "IDataFrameContent",
										"id": 1412,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "IndexT"
											},
											{
												"type": "typeParameter",
												"name": "ValueT"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/dataframe.ts",
									"line": 1093,
									"character": 28
								}
							]
						},
						{
							"id": 1427,
							"name": "initFromArray",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isStatic": true,
								"isPrivate": true,
								"isExported": true
							},
							"signatures": [
								{
									"id": 1428,
									"name": "initFromArray",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"typeParameter": [
										{
											"id": 1429,
											"name": "IndexT",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										},
										{
											"id": 1430,
											"name": "ValueT",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										}
									],
									"parameters": [
										{
											"id": 1431,
											"name": "arr",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Iterable",
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "ValueT"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "IDataFrameContent",
										"id": 1412,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "IndexT"
											},
											{
												"type": "typeParameter",
												"name": "ValueT"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/dataframe.ts",
									"line": 1078,
									"character": 32
								}
							]
						},
						{
							"id": 1444,
							"name": "initFromConfig",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isStatic": true,
								"isPrivate": true,
								"isExported": true
							},
							"signatures": [
								{
									"id": 1445,
									"name": "initFromConfig",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"typeParameter": [
										{
											"id": 1446,
											"name": "IndexT",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										},
										{
											"id": 1447,
											"name": "ValueT",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										}
									],
									"parameters": [
										{
											"id": 1448,
											"name": "config",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "IDataFrameConfig",
												"id": 649,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "IndexT"
													},
													{
														"type": "typeParameter",
														"name": "ValueT"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "IDataFrameContent",
										"id": 1412,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "IndexT"
											},
											{
												"type": "typeParameter",
												"name": "ValueT"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/dataframe.ts",
									"line": 1165,
									"character": 33
								}
							]
						},
						{
							"id": 1686,
							"name": "zip",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isStatic": true,
								"isExported": true
							},
							"signatures": [
								{
									"id": 1687,
									"name": "zip",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Zip together multiple dataframes to create a new dataframe.\nPreserves the index of the first dataframe.",
										"returns": "Returns a single dataframe zipped from multiple input dataframes.\n"
									},
									"typeParameter": [
										{
											"id": 1688,
											"name": "IndexT",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										},
										{
											"id": 1689,
											"name": "ValueT",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										},
										{
											"id": 1690,
											"name": "ResultT",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										}
									],
									"parameters": [
										{
											"id": 1691,
											"name": "dataframes",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Multiple arguments. Each can be either a dataframe or an array of dataframes."
											},
											"type": {
												"type": "array",
												"elementType": {
													"type": "reference",
													"name": "IDataFrame",
													"id": 683,
													"typeArguments": [
														{
															"type": "typeParameter",
															"name": "IndexT"
														},
														{
															"type": "typeParameter",
															"name": "ValueT"
														}
													]
												}
											}
										},
										{
											"id": 1692,
											"name": "zipper",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Selector function that produces a new dataframe based on the input dataframes.\n"
											},
											"type": {
												"type": "reference",
												"name": "ZipNFn",
												"id": 3576,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "ValueT"
													},
													{
														"type": "typeParameter",
														"name": "ResultT"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "IDataFrame",
										"id": 683,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "IndexT"
											},
											{
												"type": "typeParameter",
												"name": "ResultT"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/dataframe.ts",
									"line": 2990,
									"character": 14
								}
							]
						}
					],
					"groups": [
						{
							"title": "Constructors",
							"kind": 512,
							"children": [
								1449
							]
						},
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								1423,
								1424,
								1425,
								1426
							]
						},
						{
							"title": "Methods",
							"kind": 2048,
							"children": [
								1456,
								1636,
								1574,
								1618,
								1621,
								1798,
								1816,
								1818,
								1603,
								1662,
								1633,
								1639,
								1510,
								1507,
								1683,
								1597,
								1805,
								1552,
								1808,
								1810,
								1666,
								1499,
								1630,
								1490,
								1742,
								1481,
								1801,
								1599,
								1615,
								1548,
								1458,
								1460,
								1454,
								1462,
								1474,
								1670,
								1674,
								1478,
								1606,
								1556,
								1795,
								1734,
								1750,
								1760,
								1770,
								1780,
								1601,
								1452,
								1624,
								1721,
								1725,
								1651,
								1648,
								1645,
								1790,
								1513,
								1503,
								1472,
								1664,
								1564,
								1536,
								1540,
								1570,
								1464,
								1579,
								1585,
								1582,
								1627,
								1495,
								1609,
								1588,
								1594,
								1591,
								1517,
								1814,
								1820,
								1812,
								1521,
								1519,
								1534,
								1643,
								1655,
								1544,
								1659,
								1729,
								1567,
								1612,
								1561,
								1468,
								1485,
								1693,
								1439,
								1678,
								1436,
								1432,
								1427,
								1444,
								1686
							]
						}
					],
					"sources": [
						{
							"fileName": "lib/dataframe.ts",
							"line": 1059,
							"character": 22
						}
					],
					"extendedBy": [
						{
							"type": "reference",
							"name": "OrderedDataFrame",
							"id": 1862
						}
					],
					"implementedTypes": [
						{
							"type": "reference",
							"name": "IDataFrame",
							"id": 683,
							"typeArguments": [
								{
									"type": "typeParameter",
									"name": "IndexT"
								},
								{
									"type": "typeParameter",
									"name": "ValueT"
								}
							]
						}
					]
				},
				{
					"id": 1849,
					"name": "JsonSerializer",
					"kind": 128,
					"kindString": "Class",
					"flags": {},
					"typeParameter": [
						{
							"id": 1850,
							"name": "IndexT",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {}
						},
						{
							"id": 1851,
							"name": "ValueT",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {}
						}
					],
					"children": [
						{
							"id": 1853,
							"name": "constructor",
							"kind": 512,
							"kindString": "Constructor",
							"flags": {},
							"signatures": [
								{
									"id": 1854,
									"name": "new JsonSerializer",
									"kind": 16384,
									"kindString": "Constructor signature",
									"flags": {},
									"parameters": [
										{
											"id": 1855,
											"name": "dataframe",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "IDataFrame",
												"id": 683,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "IndexT"
													},
													{
														"type": "typeParameter",
														"name": "ValueT"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "JsonSerializer",
										"id": 1849
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/dataframe.ts",
									"line": 3691,
									"character": 42
								}
							]
						},
						{
							"id": 1852,
							"name": "dataframe",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"sources": [
								{
									"fileName": "lib/dataframe.ts",
									"line": 3691,
									"character": 13
								}
							],
							"type": {
								"type": "reference",
								"name": "IDataFrame",
								"id": 683,
								"typeArguments": [
									{
										"type": "typeParameter",
										"name": "IndexT"
									},
									{
										"type": "typeParameter",
										"name": "ValueT"
									}
								]
							}
						},
						{
							"id": 1856,
							"name": "writeFile",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"signatures": [
								{
									"id": 1857,
									"name": "writeFile",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Serialize the dataframe to a JSON file in the local file system.\nAsynchronous version."
									},
									"parameters": [
										{
											"id": 1858,
											"name": "filePath",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Specifies the output path for the file.\n\n @returns Returns a promise that resolves when the file has been written.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Promise",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											}
										]
									},
									"implementationOf": {
										"type": "reference",
										"name": "IJsonSerializer.writeFile",
										"id": 1844
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/dataframe.ts",
									"line": 3705,
									"character": 13
								}
							],
							"implementationOf": {
								"type": "reference",
								"name": "IJsonSerializer.writeFile",
								"id": 1843
							}
						},
						{
							"id": 1859,
							"name": "writeFileSync",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"signatures": [
								{
									"id": 1860,
									"name": "writeFileSync",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Serialize the dataframe to a JSON file in the local file system.\nSynchronous version."
									},
									"parameters": [
										{
											"id": 1861,
											"name": "filePath",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Specifies the output path for the file.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									},
									"implementationOf": {
										"type": "reference",
										"name": "IJsonSerializer.writeFileSync",
										"id": 1847
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/dataframe.ts",
									"line": 3727,
									"character": 17
								}
							],
							"implementationOf": {
								"type": "reference",
								"name": "IJsonSerializer.writeFileSync",
								"id": 1846
							}
						}
					],
					"groups": [
						{
							"title": "Constructors",
							"kind": 512,
							"children": [
								1853
							]
						},
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								1852
							]
						},
						{
							"title": "Methods",
							"kind": 2048,
							"children": [
								1856,
								1859
							]
						}
					],
					"sources": [
						{
							"fileName": "lib/dataframe.ts",
							"line": 3689,
							"character": 20
						}
					],
					"implementedTypes": [
						{
							"type": "reference",
							"name": "IJsonSerializer",
							"id": 1842
						}
					]
				},
				{
					"id": 1862,
					"name": "OrderedDataFrame",
					"kind": 128,
					"kindString": "Class",
					"flags": {},
					"typeParameter": [
						{
							"id": 1863,
							"name": "IndexT",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {}
						},
						{
							"id": 1864,
							"name": "ValueT",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {}
						},
						{
							"id": 1865,
							"name": "SortT",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {}
						}
					],
					"children": [
						{
							"id": 1879,
							"name": "constructor",
							"kind": 512,
							"kindString": "Constructor",
							"flags": {},
							"signatures": [
								{
									"id": 1880,
									"name": "new OrderedDataFrame",
									"kind": 16384,
									"kindString": "Constructor signature",
									"flags": {},
									"parameters": [
										{
											"id": 1881,
											"name": "values",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Iterable",
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "ValueT"
													}
												]
											}
										},
										{
											"id": 1882,
											"name": "pairs",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Iterable",
												"typeArguments": [
													{
														"type": "tuple",
														"elements": [
															{
																"type": "typeParameter",
																"name": "IndexT"
															},
															{
																"type": "typeParameter",
																"name": "ValueT"
															}
														]
													}
												]
											}
										},
										{
											"id": 1883,
											"name": "selector",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "SelectorWithIndexFn",
												"id": 3569,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "ValueT"
													},
													{
														"type": "typeParameter",
														"name": "SortT"
													}
												]
											}
										},
										{
											"id": 1884,
											"name": "direction",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Direction",
												"id": 390
											}
										},
										{
											"id": 1885,
											"name": "parent",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "reference",
														"name": "OrderedDataFrame",
														"id": 1862,
														"typeArguments": [
															{
																"type": "typeParameter",
																"name": "IndexT"
															},
															{
																"type": "typeParameter",
																"name": "ValueT"
															}
														]
													},
													{
														"type": "intrinsic",
														"name": "null"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "OrderedDataFrame",
										"id": 1862
									},
									"overwrites": {
										"type": "reference",
										"name": "DataFrame.__constructor",
										"id": 1449
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/dataframe.ts",
									"line": 3760,
									"character": 5
								}
							],
							"overwrites": {
								"type": "reference",
								"name": "DataFrame.__constructor",
								"id": 1449
							}
						},
						{
							"id": 1868,
							"name": "direction",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"sources": [
								{
									"fileName": "lib/dataframe.ts",
									"line": 3744,
									"character": 13
								}
							],
							"type": {
								"type": "reference",
								"name": "Direction",
								"id": 390
							}
						},
						{
							"id": 1870,
							"name": "origPairs",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"sources": [
								{
									"fileName": "lib/dataframe.ts",
									"line": 3746,
									"character": 13
								}
							],
							"type": {
								"type": "reference",
								"name": "Iterable",
								"typeArguments": [
									{
										"type": "tuple",
										"elements": [
											{
												"type": "typeParameter",
												"name": "IndexT"
											},
											{
												"type": "typeParameter",
												"name": "ValueT"
											}
										]
									}
								]
							}
						},
						{
							"id": 1869,
							"name": "origValues",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"sources": [
								{
									"fileName": "lib/dataframe.ts",
									"line": 3745,
									"character": 14
								}
							],
							"type": {
								"type": "reference",
								"name": "Iterable",
								"typeArguments": [
									{
										"type": "typeParameter",
										"name": "ValueT"
									}
								]
							}
						},
						{
							"id": 1866,
							"name": "parent",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"sources": [
								{
									"fileName": "lib/dataframe.ts",
									"line": 3742,
									"character": 10
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "reference",
										"name": "OrderedDataFrame",
										"id": 1862,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "IndexT"
											},
											{
												"type": "typeParameter",
												"name": "ValueT"
											},
											{
												"type": "typeParameter",
												"name": "SortT"
											}
										]
									},
									{
										"type": "intrinsic",
										"name": "null"
									}
								]
							}
						},
						{
							"id": 1867,
							"name": "selector",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"sources": [
								{
									"fileName": "lib/dataframe.ts",
									"line": 3743,
									"character": 12
								}
							],
							"type": {
								"type": "reference",
								"name": "SelectorWithIndexFn",
								"id": 3569,
								"typeArguments": [
									{
										"type": "typeParameter",
										"name": "ValueT"
									},
									{
										"type": "typeParameter",
										"name": "SortT"
									}
								]
							}
						},
						{
							"id": 1894,
							"name": "__@iterator",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"signatures": [
								{
									"id": 1895,
									"name": "__@iterator",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Get an iterator to enumerate the values of the dataframe.\nEnumerating the iterator forces lazy evaluation to complete."
									},
									"type": {
										"type": "reference",
										"name": "Iterator",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "any"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "DataFrame.[Symbol.iterator]",
										"id": 1456
									},
									"implementationOf": {
										"type": "reference",
										"name": "IOrderedDataFrame.__@iterator",
										"id": 1056
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/dataframe.ts",
									"line": 1313,
									"character": 21
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "DataFrame.[Symbol.iterator]",
								"id": 1456
							},
							"implementationOf": {
								"type": "reference",
								"name": "IOrderedDataFrame.__@iterator",
								"id": 1055
							}
						},
						{
							"id": 2074,
							"name": "after",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"signatures": [
								{
									"id": 2075,
									"name": "after",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Get a new series containing all values after the specified index value (exclusive).",
										"returns": "Returns a new series containing all values after the specified index value.\n"
									},
									"parameters": [
										{
											"id": 2076,
											"name": "indexValue",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The index value to search for.\n"
											},
											"type": {
												"type": "typeParameter",
												"name": "IndexT"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "IDataFrame",
										"id": 683,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "IndexT"
											},
											{
												"type": "typeParameter",
												"name": "ValueT"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "DataFrame.after",
										"id": 1636
									},
									"implementationOf": {
										"type": "reference",
										"name": "IOrderedDataFrame.after",
										"id": 1236
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/dataframe.ts",
									"line": 2641,
									"character": 9
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "DataFrame.after",
								"id": 1636
							},
							"implementationOf": {
								"type": "reference",
								"name": "IOrderedDataFrame.after",
								"id": 1235
							}
						},
						{
							"id": 2012,
							"name": "aggregate",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"signatures": [
								{
									"id": 2013,
									"name": "aggregate",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Aggregate the values in the dataframe.",
										"returns": "Returns a new value that has been aggregated from the input sequence by the 'selector' function.\n"
									},
									"typeParameter": [
										{
											"id": 2014,
											"name": "ToT",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										}
									],
									"parameters": [
										{
											"id": 2015,
											"name": "seedOrSelector",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "reference",
														"name": "AggregateFn",
														"id": 3644,
														"typeArguments": [
															{
																"type": "typeParameter",
																"name": "ValueT"
															},
															{
																"type": "typeParameter",
																"name": "ToT"
															}
														]
													},
													{
														"type": "typeParameter",
														"name": "ToT"
													},
													{
														"type": "reference",
														"name": "IColumnAggregateSpec",
														"id": 672
													}
												]
											}
										},
										{
											"id": 2016,
											"name": "selector",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"text": "Function that takes the seed and then each value in the dataframe and produces the aggregate value.\n"
											},
											"type": {
												"type": "reference",
												"name": "AggregateFn",
												"id": 3644,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "ValueT"
													},
													{
														"type": "typeParameter",
														"name": "ToT"
													}
												]
											}
										}
									],
									"type": {
										"type": "typeParameter",
										"name": "ToT"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "DataFrame.aggregate",
										"id": 1574
									},
									"implementationOf": {
										"type": "reference",
										"name": "IOrderedDataFrame.aggregate",
										"id": 1174
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/dataframe.ts",
									"line": 2186,
									"character": 13
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "DataFrame.aggregate",
								"id": 1574
							},
							"implementationOf": {
								"type": "reference",
								"name": "IOrderedDataFrame.aggregate",
								"id": 1173
							}
						},
						{
							"id": 2056,
							"name": "all",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"signatures": [
								{
									"id": 2057,
									"name": "all",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Determine if the predicate returns truthy for all values in the series.\nReturns false as soon as the predicate evaluates to falsy.\nReturns true if the predicate returns truthy for all values in the series.\nReturns false if the series is empty.",
										"returns": "Returns true if the predicate has returned truthy for every value in the sequence, otherwise returns false.\n"
									},
									"parameters": [
										{
											"id": 2058,
											"name": "predicate",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Predicate function that receives each value in turn and returns truthy for a match, otherwise falsy.\n"
											},
											"type": {
												"type": "reference",
												"name": "PredicateFn",
												"id": 152,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "ValueT"
													}
												]
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "DataFrame.all",
										"id": 1618
									},
									"implementationOf": {
										"type": "reference",
										"name": "IOrderedDataFrame.all",
										"id": 1218
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/dataframe.ts",
									"line": 2486,
									"character": 7
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "DataFrame.all",
								"id": 1618
							},
							"implementationOf": {
								"type": "reference",
								"name": "IOrderedDataFrame.all",
								"id": 1217
							}
						},
						{
							"id": 2059,
							"name": "any",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"signatures": [
								{
									"id": 2060,
									"name": "any",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Determine if the predicate returns truthy for any of the values in the series.\nReturns true as soon as the predicate returns truthy.\nReturns false if the predicate never returns truthy.\nIf no predicate is specified the value itself is checked.",
										"returns": "Returns true if the predicate has returned truthy for any value in the sequence, otherwise returns false.\n"
									},
									"parameters": [
										{
											"id": 2061,
											"name": "predicate",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "reference",
												"name": "PredicateFn",
												"id": 152,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "ValueT"
													}
												]
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "DataFrame.any",
										"id": 1621
									},
									"implementationOf": {
										"type": "reference",
										"name": "IOrderedDataFrame.any",
										"id": 1221
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/dataframe.ts",
									"line": 2512,
									"character": 7
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "DataFrame.any",
								"id": 1621
							},
							"implementationOf": {
								"type": "reference",
								"name": "IOrderedDataFrame.any",
								"id": 1220
							}
						},
						{
							"id": 2236,
							"name": "appendPair",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"signatures": [
								{
									"id": 2237,
									"name": "appendPair",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Append a pair to the end of a dataframe.",
										"returns": "Returns a new dataframe with the specified pair appended.\n"
									},
									"parameters": [
										{
											"id": 2238,
											"name": "pair",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The pair to append.\n"
											},
											"type": {
												"type": "tuple",
												"elements": [
													{
														"type": "typeParameter",
														"name": "IndexT"
													},
													{
														"type": "typeParameter",
														"name": "ValueT"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "IDataFrame",
										"id": 683,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "IndexT"
											},
											{
												"type": "typeParameter",
												"name": "ValueT"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "DataFrame.appendPair",
										"id": 1798
									},
									"implementationOf": {
										"type": "reference",
										"name": "IOrderedDataFrame.appendPair",
										"id": 1389
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/dataframe.ts",
									"line": 3399,
									"character": 14
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "DataFrame.appendPair",
								"id": 1798
							},
							"implementationOf": {
								"type": "reference",
								"name": "IOrderedDataFrame.appendPair",
								"id": 1388
							}
						},
						{
							"id": 2254,
							"name": "asCSV",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"signatures": [
								{
									"id": 2255,
									"name": "asCSV",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Treat the dataframe as CSV data for purposes of serialization.",
										"returns": "Returns an object that represents the dataframe for serialization in the CSV format. Call `writeFile`, `writeFileSync` to output the dataframe via different media.\n"
									},
									"type": {
										"type": "reference",
										"name": "ICsvSerializer",
										"id": 1822
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "DataFrame.asCSV",
										"id": 1816
									},
									"implementationOf": {
										"type": "reference",
										"name": "IOrderedDataFrame.asCSV",
										"id": 1407
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/dataframe.ts",
									"line": 3533,
									"character": 9
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "DataFrame.asCSV",
								"id": 1816
							},
							"implementationOf": {
								"type": "reference",
								"name": "IOrderedDataFrame.asCSV",
								"id": 1406
							}
						},
						{
							"id": 2256,
							"name": "asJSON",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"signatures": [
								{
									"id": 2257,
									"name": "asJSON",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Treat the dataframe as JSON data for purposes of serialization.",
										"returns": "Returns an object that can serialize the dataframe in the JSON format. Call `writeFile` or `writeFileSync` to output the dataframe via different media.\n"
									},
									"type": {
										"type": "reference",
										"name": "IJsonSerializer",
										"id": 1842
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "DataFrame.asJSON",
										"id": 1818
									},
									"implementationOf": {
										"type": "reference",
										"name": "IOrderedDataFrame.asJSON",
										"id": 1409
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/dataframe.ts",
									"line": 3542,
									"character": 10
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "DataFrame.asJSON",
								"id": 1818
							},
							"implementationOf": {
								"type": "reference",
								"name": "IOrderedDataFrame.asJSON",
								"id": 1408
							}
						},
						{
							"id": 2041,
							"name": "at",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"signatures": [
								{
									"id": 2042,
									"name": "at",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Get the value at a specified index.",
										"returns": "Returns the value from the specified index in the sequence or undefined if there is no such index in the series.\n"
									},
									"parameters": [
										{
											"id": 2043,
											"name": "index",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Index to for which to retreive the value.\n"
											},
											"type": {
												"type": "typeParameter",
												"name": "IndexT"
											}
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "typeParameter",
												"name": "ValueT"
											},
											{
												"type": "intrinsic",
												"name": "undefined"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "DataFrame.at",
										"id": 1603
									},
									"implementationOf": {
										"type": "reference",
										"name": "IOrderedDataFrame.at",
										"id": 1203
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/dataframe.ts",
									"line": 2377,
									"character": 6
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "DataFrame.at",
								"id": 1603
							},
							"implementationOf": {
								"type": "reference",
								"name": "IOrderedDataFrame.at",
								"id": 1202
							}
						},
						{
							"id": 2100,
							"name": "bake",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"signatures": [
								{
									"id": 2101,
									"name": "bake",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Forces lazy evaluation to complete and 'bakes' the dataframe into memory.",
										"returns": "Returns a dataframe that has been 'baked', all lazy evaluation has completed.\n"
									},
									"type": {
										"type": "reference",
										"name": "IDataFrame",
										"id": 683,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "IndexT"
											},
											{
												"type": "typeParameter",
												"name": "ValueT"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "DataFrame.bake",
										"id": 1662
									},
									"implementationOf": {
										"type": "reference",
										"name": "IOrderedDataFrame.bake",
										"id": 1262
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/dataframe.ts",
									"line": 2819,
									"character": 8
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "DataFrame.bake",
								"id": 1662
							},
							"implementationOf": {
								"type": "reference",
								"name": "IOrderedDataFrame.bake",
								"id": 1261
							}
						},
						{
							"id": 2071,
							"name": "before",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"signatures": [
								{
									"id": 2072,
									"name": "before",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Get a new series containing all values up to the specified index value (exclusive).",
										"returns": "Returns a new series containing all values up to the specified inde value.\n"
									},
									"parameters": [
										{
											"id": 2073,
											"name": "indexValue",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The index value to search for before ending the new series.\n"
											},
											"type": {
												"type": "typeParameter",
												"name": "IndexT"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "IDataFrame",
										"id": 683,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "IndexT"
											},
											{
												"type": "typeParameter",
												"name": "ValueT"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "DataFrame.before",
										"id": 1633
									},
									"implementationOf": {
										"type": "reference",
										"name": "IOrderedDataFrame.before",
										"id": 1233
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/dataframe.ts",
									"line": 2621,
									"character": 10
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "DataFrame.before",
								"id": 1633
							},
							"implementationOf": {
								"type": "reference",
								"name": "IOrderedDataFrame.before",
								"id": 1232
							}
						},
						{
							"id": 2077,
							"name": "between",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"signatures": [
								{
									"id": 2078,
									"name": "between",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Get a new dataframe containing all values between the specified index values (inclusive).",
										"returns": "Returns a new dataframe containing all values between the specified index values (inclusive).\n"
									},
									"parameters": [
										{
											"id": 2079,
											"name": "startIndexValue",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The index where the new sequence starts."
											},
											"type": {
												"type": "typeParameter",
												"name": "IndexT"
											}
										},
										{
											"id": 2080,
											"name": "endIndexValue",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The index where the new sequence ends.\n"
											},
											"type": {
												"type": "typeParameter",
												"name": "IndexT"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "IDataFrame",
										"id": 683,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "IndexT"
											},
											{
												"type": "typeParameter",
												"name": "ValueT"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "DataFrame.between",
										"id": 1639
									},
									"implementationOf": {
										"type": "reference",
										"name": "IOrderedDataFrame.between",
										"id": 1239
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/dataframe.ts",
									"line": 2661,
									"character": 11
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "DataFrame.between",
								"id": 1639
							},
							"implementationOf": {
								"type": "reference",
								"name": "IOrderedDataFrame.between",
								"id": 1238
							}
						},
						{
							"id": 1948,
							"name": "bringToBack",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"signatures": [
								{
									"id": 1949,
									"name": "bringToBack",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Bring the name column (or columns) to the back, making it (or them) the last column(s) in the data-frame.",
										"returns": "Returns a new dataframe with 1 or more columns bought to the back of the column ordering.\n"
									},
									"parameters": [
										{
											"id": 1950,
											"name": "columnOrColumns",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Specifies the column or columns to bring to the back.\n"
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "array",
														"elementType": {
															"type": "intrinsic",
															"name": "string"
														}
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "IDataFrame",
										"id": 683,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "IndexT"
											},
											{
												"type": "typeParameter",
												"name": "ValueT"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "DataFrame.bringToBack",
										"id": 1510
									},
									"implementationOf": {
										"type": "reference",
										"name": "IOrderedDataFrame.bringToBack",
										"id": 1110
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/dataframe.ts",
									"line": 1759,
									"character": 15
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "DataFrame.bringToBack",
								"id": 1510
							},
							"implementationOf": {
								"type": "reference",
								"name": "IOrderedDataFrame.bringToBack",
								"id": 1109
							}
						},
						{
							"id": 1945,
							"name": "bringToFront",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"signatures": [
								{
									"id": 1946,
									"name": "bringToFront",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Bring the name column (or columns) to the front, making it (or them) the first column(s) in the data-frame.",
										"returns": "Returns a new dataframe with 1 or more columns bought to the front of the column ordering.\n"
									},
									"parameters": [
										{
											"id": 1947,
											"name": "columnOrColumns",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Specifies the column or columns to bring to the front.\n"
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "array",
														"elementType": {
															"type": "intrinsic",
															"name": "string"
														}
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "IDataFrame",
										"id": 683,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "IndexT"
											},
											{
												"type": "typeParameter",
												"name": "ValueT"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "DataFrame.bringToFront",
										"id": 1507
									},
									"implementationOf": {
										"type": "reference",
										"name": "IOrderedDataFrame.bringToFront",
										"id": 1107
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/dataframe.ts",
									"line": 1712,
									"character": 16
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "DataFrame.bringToFront",
								"id": 1507
							},
							"implementationOf": {
								"type": "reference",
								"name": "IOrderedDataFrame.bringToFront",
								"id": 1106
							}
						},
						{
							"id": 2121,
							"name": "concat",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"signatures": [
								{
									"id": 2122,
									"name": "concat",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Concatenate multiple other dataframes onto this dataframe.",
										"returns": "Returns a single dataframes concatenated from multiple input dataframes.\n"
									},
									"parameters": [
										{
											"id": 2123,
											"name": "dataframes",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isRest": true
											},
											"comment": {
												"text": "Multiple arguments. Each can be either a dataframe or an array of dataframes.\n"
											},
											"type": {
												"type": "array",
												"elementType": {
													"type": "union",
													"types": [
														{
															"type": "reference",
															"name": "IDataFrame",
															"id": 683,
															"typeArguments": [
																{
																	"type": "unknown",
																	"name": "IndexT"
																},
																{
																	"type": "unknown",
																	"name": "ValueT"
																}
															]
														},
														{
															"type": "array",
															"elementType": {
																"type": "reference",
																"name": "IDataFrame",
																"id": 683,
																"typeArguments": [
																	{
																		"type": "unknown",
																		"name": "IndexT"
																	},
																	{
																		"type": "unknown",
																		"name": "ValueT"
																	}
																]
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "IDataFrame",
										"id": 683,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "IndexT"
											},
											{
												"type": "typeParameter",
												"name": "ValueT"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "DataFrame.concat",
										"id": 1683
									},
									"implementationOf": {
										"type": "reference",
										"name": "IOrderedDataFrame.concat",
										"id": 1278
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/dataframe.ts",
									"line": 2964,
									"character": 10
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "DataFrame.concat",
								"id": 1683
							},
							"implementationOf": {
								"type": "reference",
								"name": "IOrderedDataFrame.concat",
								"id": 1277
							}
						},
						{
							"id": 2035,
							"name": "count",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"signatures": [
								{
									"id": 2036,
									"name": "count",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Count the number of values in the series.",
										"returns": "Returns the count of all values in the series.\n"
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "DataFrame.count",
										"id": 1597
									},
									"implementationOf": {
										"type": "reference",
										"name": "IOrderedDataFrame.count",
										"id": 1197
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/dataframe.ts",
									"line": 2327,
									"character": 9
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "DataFrame.count",
								"id": 1597
							},
							"implementationOf": {
								"type": "reference",
								"name": "IOrderedDataFrame.count",
								"id": 1196
							}
						},
						{
							"id": 2243,
							"name": "defaultIfEmpty",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"signatures": [
								{
									"id": 2244,
									"name": "defaultIfEmpty",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Returns the specified default sequence if the dataframe is empty.",
										"returns": "Returns 'defaultSequence' if the dataframe is empty.\n"
									},
									"parameters": [
										{
											"id": 2245,
											"name": "defaultSequence",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Default sequence to return if the dataframe is empty.\n"
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "array",
														"elementType": {
															"type": "typeParameter",
															"name": "ValueT"
														}
													},
													{
														"type": "reference",
														"name": "IDataFrame",
														"id": 683,
														"typeArguments": [
															{
																"type": "typeParameter",
																"name": "IndexT"
															},
															{
																"type": "typeParameter",
																"name": "ValueT"
															}
														]
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "IDataFrame",
										"id": 683,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "IndexT"
											},
											{
												"type": "typeParameter",
												"name": "ValueT"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "DataFrame.defaultIfEmpty",
										"id": 1805
									},
									"implementationOf": {
										"type": "reference",
										"name": "IOrderedDataFrame.defaultIfEmpty",
										"id": 1396
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/dataframe.ts",
									"line": 3444,
									"character": 18
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "DataFrame.defaultIfEmpty",
								"id": 1805
							},
							"implementationOf": {
								"type": "reference",
								"name": "IOrderedDataFrame.defaultIfEmpty",
								"id": 1395
							}
						},
						{
							"id": 1990,
							"name": "deflate",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"signatures": [
								{
									"id": 1991,
									"name": "deflate",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Deflate a data-frame to a series.",
										"returns": "Returns a series that was created from the input dataframe.\n"
									},
									"typeParameter": [
										{
											"id": 1992,
											"name": "ToT",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										}
									],
									"parameters": [
										{
											"id": 1993,
											"name": "selector",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "reference",
												"name": "SelectorWithIndexFn",
												"id": 3569,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "ValueT"
													},
													{
														"type": "typeParameter",
														"name": "ToT"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "ISeries",
										"id": 2287,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "IndexT"
											},
											{
												"type": "typeParameter",
												"name": "ToT"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "DataFrame.deflate",
										"id": 1552
									},
									"implementationOf": {
										"type": "reference",
										"name": "IOrderedDataFrame.deflate",
										"id": 1152
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/dataframe.ts",
									"line": 2044,
									"character": 11
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "DataFrame.deflate",
								"id": 1552
							},
							"implementationOf": {
								"type": "reference",
								"name": "IOrderedDataFrame.deflate",
								"id": 1151
							}
						},
						{
							"id": 2246,
							"name": "detectTypes",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"signatures": [
								{
									"id": 2247,
									"name": "detectTypes",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Detect the the frequency of the types of the values in the dataframe.",
										"returns": "Returns a dataframe that describes the data types contained in the dataframe.\n"
									},
									"type": {
										"type": "reference",
										"name": "IDataFrame",
										"id": 683,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "number"
											},
											{
												"type": "reference",
												"name": "ITypeFrequency",
												"id": 675
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "DataFrame.detectTypes",
										"id": 1808
									},
									"implementationOf": {
										"type": "reference",
										"name": "IOrderedDataFrame.detectTypes",
										"id": 1399
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/dataframe.ts",
									"line": 3467,
									"character": 15
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "DataFrame.detectTypes",
								"id": 1808
							},
							"implementationOf": {
								"type": "reference",
								"name": "IOrderedDataFrame.detectTypes",
								"id": 1398
							}
						},
						{
							"id": 2248,
							"name": "detectValues",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"signatures": [
								{
									"id": 2249,
									"name": "detectValues",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Detect the frequency of the values in the dataframe.",
										"returns": "Returns a dataframe that describes the values contained in the dataframe.\n"
									},
									"type": {
										"type": "reference",
										"name": "IDataFrame",
										"id": 683,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "number"
											},
											{
												"type": "reference",
												"name": "IValueFrequency",
												"id": 679
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "DataFrame.detectValues",
										"id": 1810
									},
									"implementationOf": {
										"type": "reference",
										"name": "IOrderedDataFrame.detectValues",
										"id": 1401
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/dataframe.ts",
									"line": 3490,
									"character": 16
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "DataFrame.detectValues",
								"id": 1810
							},
							"implementationOf": {
								"type": "reference",
								"name": "IOrderedDataFrame.detectValues",
								"id": 1400
							}
						},
						{
							"id": 2104,
							"name": "distinct",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"signatures": [
								{
									"id": 2105,
									"name": "distinct",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Returns only values in the dataframe that are distinct.",
										"returns": "Returns a dataframe containing only unique values as determined by the 'selector' function.\n"
									},
									"typeParameter": [
										{
											"id": 2106,
											"name": "ToT",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										}
									],
									"parameters": [
										{
											"id": 2107,
											"name": "selector",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"text": "Selects the value used to compare for duplicates.\n"
											},
											"type": {
												"type": "reference",
												"name": "SelectorFn",
												"id": 66,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "ValueT"
													},
													{
														"type": "typeParameter",
														"name": "ToT"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "IDataFrame",
										"id": 683,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "IndexT"
											},
											{
												"type": "typeParameter",
												"name": "ValueT"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "DataFrame.distinct",
										"id": 1666
									},
									"implementationOf": {
										"type": "reference",
										"name": "IOrderedDataFrame.distinct",
										"id": 1266
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/dataframe.ts",
									"line": 2858,
									"character": 12
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "DataFrame.distinct",
								"id": 1666
							},
							"implementationOf": {
								"type": "reference",
								"name": "IOrderedDataFrame.distinct",
								"id": 1265
							}
						},
						{
							"id": 1937,
							"name": "dropSeries",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"signatures": [
								{
									"id": 1938,
									"name": "dropSeries",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Create a new data frame with the requested column or columns dropped.",
										"returns": "Returns a new dataframe with a particular name column or columns removed.\n"
									},
									"typeParameter": [
										{
											"id": 1939,
											"name": "NewValueT",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										}
									],
									"parameters": [
										{
											"id": 1940,
											"name": "columnOrColumns",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Specifies the column name (a string) or columns (array of column names) to drop.\n"
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "array",
														"elementType": {
															"type": "intrinsic",
															"name": "string"
														}
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "IDataFrame",
										"id": 683,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "IndexT"
											},
											{
												"type": "typeParameter",
												"name": "NewValueT"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "DataFrame.dropSeries",
										"id": 1499
									},
									"implementationOf": {
										"type": "reference",
										"name": "IOrderedDataFrame.dropSeries",
										"id": 1099
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/dataframe.ts",
									"line": 1625,
									"character": 14
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "DataFrame.dropSeries",
								"id": 1499
							},
							"implementationOf": {
								"type": "reference",
								"name": "IOrderedDataFrame.dropSeries",
								"id": 1098
							}
						},
						{
							"id": 2068,
							"name": "endAt",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"signatures": [
								{
									"id": 2069,
									"name": "endAt",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Get a new series containing all values up until and including the specified index value (inclusive).",
										"returns": "Returns a new series containing all values up until and including the specified index value.\n"
									},
									"parameters": [
										{
											"id": 2070,
											"name": "indexValue",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The index value to search for before ending the new series.\n"
											},
											"type": {
												"type": "typeParameter",
												"name": "IndexT"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "IDataFrame",
										"id": 683,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "IndexT"
											},
											{
												"type": "typeParameter",
												"name": "ValueT"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "DataFrame.endAt",
										"id": 1630
									},
									"implementationOf": {
										"type": "reference",
										"name": "IOrderedDataFrame.endAt",
										"id": 1230
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/dataframe.ts",
									"line": 2601,
									"character": 9
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "DataFrame.endAt",
								"id": 1630
							},
							"implementationOf": {
								"type": "reference",
								"name": "IOrderedDataFrame.endAt",
								"id": 1229
							}
						},
						{
							"id": 1928,
							"name": "ensureSeries",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"signatures": [
								{
									"id": 1929,
									"name": "ensureSeries",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Add a series if it doesn't already exist.",
										"returns": "Returns a new dataframe with the specified series added, if the series didn't already exist. Otherwise if the requested series already exists the same dataframe is returned.\n"
									},
									"typeParameter": [
										{
											"id": 1930,
											"name": "SeriesValueT",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										}
									],
									"parameters": [
										{
											"id": 1931,
											"name": "columnNameOrSpec",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The name of the series to add or a column spec that defines the new column."
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "reference",
														"name": "IColumnGenSpec",
														"id": 663
													}
												]
											}
										},
										{
											"id": 1932,
											"name": "series",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"text": "The series to add to the dataframe. Can also be a function that returns the series.\n"
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "reference",
														"name": "ISeries",
														"id": 2287,
														"typeArguments": [
															{
																"type": "typeParameter",
																"name": "IndexT"
															},
															{
																"type": "typeParameter",
																"name": "SeriesValueT"
															}
														]
													},
													{
														"type": "reference",
														"name": "SeriesSelectorFn",
														"id": 2261,
														"typeArguments": [
															{
																"type": "typeParameter",
																"name": "IndexT"
															},
															{
																"type": "typeParameter",
																"name": "ValueT"
															},
															{
																"type": "typeParameter",
																"name": "SeriesValueT"
															}
														]
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "IDataFrame",
										"id": 683,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "IndexT"
											},
											{
												"type": "typeParameter",
												"name": "ValueT"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "DataFrame.ensureSeries",
										"id": 1490
									},
									"implementationOf": {
										"type": "reference",
										"name": "IOrderedDataFrame.ensureSeries",
										"id": 1090
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/dataframe.ts",
									"line": 1552,
									"character": 16
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "DataFrame.ensureSeries",
								"id": 1490
							},
							"implementationOf": {
								"type": "reference",
								"name": "IOrderedDataFrame.ensureSeries",
								"id": 1089
							}
						},
						{
							"id": 2180,
							"name": "except",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"signatures": [
								{
									"id": 2181,
									"name": "except",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Returns the exception of values between two dataframes.",
										"returns": "Returns the difference between the two series.\n"
									},
									"typeParameter": [
										{
											"id": 2182,
											"name": "InnerIndexT",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										},
										{
											"id": 2183,
											"name": "InnerValueT",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										},
										{
											"id": 2184,
											"name": "KeyT",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										}
									],
									"parameters": [
										{
											"id": 2185,
											"name": "inner",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The other dataframe to combine."
											},
											"type": {
												"type": "reference",
												"name": "IDataFrame",
												"id": 683,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "InnerIndexT"
													},
													{
														"type": "typeParameter",
														"name": "InnerValueT"
													}
												]
											}
										},
										{
											"id": 2186,
											"name": "outerSelector",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "reference",
												"name": "SelectorFn",
												"id": 66,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "ValueT"
													},
													{
														"type": "typeParameter",
														"name": "KeyT"
													}
												]
											}
										},
										{
											"id": 2187,
											"name": "innerSelector",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "reference",
												"name": "SelectorFn",
												"id": 66,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "InnerValueT"
													},
													{
														"type": "typeParameter",
														"name": "KeyT"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "IDataFrame",
										"id": 683,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "IndexT"
											},
											{
												"type": "typeParameter",
												"name": "ValueT"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "DataFrame.except",
										"id": 1742
									},
									"implementationOf": {
										"type": "reference",
										"name": "IOrderedDataFrame.except",
										"id": 1333
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/dataframe.ts",
									"line": 3124,
									"character": 10
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "DataFrame.except",
								"id": 1742
							},
							"implementationOf": {
								"type": "reference",
								"name": "IOrderedDataFrame.except",
								"id": 1332
							}
						},
						{
							"id": 1919,
							"name": "expectSeries",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"signatures": [
								{
									"id": 1920,
									"name": "expectSeries",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Verify the existance of a column and return it.\nThrows an exception if the column doesn't exist."
									},
									"typeParameter": [
										{
											"id": 1921,
											"name": "SeriesValueT",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										}
									],
									"parameters": [
										{
											"id": 1922,
											"name": "columnName",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Name or index of the column to retreive.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "ISeries",
										"id": 2287,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "IndexT"
											},
											{
												"type": "typeParameter",
												"name": "SeriesValueT"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "DataFrame.expectSeries",
										"id": 1481
									},
									"implementationOf": {
										"type": "reference",
										"name": "IOrderedDataFrame.expectSeries",
										"id": 1081
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/dataframe.ts",
									"line": 1455,
									"character": 16
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "DataFrame.expectSeries",
								"id": 1481
							},
							"implementationOf": {
								"type": "reference",
								"name": "IOrderedDataFrame.expectSeries",
								"id": 1080
							}
						},
						{
							"id": 2239,
							"name": "fillGaps",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"signatures": [
								{
									"id": 2240,
									"name": "fillGaps",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Fill gaps in a dataframe.",
										"returns": "Returns a new dataframe with gaps filled in.\n"
									},
									"parameters": [
										{
											"id": 2241,
											"name": "comparer",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Comparer that is passed pairA and pairB, two consecutive rows, return truthy if there is a gap between the rows, or falsey if there is no gap."
											},
											"type": {
												"type": "reference",
												"name": "ComparerFn",
												"id": 371,
												"typeArguments": [
													{
														"type": "tuple",
														"elements": [
															{
																"type": "typeParameter",
																"name": "IndexT"
															},
															{
																"type": "typeParameter",
																"name": "ValueT"
															}
														]
													},
													{
														"type": "tuple",
														"elements": [
															{
																"type": "typeParameter",
																"name": "IndexT"
															},
															{
																"type": "typeParameter",
																"name": "ValueT"
															}
														]
													}
												]
											}
										},
										{
											"id": 2242,
											"name": "generator",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Generator that is passed pairA and pairB, two consecutive rows, returns an array of pairs that fills the gap between the rows.\n"
											},
											"type": {
												"type": "reference",
												"name": "GapFillFn",
												"id": 3663,
												"typeArguments": [
													{
														"type": "tuple",
														"elements": [
															{
																"type": "typeParameter",
																"name": "IndexT"
															},
															{
																"type": "typeParameter",
																"name": "ValueT"
															}
														]
													},
													{
														"type": "tuple",
														"elements": [
															{
																"type": "typeParameter",
																"name": "IndexT"
															},
															{
																"type": "typeParameter",
																"name": "ValueT"
															}
														]
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "IDataFrame",
										"id": 683,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "IndexT"
											},
											{
												"type": "typeParameter",
												"name": "ValueT"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "DataFrame.fillGaps",
										"id": 1801
									},
									"implementationOf": {
										"type": "reference",
										"name": "IOrderedDataFrame.fillGaps",
										"id": 1392
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/dataframe.ts",
									"line": 3414,
									"character": 12
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "DataFrame.fillGaps",
								"id": 1801
							},
							"implementationOf": {
								"type": "reference",
								"name": "IOrderedDataFrame.fillGaps",
								"id": 1391
							}
						},
						{
							"id": 2037,
							"name": "first",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"signatures": [
								{
									"id": 2038,
									"name": "first",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Get the first value of the series.",
										"returns": "Returns the first value of the series.\n"
									},
									"type": {
										"type": "typeParameter",
										"name": "ValueT"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "DataFrame.first",
										"id": 1599
									},
									"implementationOf": {
										"type": "reference",
										"name": "IOrderedDataFrame.first",
										"id": 1199
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/dataframe.ts",
									"line": 2341,
									"character": 9
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "DataFrame.first",
								"id": 1599
							},
							"implementationOf": {
								"type": "reference",
								"name": "IOrderedDataFrame.first",
								"id": 1198
							}
						},
						{
							"id": 2053,
							"name": "forEach",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"signatures": [
								{
									"id": 2054,
									"name": "forEach",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Invoke a callback function for each value in the series.",
										"returns": "Returns the input series with no modifications.\n"
									},
									"parameters": [
										{
											"id": 2055,
											"name": "callback",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The calback to invoke for each value.\n"
											},
											"type": {
												"type": "reference",
												"name": "CallbackFn",
												"id": 3563,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "ValueT"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "IDataFrame",
										"id": 683,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "IndexT"
											},
											{
												"type": "typeParameter",
												"name": "ValueT"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "DataFrame.forEach",
										"id": 1615
									},
									"implementationOf": {
										"type": "reference",
										"name": "IOrderedDataFrame.forEach",
										"id": 1215
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/dataframe.ts",
									"line": 2465,
									"character": 11
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "DataFrame.forEach",
								"id": 1615
							},
							"implementationOf": {
								"type": "reference",
								"name": "IOrderedDataFrame.forEach",
								"id": 1214
							}
						},
						{
							"id": 1986,
							"name": "generateSeries",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"signatures": [
								{
									"id": 1987,
									"name": "generateSeries",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Generate new columns based on existing rows.",
										"returns": "Returns a new dataframe with 1 or more new columns.\n"
									},
									"typeParameter": [
										{
											"id": 1988,
											"name": "NewValueT",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										}
									],
									"parameters": [
										{
											"id": 1989,
											"name": "generator",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Generator function that transforms each row to a new set of columns.\n"
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "reference",
														"name": "SelectorWithIndexFn",
														"id": 3569,
														"typeArguments": [
															{
																"type": "intrinsic",
																"name": "any"
															},
															{
																"type": "intrinsic",
																"name": "any"
															}
														]
													},
													{
														"type": "reference",
														"name": "IColumnTransformSpec",
														"id": 669
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "IDataFrame",
										"id": 683,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "IndexT"
											},
											{
												"type": "typeParameter",
												"name": "NewValueT"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "DataFrame.generateSeries",
										"id": 1548
									},
									"implementationOf": {
										"type": "reference",
										"name": "IOrderedDataFrame.generateSeries",
										"id": 1148
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/dataframe.ts",
									"line": 2004,
									"character": 18
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "DataFrame.generateSeries",
								"id": 1548
							},
							"implementationOf": {
								"type": "reference",
								"name": "IOrderedDataFrame.generateSeries",
								"id": 1147
							}
						},
						{
							"id": 1896,
							"name": "getColumnNames",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"signatures": [
								{
									"id": 1897,
									"name": "getColumnNames",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Get the names of the columns in the dataframe.",
										"returns": "Returns an array of the column names in the dataframe.\n"
									},
									"type": {
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "string"
										}
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "DataFrame.getColumnNames",
										"id": 1458
									},
									"implementationOf": {
										"type": "reference",
										"name": "IOrderedDataFrame.getColumnNames",
										"id": 1058
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/dataframe.ts",
									"line": 1322,
									"character": 18
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "DataFrame.getColumnNames",
								"id": 1458
							},
							"implementationOf": {
								"type": "reference",
								"name": "IOrderedDataFrame.getColumnNames",
								"id": 1057
							}
						},
						{
							"id": 1898,
							"name": "getColumns",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"signatures": [
								{
									"id": 1899,
									"name": "getColumns",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Retreive a collection of all columns in the dataframe.",
										"returns": "Returns a series the columns in the dataframe.\n"
									},
									"type": {
										"type": "reference",
										"name": "ISeries",
										"id": 2287,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "number"
											},
											{
												"type": "reference",
												"name": "IColumn",
												"id": 660
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "DataFrame.getColumns",
										"id": 1460
									},
									"implementationOf": {
										"type": "reference",
										"name": "IOrderedDataFrame.getColumns",
										"id": 1060
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/dataframe.ts",
									"line": 1331,
									"character": 14
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "DataFrame.getColumns",
								"id": 1460
							},
							"implementationOf": {
								"type": "reference",
								"name": "IOrderedDataFrame.getColumns",
								"id": 1059
							}
						},
						{
							"id": 1900,
							"name": "getIndex",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"signatures": [
								{
									"id": 1901,
									"name": "getIndex",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Get the index for the dataframe."
									},
									"type": {
										"type": "reference",
										"name": "IIndex",
										"id": 3671,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "IndexT"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "DataFrame.getIndex",
										"id": 1462
									},
									"implementationOf": {
										"type": "reference",
										"name": "IOrderedDataFrame.getIndex",
										"id": 1062
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/dataframe.ts",
									"line": 1348,
									"character": 12
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "DataFrame.getIndex",
								"id": 1462
							},
							"implementationOf": {
								"type": "reference",
								"name": "IOrderedDataFrame.getIndex",
								"id": 1061
							}
						},
						{
							"id": 1912,
							"name": "getSeries",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"signatures": [
								{
									"id": 1913,
									"name": "getSeries",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Retreive a series from a column of the dataframe."
									},
									"typeParameter": [
										{
											"id": 1914,
											"name": "SeriesValueT",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										}
									],
									"parameters": [
										{
											"id": 1915,
											"name": "columnName",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Specifies the name of the column that contains the series to retreive.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "ISeries",
										"id": 2287,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "IndexT"
											},
											{
												"type": "typeParameter",
												"name": "SeriesValueT"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "DataFrame.getSeries",
										"id": 1474
									},
									"implementationOf": {
										"type": "reference",
										"name": "IOrderedDataFrame.getSeries",
										"id": 1074
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/dataframe.ts",
									"line": 1419,
									"character": 13
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "DataFrame.getSeries",
								"id": 1474
							},
							"implementationOf": {
								"type": "reference",
								"name": "IOrderedDataFrame.getSeries",
								"id": 1073
							}
						},
						{
							"id": 2108,
							"name": "groupBy",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"signatures": [
								{
									"id": 2109,
									"name": "groupBy",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Groups the dataframe according to the selector.",
										"returns": "Returns a series of groups. Each group is a series with values that have been grouped by the 'selector' function.\n"
									},
									"typeParameter": [
										{
											"id": 2110,
											"name": "GroupT",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										}
									],
									"parameters": [
										{
											"id": 2111,
											"name": "selector",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Selector that defines the value to group by.\n"
											},
											"type": {
												"type": "reference",
												"name": "SelectorWithIndexFn",
												"id": 3569,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "ValueT"
													},
													{
														"type": "typeParameter",
														"name": "GroupT"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "ISeries",
										"id": 2287,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "number"
											},
											{
												"type": "reference",
												"name": "IDataFrame",
												"id": 683,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "IndexT"
													},
													{
														"type": "typeParameter",
														"name": "ValueT"
													}
												]
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "DataFrame.groupBy",
										"id": 1670
									},
									"implementationOf": {
										"type": "reference",
										"name": "IOrderedDataFrame.groupBy",
										"id": 1270
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/dataframe.ts",
									"line": 2876,
									"character": 11
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "DataFrame.groupBy",
								"id": 1670
							},
							"implementationOf": {
								"type": "reference",
								"name": "IOrderedDataFrame.groupBy",
								"id": 1269
							}
						},
						{
							"id": 2112,
							"name": "groupSequentialBy",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"signatures": [
								{
									"id": 2113,
									"name": "groupSequentialBy",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Group sequential values into a series of windows.",
										"returns": "Returns a series of groups. Each group is a dataframe with values that have been grouped by the 'selector' function.\n"
									},
									"typeParameter": [
										{
											"id": 2114,
											"name": "GroupT",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										}
									],
									"parameters": [
										{
											"id": 2115,
											"name": "selector",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"text": "Optional selector that defines the value to group by.\n"
											},
											"type": {
												"type": "reference",
												"name": "SelectorFn",
												"id": 66,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "ValueT"
													},
													{
														"type": "typeParameter",
														"name": "GroupT"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "ISeries",
										"id": 2287,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "number"
											},
											{
												"type": "reference",
												"name": "IDataFrame",
												"id": 683,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "IndexT"
													},
													{
														"type": "typeParameter",
														"name": "ValueT"
													}
												]
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "DataFrame.groupSequentialBy",
										"id": 1674
									},
									"implementationOf": {
										"type": "reference",
										"name": "IOrderedDataFrame.groupSequentialBy",
										"id": 1274
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/dataframe.ts",
									"line": 2914,
									"character": 21
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "DataFrame.groupSequentialBy",
								"id": 1674
							},
							"implementationOf": {
								"type": "reference",
								"name": "IOrderedDataFrame.groupSequentialBy",
								"id": 1273
							}
						},
						{
							"id": 1916,
							"name": "hasSeries",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"signatures": [
								{
									"id": 1917,
									"name": "hasSeries",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Returns true if the column with the requested name exists in the dataframe."
									},
									"parameters": [
										{
											"id": 1918,
											"name": "columnName",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Name of the column to check.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "DataFrame.hasSeries",
										"id": 1478
									},
									"implementationOf": {
										"type": "reference",
										"name": "IOrderedDataFrame.hasSeries",
										"id": 1078
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/dataframe.ts",
									"line": 1437,
									"character": 13
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "DataFrame.hasSeries",
								"id": 1478
							},
							"implementationOf": {
								"type": "reference",
								"name": "IOrderedDataFrame.hasSeries",
								"id": 1077
							}
						},
						{
							"id": 2044,
							"name": "head",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"signatures": [
								{
									"id": 2045,
									"name": "head",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Get X values from the start of the dataframe.\nPass in a negative value to get all items at the head except X values at the tail.",
										"returns": "Returns a new dataframe that has only the specified number of values taken from the start of the input sequence.\n"
									},
									"parameters": [
										{
											"id": 2046,
											"name": "numValues",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Number of values to take.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "IDataFrame",
										"id": 683,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "IndexT"
											},
											{
												"type": "typeParameter",
												"name": "ValueT"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "DataFrame.head",
										"id": 1606
									},
									"implementationOf": {
										"type": "reference",
										"name": "IOrderedDataFrame.head",
										"id": 1206
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/dataframe.ts",
									"line": 2405,
									"character": 8
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "DataFrame.head",
								"id": 1606
							},
							"implementationOf": {
								"type": "reference",
								"name": "IOrderedDataFrame.head",
								"id": 1205
							}
						},
						{
							"id": 1994,
							"name": "inflateSeries",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"signatures": [
								{
									"id": 1995,
									"name": "inflateSeries",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Inflate a named series in the data-frame to 1 or more new series in the new dataframe.",
										"returns": "Returns a new dataframe with a column inflated to 1 or more new columns.\n"
									},
									"typeParameter": [
										{
											"id": 1996,
											"name": "NewValueT",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										}
									],
									"parameters": [
										{
											"id": 1997,
											"name": "columnName",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Name or index of the column to retreive."
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 1998,
											"name": "selector",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "reference",
												"name": "SelectorWithIndexFn",
												"id": 3569,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "IndexT"
													},
													{
														"type": "intrinsic",
														"name": "any"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "IDataFrame",
										"id": 683,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "IndexT"
											},
											{
												"type": "typeParameter",
												"name": "ValueT"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "DataFrame.inflateSeries",
										"id": 1556
									},
									"implementationOf": {
										"type": "reference",
										"name": "IOrderedDataFrame.inflateSeries",
										"id": 1156
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/dataframe.ts",
									"line": 2082,
									"character": 17
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "DataFrame.inflateSeries",
								"id": 1556
							},
							"implementationOf": {
								"type": "reference",
								"name": "IOrderedDataFrame.inflateSeries",
								"id": 1155
							}
						},
						{
							"id": 2233,
							"name": "insertPair",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"signatures": [
								{
									"id": 2234,
									"name": "insertPair",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Insert a pair at the start of the dataframe.",
										"returns": "Returns a new dataframe with the specified pair inserted.\n"
									},
									"parameters": [
										{
											"id": 2235,
											"name": "pair",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The pair to insert.\n"
											},
											"type": {
												"type": "tuple",
												"elements": [
													{
														"type": "typeParameter",
														"name": "IndexT"
													},
													{
														"type": "typeParameter",
														"name": "ValueT"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "IDataFrame",
										"id": 683,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "IndexT"
											},
											{
												"type": "typeParameter",
												"name": "ValueT"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "DataFrame.insertPair",
										"id": 1795
									},
									"implementationOf": {
										"type": "reference",
										"name": "IOrderedDataFrame.insertPair",
										"id": 1386
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/dataframe.ts",
									"line": 3385,
									"character": 14
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "DataFrame.insertPair",
								"id": 1795
							},
							"implementationOf": {
								"type": "reference",
								"name": "IOrderedDataFrame.insertPair",
								"id": 1385
							}
						},
						{
							"id": 2172,
							"name": "intersection",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"signatures": [
								{
									"id": 2173,
									"name": "intersection",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Returns the intersection of values between two dataframes.",
										"returns": "Returns the intersection of two series.\n"
									},
									"typeParameter": [
										{
											"id": 2174,
											"name": "InnerIndexT",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										},
										{
											"id": 2175,
											"name": "InnerValueT",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										},
										{
											"id": 2176,
											"name": "KeyT",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										}
									],
									"parameters": [
										{
											"id": 2177,
											"name": "inner",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The other dataframe to combine."
											},
											"type": {
												"type": "reference",
												"name": "IDataFrame",
												"id": 683,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "InnerIndexT"
													},
													{
														"type": "typeParameter",
														"name": "InnerValueT"
													}
												]
											}
										},
										{
											"id": 2178,
											"name": "outerSelector",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "reference",
												"name": "SelectorFn",
												"id": 66,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "ValueT"
													},
													{
														"type": "typeParameter",
														"name": "KeyT"
													}
												]
											}
										},
										{
											"id": 2179,
											"name": "innerSelector",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "reference",
												"name": "SelectorFn",
												"id": 66,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "InnerValueT"
													},
													{
														"type": "typeParameter",
														"name": "KeyT"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "IDataFrame",
										"id": 683,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "IndexT"
											},
											{
												"type": "typeParameter",
												"name": "ValueT"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "DataFrame.intersection",
										"id": 1734
									},
									"implementationOf": {
										"type": "reference",
										"name": "IOrderedDataFrame.intersection",
										"id": 1325
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/dataframe.ts",
									"line": 3086,
									"character": 16
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "DataFrame.intersection",
								"id": 1734
							},
							"implementationOf": {
								"type": "reference",
								"name": "IOrderedDataFrame.intersection",
								"id": 1324
							}
						},
						{
							"id": 2188,
							"name": "join",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"signatures": [
								{
									"id": 2189,
									"name": "join",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Correlates the elements of two dataframes on matching keys.",
										"returns": "Returns the joined dataframe.\n"
									},
									"typeParameter": [
										{
											"id": 2190,
											"name": "KeyT",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										},
										{
											"id": 2191,
											"name": "InnerIndexT",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										},
										{
											"id": 2192,
											"name": "InnerValueT",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										},
										{
											"id": 2193,
											"name": "ResultValueT",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										}
									],
									"parameters": [
										{
											"id": 2194,
											"name": "inner",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The inner dataframe to join."
											},
											"type": {
												"type": "reference",
												"name": "IDataFrame",
												"id": 683,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "InnerIndexT"
													},
													{
														"type": "typeParameter",
														"name": "InnerValueT"
													}
												]
											}
										},
										{
											"id": 2195,
											"name": "outerKeySelector",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Selector that chooses the join key from the outer sequence."
											},
											"type": {
												"type": "reference",
												"name": "SelectorFn",
												"id": 66,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "ValueT"
													},
													{
														"type": "typeParameter",
														"name": "KeyT"
													}
												]
											}
										},
										{
											"id": 2196,
											"name": "innerKeySelector",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Selector that chooses the join key from the inner sequence."
											},
											"type": {
												"type": "reference",
												"name": "SelectorFn",
												"id": 66,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "InnerValueT"
													},
													{
														"type": "typeParameter",
														"name": "KeyT"
													}
												]
											}
										},
										{
											"id": 2197,
											"name": "resultSelector",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Selector that defines how to merge outer and inner values.\n"
											},
											"type": {
												"type": "reference",
												"name": "JoinFn",
												"id": 3631,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "ValueT"
													},
													{
														"type": "typeParameter",
														"name": "InnerValueT"
													},
													{
														"type": "typeParameter",
														"name": "ResultValueT"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "IDataFrame",
										"id": 683,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "number"
											},
											{
												"type": "typeParameter",
												"name": "ResultValueT"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "DataFrame.join",
										"id": 1750
									},
									"implementationOf": {
										"type": "reference",
										"name": "IOrderedDataFrame.join",
										"id": 1341
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/dataframe.ts",
									"line": 3164,
									"character": 8
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "DataFrame.join",
								"id": 1750
							},
							"implementationOf": {
								"type": "reference",
								"name": "IOrderedDataFrame.join",
								"id": 1340
							}
						},
						{
							"id": 2198,
							"name": "joinOuter",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"signatures": [
								{
									"id": 2199,
									"name": "joinOuter",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Performs an outer join on two series. Correlates the elements based on matching keys.\nIncludes elements from both series that have no correlation in the other series.",
										"returns": "Returns the joined series.\n"
									},
									"typeParameter": [
										{
											"id": 2200,
											"name": "KeyT",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										},
										{
											"id": 2201,
											"name": "InnerIndexT",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										},
										{
											"id": 2202,
											"name": "InnerValueT",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										},
										{
											"id": 2203,
											"name": "ResultValueT",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										}
									],
									"parameters": [
										{
											"id": 2204,
											"name": "inner",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The inner series to join."
											},
											"type": {
												"type": "reference",
												"name": "IDataFrame",
												"id": 683,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "InnerIndexT"
													},
													{
														"type": "typeParameter",
														"name": "InnerValueT"
													}
												]
											}
										},
										{
											"id": 2205,
											"name": "outerKeySelector",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Selector that chooses the join key from the outer sequence."
											},
											"type": {
												"type": "reference",
												"name": "SelectorFn",
												"id": 66,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "ValueT"
													},
													{
														"type": "typeParameter",
														"name": "KeyT"
													}
												]
											}
										},
										{
											"id": 2206,
											"name": "innerKeySelector",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Selector that chooses the join key from the inner sequence."
											},
											"type": {
												"type": "reference",
												"name": "SelectorFn",
												"id": 66,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "InnerValueT"
													},
													{
														"type": "typeParameter",
														"name": "KeyT"
													}
												]
											}
										},
										{
											"id": 2207,
											"name": "resultSelector",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Selector that defines how to merge outer and inner values.\n\nImplementation from here:\n\n\thttp://blogs.geniuscode.net/RyanDHatch/?p=116\n"
											},
											"type": {
												"type": "reference",
												"name": "JoinFn",
												"id": 3631,
												"typeArguments": [
													{
														"type": "union",
														"types": [
															{
																"type": "typeParameter",
																"name": "ValueT"
															},
															{
																"type": "intrinsic",
																"name": "null"
															}
														]
													},
													{
														"type": "union",
														"types": [
															{
																"type": "typeParameter",
																"name": "InnerValueT"
															},
															{
																"type": "intrinsic",
																"name": "null"
															}
														]
													},
													{
														"type": "typeParameter",
														"name": "ResultValueT"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "IDataFrame",
										"id": 683,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "number"
											},
											{
												"type": "typeParameter",
												"name": "ResultValueT"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "DataFrame.joinOuter",
										"id": 1760
									},
									"implementationOf": {
										"type": "reference",
										"name": "IOrderedDataFrame.joinOuter",
										"id": 1351
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/dataframe.ts",
									"line": 3221,
									"character": 13
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "DataFrame.joinOuter",
								"id": 1760
							},
							"implementationOf": {
								"type": "reference",
								"name": "IOrderedDataFrame.joinOuter",
								"id": 1350
							}
						},
						{
							"id": 2208,
							"name": "joinOuterLeft",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"signatures": [
								{
									"id": 2209,
									"name": "joinOuterLeft",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Performs a left outer join on two dataframes. Correlates the elements based on matching keys.\nIncludes left elements that have no correlation.",
										"returns": "Returns the joined dataframes.\n"
									},
									"typeParameter": [
										{
											"id": 2210,
											"name": "KeyT",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										},
										{
											"id": 2211,
											"name": "InnerIndexT",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										},
										{
											"id": 2212,
											"name": "InnerValueT",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										},
										{
											"id": 2213,
											"name": "ResultValueT",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										}
									],
									"parameters": [
										{
											"id": 2214,
											"name": "inner",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The inner dataframe to join."
											},
											"type": {
												"type": "reference",
												"name": "IDataFrame",
												"id": 683,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "InnerIndexT"
													},
													{
														"type": "typeParameter",
														"name": "InnerValueT"
													}
												]
											}
										},
										{
											"id": 2215,
											"name": "outerKeySelector",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Selector that chooses the join key from the outer sequence."
											},
											"type": {
												"type": "reference",
												"name": "SelectorFn",
												"id": 66,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "ValueT"
													},
													{
														"type": "typeParameter",
														"name": "KeyT"
													}
												]
											}
										},
										{
											"id": 2216,
											"name": "innerKeySelector",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Selector that chooses the join key from the inner sequence."
											},
											"type": {
												"type": "reference",
												"name": "SelectorFn",
												"id": 66,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "InnerValueT"
													},
													{
														"type": "typeParameter",
														"name": "KeyT"
													}
												]
											}
										},
										{
											"id": 2217,
											"name": "resultSelector",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Selector that defines how to merge outer and inner values.\n\nImplementation from here:\n\n\thttp://blogs.geniuscode.net/RyanDHatch/?p=116\n"
											},
											"type": {
												"type": "reference",
												"name": "JoinFn",
												"id": 3631,
												"typeArguments": [
													{
														"type": "union",
														"types": [
															{
																"type": "typeParameter",
																"name": "ValueT"
															},
															{
																"type": "intrinsic",
																"name": "null"
															}
														]
													},
													{
														"type": "union",
														"types": [
															{
																"type": "typeParameter",
																"name": "InnerValueT"
															},
															{
																"type": "intrinsic",
																"name": "null"
															}
														]
													},
													{
														"type": "typeParameter",
														"name": "ResultValueT"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "IDataFrame",
										"id": 683,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "number"
											},
											{
												"type": "typeParameter",
												"name": "ResultValueT"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "DataFrame.joinOuterLeft",
										"id": 1770
									},
									"implementationOf": {
										"type": "reference",
										"name": "IOrderedDataFrame.joinOuterLeft",
										"id": 1361
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/dataframe.ts",
									"line": 3268,
									"character": 17
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "DataFrame.joinOuterLeft",
								"id": 1770
							},
							"implementationOf": {
								"type": "reference",
								"name": "IOrderedDataFrame.joinOuterLeft",
								"id": 1360
							}
						},
						{
							"id": 2218,
							"name": "joinOuterRight",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"signatures": [
								{
									"id": 2219,
									"name": "joinOuterRight",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Performs a right outer join on two dataframes. Correlates the elements based on matching keys.\nIncludes right elements that have no correlation.",
										"returns": "Returns the joined dataframes.\n"
									},
									"typeParameter": [
										{
											"id": 2220,
											"name": "KeyT",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										},
										{
											"id": 2221,
											"name": "InnerIndexT",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										},
										{
											"id": 2222,
											"name": "InnerValueT",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										},
										{
											"id": 2223,
											"name": "ResultValueT",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										}
									],
									"parameters": [
										{
											"id": 2224,
											"name": "inner",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The inner dataframe to join."
											},
											"type": {
												"type": "reference",
												"name": "IDataFrame",
												"id": 683,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "InnerIndexT"
													},
													{
														"type": "typeParameter",
														"name": "InnerValueT"
													}
												]
											}
										},
										{
											"id": 2225,
											"name": "outerKeySelector",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Selector that chooses the join key from the outer sequence."
											},
											"type": {
												"type": "reference",
												"name": "SelectorFn",
												"id": 66,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "ValueT"
													},
													{
														"type": "typeParameter",
														"name": "KeyT"
													}
												]
											}
										},
										{
											"id": 2226,
											"name": "innerKeySelector",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Selector that chooses the join key from the inner sequence."
											},
											"type": {
												"type": "reference",
												"name": "SelectorFn",
												"id": 66,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "InnerValueT"
													},
													{
														"type": "typeParameter",
														"name": "KeyT"
													}
												]
											}
										},
										{
											"id": 2227,
											"name": "resultSelector",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Selector that defines how to merge outer and inner values.\n\nImplementation from here:\n\n\thttp://blogs.geniuscode.net/RyanDHatch/?p=116\n"
											},
											"type": {
												"type": "reference",
												"name": "JoinFn",
												"id": 3631,
												"typeArguments": [
													{
														"type": "union",
														"types": [
															{
																"type": "typeParameter",
																"name": "ValueT"
															},
															{
																"type": "intrinsic",
																"name": "null"
															}
														]
													},
													{
														"type": "union",
														"types": [
															{
																"type": "typeParameter",
																"name": "InnerValueT"
															},
															{
																"type": "intrinsic",
																"name": "null"
															}
														]
													},
													{
														"type": "typeParameter",
														"name": "ResultValueT"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "IDataFrame",
										"id": 683,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "number"
											},
											{
												"type": "typeParameter",
												"name": "ResultValueT"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "DataFrame.joinOuterRight",
										"id": 1780
									},
									"implementationOf": {
										"type": "reference",
										"name": "IOrderedDataFrame.joinOuterRight",
										"id": 1371
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/dataframe.ts",
									"line": 3309,
									"character": 18
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "DataFrame.joinOuterRight",
								"id": 1780
							},
							"implementationOf": {
								"type": "reference",
								"name": "IOrderedDataFrame.joinOuterRight",
								"id": 1370
							}
						},
						{
							"id": 2039,
							"name": "last",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"signatures": [
								{
									"id": 2040,
									"name": "last",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Get the last value of the series.",
										"returns": "Returns the last value of the series.\n"
									},
									"type": {
										"type": "typeParameter",
										"name": "ValueT"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "DataFrame.last",
										"id": 1601
									},
									"implementationOf": {
										"type": "reference",
										"name": "IOrderedDataFrame.last",
										"id": 1201
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/dataframe.ts",
									"line": 2355,
									"character": 8
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "DataFrame.last",
								"id": 1601
							},
							"implementationOf": {
								"type": "reference",
								"name": "IOrderedDataFrame.last",
								"id": 1200
							}
						},
						{
							"id": 2062,
							"name": "none",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"signatures": [
								{
									"id": 2063,
									"name": "none",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Determine if the predicate returns truthy for none of the values in the series.\nReturns true for an empty series.\nReturns true if the predicate always returns falsy.\nOtherwise returns false.\nIf no predicate is specified the value itself is checked.",
										"returns": "Returns true if the predicate has returned truthy for no values in the series, otherwise returns false.\n"
									},
									"parameters": [
										{
											"id": 2064,
											"name": "predicate",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "reference",
												"name": "PredicateFn",
												"id": 152,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "ValueT"
													}
												]
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "DataFrame.none",
										"id": 1624
									},
									"implementationOf": {
										"type": "reference",
										"name": "IOrderedDataFrame.none",
										"id": 1224
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/dataframe.ts",
									"line": 2548,
									"character": 8
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "DataFrame.none",
								"id": 1624
							},
							"implementationOf": {
								"type": "reference",
								"name": "IOrderedDataFrame.none",
								"id": 1223
							}
						},
						{
							"id": 2159,
							"name": "orderBy",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"signatures": [
								{
									"id": 2160,
									"name": "orderBy",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Sorts the dataframe by a value defined by the selector (ascending).",
										"returns": "Returns a new ordered dataframe that has been sorted by the value returned by the selector.\n"
									},
									"typeParameter": [
										{
											"id": 2161,
											"name": "SortT",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										}
									],
									"parameters": [
										{
											"id": 2162,
											"name": "selector",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Selects the value to sort by.\n"
											},
											"type": {
												"type": "reference",
												"name": "SelectorWithIndexFn",
												"id": 3569,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "ValueT"
													},
													{
														"type": "typeParameter",
														"name": "SortT"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "IOrderedDataFrame",
										"id": 1043,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "IndexT"
											},
											{
												"type": "typeParameter",
												"name": "ValueT"
											},
											{
												"type": "typeParameter",
												"name": "SortT"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "DataFrame.orderBy",
										"id": 1721
									},
									"implementationOf": {
										"type": "reference",
										"name": "IOrderedDataFrame.orderBy",
										"id": 1312
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/dataframe.ts",
									"line": 3040,
									"character": 11
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "DataFrame.orderBy",
								"id": 1721
							},
							"implementationOf": {
								"type": "reference",
								"name": "IOrderedDataFrame.orderBy",
								"id": 1311
							}
						},
						{
							"id": 2163,
							"name": "orderByDescending",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"signatures": [
								{
									"id": 2164,
									"name": "orderByDescending",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Sorts the dataframe by a value defined by the selector (descending).",
										"returns": "Returns a new ordered dataframe that has been sorted by the value returned by the selector.\n"
									},
									"typeParameter": [
										{
											"id": 2165,
											"name": "SortT",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										}
									],
									"parameters": [
										{
											"id": 2166,
											"name": "selector",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Selects the value to sort by.\n"
											},
											"type": {
												"type": "reference",
												"name": "SelectorWithIndexFn",
												"id": 3569,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "ValueT"
													},
													{
														"type": "typeParameter",
														"name": "SortT"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "IOrderedDataFrame",
										"id": 1043,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "IndexT"
											},
											{
												"type": "typeParameter",
												"name": "ValueT"
											},
											{
												"type": "typeParameter",
												"name": "SortT"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "DataFrame.orderByDescending",
										"id": 1725
									},
									"implementationOf": {
										"type": "reference",
										"name": "IOrderedDataFrame.orderByDescending",
										"id": 1316
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/dataframe.ts",
									"line": 3052,
									"character": 21
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "DataFrame.orderByDescending",
								"id": 1725
							},
							"implementationOf": {
								"type": "reference",
								"name": "IOrderedDataFrame.orderByDescending",
								"id": 1315
							}
						},
						{
							"id": 2089,
							"name": "parseDates",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"signatures": [
								{
									"id": 2090,
									"name": "parseDates",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Parse a column with string values to a column with date values.",
										"returns": "Returns a new dataframe with a particular named column parsed as dates.\n"
									},
									"parameters": [
										{
											"id": 2091,
											"name": "columnNameOrNames",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Specifies the column name or array of column names to parse."
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "array",
														"elementType": {
															"type": "intrinsic",
															"name": "string"
														}
													}
												]
											}
										},
										{
											"id": 2092,
											"name": "formatString",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "undefined"
													},
													{
														"type": "intrinsic",
														"name": "string"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "IDataFrame",
										"id": 683,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "IndexT"
											},
											{
												"type": "typeParameter",
												"name": "ValueT"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "DataFrame.parseDates",
										"id": 1651
									},
									"implementationOf": {
										"type": "reference",
										"name": "IOrderedDataFrame.parseDates",
										"id": 1251
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/dataframe.ts",
									"line": 2743,
									"character": 14
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "DataFrame.parseDates",
								"id": 1651
							},
							"implementationOf": {
								"type": "reference",
								"name": "IOrderedDataFrame.parseDates",
								"id": 1250
							}
						},
						{
							"id": 2086,
							"name": "parseFloats",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"signatures": [
								{
									"id": 2087,
									"name": "parseFloats",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Parse a column with string values to a column with float values.",
										"returns": "Returns a new dataframe with a particular named column parsed as floats.\n"
									},
									"parameters": [
										{
											"id": 2088,
											"name": "columnNameOrNames",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Specifies the column name or array of column names to parse.\n"
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "array",
														"elementType": {
															"type": "intrinsic",
															"name": "string"
														}
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "IDataFrame",
										"id": 683,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "IndexT"
											},
											{
												"type": "typeParameter",
												"name": "ValueT"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "DataFrame.parseFloats",
										"id": 1648
									},
									"implementationOf": {
										"type": "reference",
										"name": "IOrderedDataFrame.parseFloats",
										"id": 1248
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/dataframe.ts",
									"line": 2720,
									"character": 15
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "DataFrame.parseFloats",
								"id": 1648
							},
							"implementationOf": {
								"type": "reference",
								"name": "IOrderedDataFrame.parseFloats",
								"id": 1247
							}
						},
						{
							"id": 2083,
							"name": "parseInts",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"signatures": [
								{
									"id": 2084,
									"name": "parseInts",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Parse a column with string values to a column with int values.",
										"returns": "Returns a new dataframe with a particular named column parsed as ints.\n"
									},
									"parameters": [
										{
											"id": 2085,
											"name": "columnNameOrNames",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Specifies the column name or array of column names to parse.\n"
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "array",
														"elementType": {
															"type": "intrinsic",
															"name": "string"
														}
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "IDataFrame",
										"id": 683,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "IndexT"
											},
											{
												"type": "typeParameter",
												"name": "ValueT"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "DataFrame.parseInts",
										"id": 1645
									},
									"implementationOf": {
										"type": "reference",
										"name": "IOrderedDataFrame.parseInts",
										"id": 1245
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/dataframe.ts",
									"line": 2698,
									"character": 13
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "DataFrame.parseInts",
								"id": 1645
							},
							"implementationOf": {
								"type": "reference",
								"name": "IOrderedDataFrame.parseInts",
								"id": 1244
							}
						},
						{
							"id": 2228,
							"name": "pivot",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"signatures": [
								{
									"id": 2229,
									"name": "pivot",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Reshape (or pivot) a table based on column values.",
										"returns": "Returns a new dataframe that has been pivoted based on a particular column's values.\n"
									},
									"typeParameter": [
										{
											"id": 2230,
											"name": "NewValueT",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										}
									],
									"parameters": [
										{
											"id": 2231,
											"name": "column",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Column name whose values make the new DataFrame's columns."
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 2232,
											"name": "value",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Column name whose values populate the new DataFrame's values.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "IDataFrame",
										"id": 683,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "IndexT"
											},
											{
												"type": "typeParameter",
												"name": "NewValueT"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "DataFrame.pivot",
										"id": 1790
									},
									"implementationOf": {
										"type": "reference",
										"name": "IOrderedDataFrame.pivot",
										"id": 1381
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/dataframe.ts",
									"line": 3342,
									"character": 9
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "DataFrame.pivot",
								"id": 1790
							},
							"implementationOf": {
								"type": "reference",
								"name": "IOrderedDataFrame.pivot",
								"id": 1380
							}
						},
						{
							"id": 1951,
							"name": "renameSeries",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"signatures": [
								{
									"id": 1952,
									"name": "renameSeries",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Create a new data-frame with renamed series.",
										"returns": "Returns a new dataframe with columns renamed.\n"
									},
									"typeParameter": [
										{
											"id": 1953,
											"name": "NewValueT",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										}
									],
									"parameters": [
										{
											"id": 1954,
											"name": "newColumnNames",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "A column rename spec - maps existing column names to new column names.\n"
											},
											"type": {
												"type": "reference",
												"name": "IColumnRenameSpec",
												"id": 666
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "IDataFrame",
										"id": 683,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "IndexT"
											},
											{
												"type": "typeParameter",
												"name": "NewValueT"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "DataFrame.renameSeries",
										"id": 1513
									},
									"implementationOf": {
										"type": "reference",
										"name": "IOrderedDataFrame.renameSeries",
										"id": 1113
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/dataframe.ts",
									"line": 1806,
									"character": 16
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "DataFrame.renameSeries",
								"id": 1513
							},
							"implementationOf": {
								"type": "reference",
								"name": "IOrderedDataFrame.renameSeries",
								"id": 1112
							}
						},
						{
							"id": 1941,
							"name": "reorderSeries",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"signatures": [
								{
									"id": 1942,
									"name": "reorderSeries",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Create a new data frame with columns reordered.\nNew column names create new columns (with undefined values), omitting existing column names causes those columns to be dropped.",
										"returns": "Returns a new dataframe with columns remapped according to the specified column layout.\n"
									},
									"typeParameter": [
										{
											"id": 1943,
											"name": "NewValueT",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										}
									],
									"parameters": [
										{
											"id": 1944,
											"name": "columnNames",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The new order for columns.\n"
											},
											"type": {
												"type": "array",
												"elementType": {
													"type": "intrinsic",
													"name": "string"
												}
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "IDataFrame",
										"id": 683,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "IndexT"
											},
											{
												"type": "typeParameter",
												"name": "NewValueT"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "DataFrame.reorderSeries",
										"id": 1503
									},
									"implementationOf": {
										"type": "reference",
										"name": "IOrderedDataFrame.reorderSeries",
										"id": 1103
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/dataframe.ts",
									"line": 1671,
									"character": 17
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "DataFrame.reorderSeries",
								"id": 1503
							},
							"implementationOf": {
								"type": "reference",
								"name": "IOrderedDataFrame.reorderSeries",
								"id": 1102
							}
						},
						{
							"id": 1910,
							"name": "resetIndex",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"signatures": [
								{
									"id": 1911,
									"name": "resetIndex",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Resets the index of the dataframe back to the default zero-based sequential integer index.",
										"returns": "Returns a new dataframe with the index reset to the default zero-based index.\n"
									},
									"type": {
										"type": "reference",
										"name": "IDataFrame",
										"id": 683,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "number"
											},
											{
												"type": "typeParameter",
												"name": "ValueT"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "DataFrame.resetIndex",
										"id": 1472
									},
									"implementationOf": {
										"type": "reference",
										"name": "IOrderedDataFrame.resetIndex",
										"id": 1072
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/dataframe.ts",
									"line": 1403,
									"character": 14
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "DataFrame.resetIndex",
								"id": 1472
							},
							"implementationOf": {
								"type": "reference",
								"name": "IOrderedDataFrame.resetIndex",
								"id": 1071
							}
						},
						{
							"id": 2102,
							"name": "reverse",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"signatures": [
								{
									"id": 2103,
									"name": "reverse",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Reverse the dataframe.",
										"returns": "Returns a new dataframe that is the reverse of the input.\n"
									},
									"type": {
										"type": "reference",
										"name": "IDataFrame",
										"id": 683,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "IndexT"
											},
											{
												"type": "typeParameter",
												"name": "ValueT"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "DataFrame.reverse",
										"id": 1664
									},
									"implementationOf": {
										"type": "reference",
										"name": "IOrderedDataFrame.reverse",
										"id": 1264
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/dataframe.ts",
									"line": 2839,
									"character": 11
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "DataFrame.reverse",
								"id": 1664
							},
							"implementationOf": {
								"type": "reference",
								"name": "IOrderedDataFrame.reverse",
								"id": 1263
							}
						},
						{
							"id": 2002,
							"name": "rollingWindow",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"signatures": [
								{
									"id": 2003,
									"name": "rollingWindow",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Segment a dataframe into 'rolling windows'. Returns a new series. Each value in the new series contains a 'window' (or segment) of the original series.",
										"returns": "Returns a new series, each value of which is a 'window' (or segment) of the original series.\n"
									},
									"parameters": [
										{
											"id": 2004,
											"name": "period",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The number of values in the window.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "ISeries",
										"id": 2287,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "number"
											},
											{
												"type": "reference",
												"name": "IDataFrame",
												"id": 683,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "IndexT"
													},
													{
														"type": "typeParameter",
														"name": "ValueT"
													}
												]
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "DataFrame.rollingWindow",
										"id": 1564
									},
									"implementationOf": {
										"type": "reference",
										"name": "IOrderedDataFrame.rollingWindow",
										"id": 1164
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/dataframe.ts",
									"line": 2123,
									"character": 17
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "DataFrame.rollingWindow",
								"id": 1564
							},
							"implementationOf": {
								"type": "reference",
								"name": "IOrderedDataFrame.rollingWindow",
								"id": 1163
							}
						},
						{
							"id": 1974,
							"name": "select",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"signatures": [
								{
									"id": 1975,
									"name": "select",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Generate a new dataframe based by calling the selector function on each value.",
										"returns": "Returns a new dataframe that has been transformed by the selector function.\n"
									},
									"typeParameter": [
										{
											"id": 1976,
											"name": "ToT",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										}
									],
									"parameters": [
										{
											"id": 1977,
											"name": "selector",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Selector function that transforms each value to create a new dataframe.\n"
											},
											"type": {
												"type": "reference",
												"name": "SelectorWithIndexFn",
												"id": 3569,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "ValueT"
													},
													{
														"type": "typeParameter",
														"name": "ToT"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "IDataFrame",
										"id": 683,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "IndexT"
											},
											{
												"type": "typeParameter",
												"name": "ToT"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "DataFrame.select",
										"id": 1536
									},
									"implementationOf": {
										"type": "reference",
										"name": "IOrderedDataFrame.select",
										"id": 1136
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/dataframe.ts",
									"line": 1931,
									"character": 10
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "DataFrame.select",
								"id": 1536
							},
							"implementationOf": {
								"type": "reference",
								"name": "IOrderedDataFrame.select",
								"id": 1135
							}
						},
						{
							"id": 1978,
							"name": "selectMany",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"signatures": [
								{
									"id": 1979,
									"name": "selectMany",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Generate a new dataframe based on the results of the selector function.",
										"returns": "Returns a new dataframe with values that have been produced by the selector function.\n"
									},
									"typeParameter": [
										{
											"id": 1980,
											"name": "ToT",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										}
									],
									"parameters": [
										{
											"id": 1981,
											"name": "selector",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Selector function that transforms each value into a list of values.\n"
											},
											"type": {
												"type": "reference",
												"name": "SelectorWithIndexFn",
												"id": 3569,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "ValueT"
													},
													{
														"type": "reference",
														"name": "Iterable",
														"typeArguments": [
															{
																"type": "typeParameter",
																"name": "ToT"
															}
														]
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "IDataFrame",
										"id": 683,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "IndexT"
											},
											{
												"type": "typeParameter",
												"name": "ToT"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "DataFrame.selectMany",
										"id": 1540
									},
									"implementationOf": {
										"type": "reference",
										"name": "IOrderedDataFrame.selectMany",
										"id": 1140
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/dataframe.ts",
									"line": 1950,
									"character": 14
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "DataFrame.selectMany",
								"id": 1540
							},
							"implementationOf": {
								"type": "reference",
								"name": "IOrderedDataFrame.selectMany",
								"id": 1139
							}
						},
						{
							"id": 2008,
							"name": "sequentialDistinct",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"signatures": [
								{
									"id": 2009,
									"name": "sequentialDistinct",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Group sequential duplicate values into a series of windows.",
										"returns": "Returns a series of groups. Each group is itself a series.\n"
									},
									"typeParameter": [
										{
											"id": 2010,
											"name": "ToT",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										}
									],
									"parameters": [
										{
											"id": 2011,
											"name": "selector",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "reference",
												"name": "SelectorFn",
												"id": 66,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "ValueT"
													},
													{
														"type": "typeParameter",
														"name": "ToT"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "IDataFrame",
										"id": 683,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "IndexT"
											},
											{
												"type": "typeParameter",
												"name": "ValueT"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "DataFrame.sequentialDistinct",
										"id": 1570
									},
									"implementationOf": {
										"type": "reference",
										"name": "IOrderedDataFrame.sequentialDistinct",
										"id": 1170
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/dataframe.ts",
									"line": 2161,
									"character": 22
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "DataFrame.sequentialDistinct",
								"id": 1570
							},
							"implementationOf": {
								"type": "reference",
								"name": "IOrderedDataFrame.sequentialDistinct",
								"id": 1169
							}
						},
						{
							"id": 1902,
							"name": "setIndex",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"signatures": [
								{
									"id": 1903,
									"name": "setIndex",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Set a named column as the index of the data-frame.",
										"returns": "Returns a new dataframe with the values of a particular named column as the index.\n"
									},
									"typeParameter": [
										{
											"id": 1904,
											"name": "NewIndexT",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										}
									],
									"parameters": [
										{
											"id": 1905,
											"name": "columnName",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Name or index of the column to set as the index.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "IDataFrame",
										"id": 683,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "NewIndexT"
											},
											{
												"type": "typeParameter",
												"name": "ValueT"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "DataFrame.setIndex",
										"id": 1464
									},
									"implementationOf": {
										"type": "reference",
										"name": "IOrderedDataFrame.setIndex",
										"id": 1064
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/dataframe.ts",
									"line": 1359,
									"character": 12
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "DataFrame.setIndex",
								"id": 1464
							},
							"implementationOf": {
								"type": "reference",
								"name": "IOrderedDataFrame.setIndex",
								"id": 1063
							}
						},
						{
							"id": 2017,
							"name": "skip",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"signatures": [
								{
									"id": 2018,
									"name": "skip",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Skip a number of values in the dataframe.",
										"returns": "Returns a new dataframe or dataframe with the specified number of values skipped.\n"
									},
									"parameters": [
										{
											"id": 2019,
											"name": "numValues",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Number of values to skip."
											},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "IDataFrame",
										"id": 683,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "IndexT"
											},
											{
												"type": "typeParameter",
												"name": "ValueT"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "DataFrame.skip",
										"id": 1579
									},
									"implementationOf": {
										"type": "reference",
										"name": "IOrderedDataFrame.skip",
										"id": 1179
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/dataframe.ts",
									"line": 2223,
									"character": 8
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "DataFrame.skip",
								"id": 1579
							},
							"implementationOf": {
								"type": "reference",
								"name": "IOrderedDataFrame.skip",
								"id": 1178
							}
						},
						{
							"id": 2023,
							"name": "skipUntil",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"signatures": [
								{
									"id": 2024,
									"name": "skipUntil",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Skips values in the series until a condition is met.",
										"returns": "Returns a new series with all initial sequential values removed that don't match the predicate.\n"
									},
									"parameters": [
										{
											"id": 2025,
											"name": "predicate",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Return true to indicate the condition met.\n"
											},
											"type": {
												"type": "reference",
												"name": "PredicateFn",
												"id": 152,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "ValueT"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "IDataFrame",
										"id": 683,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "IndexT"
											},
											{
												"type": "typeParameter",
												"name": "ValueT"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "DataFrame.skipUntil",
										"id": 1585
									},
									"implementationOf": {
										"type": "reference",
										"name": "IOrderedDataFrame.skipUntil",
										"id": 1185
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/dataframe.ts",
									"line": 2262,
									"character": 13
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "DataFrame.skipUntil",
								"id": 1585
							},
							"implementationOf": {
								"type": "reference",
								"name": "IOrderedDataFrame.skipUntil",
								"id": 1184
							}
						},
						{
							"id": 2020,
							"name": "skipWhile",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"signatures": [
								{
									"id": 2021,
									"name": "skipWhile",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Skips values in the series while a condition is met.",
										"returns": "Returns a new series with all initial sequential values removed that match the predicate.\n"
									},
									"parameters": [
										{
											"id": 2022,
											"name": "predicate",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Return true to indicate the condition met.\n"
											},
											"type": {
												"type": "reference",
												"name": "PredicateFn",
												"id": 152,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "ValueT"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "IDataFrame",
										"id": 683,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "IndexT"
											},
											{
												"type": "typeParameter",
												"name": "ValueT"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "DataFrame.skipWhile",
										"id": 1582
									},
									"implementationOf": {
										"type": "reference",
										"name": "IOrderedDataFrame.skipWhile",
										"id": 1182
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/dataframe.ts",
									"line": 2242,
									"character": 13
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "DataFrame.skipWhile",
								"id": 1582
							},
							"implementationOf": {
								"type": "reference",
								"name": "IOrderedDataFrame.skipWhile",
								"id": 1181
							}
						},
						{
							"id": 2065,
							"name": "startAt",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"signatures": [
								{
									"id": 2066,
									"name": "startAt",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Get a new series containing all values starting at and after the specified index value.",
										"returns": "Returns a new series containing all values starting at and after the specified index value.\n"
									},
									"parameters": [
										{
											"id": 2067,
											"name": "indexValue",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The index value to search for before starting the new series.\n"
											},
											"type": {
												"type": "typeParameter",
												"name": "IndexT"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "IDataFrame",
										"id": 683,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "IndexT"
											},
											{
												"type": "typeParameter",
												"name": "ValueT"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "DataFrame.startAt",
										"id": 1627
									},
									"implementationOf": {
										"type": "reference",
										"name": "IOrderedDataFrame.startAt",
										"id": 1227
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/dataframe.ts",
									"line": 2581,
									"character": 11
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "DataFrame.startAt",
								"id": 1627
							},
							"implementationOf": {
								"type": "reference",
								"name": "IOrderedDataFrame.startAt",
								"id": 1226
							}
						},
						{
							"id": 1933,
							"name": "subset",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"signatures": [
								{
									"id": 1934,
									"name": "subset",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Create a new data-frame from a subset of columns.",
										"returns": "Returns a dataframe with a subset of columns from the input dataframe.\n"
									},
									"typeParameter": [
										{
											"id": 1935,
											"name": "NewValueT",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										}
									],
									"parameters": [
										{
											"id": 1936,
											"name": "columnNames",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Array of column names to include in the new data-frame.\n"
											},
											"type": {
												"type": "array",
												"elementType": {
													"type": "intrinsic",
													"name": "string"
												}
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "IDataFrame",
										"id": 683,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "IndexT"
											},
											{
												"type": "typeParameter",
												"name": "NewValueT"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "DataFrame.subset",
										"id": 1495
									},
									"implementationOf": {
										"type": "reference",
										"name": "IOrderedDataFrame.subset",
										"id": 1095
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/dataframe.ts",
									"line": 1591,
									"character": 10
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "DataFrame.subset",
								"id": 1495
							},
							"implementationOf": {
								"type": "reference",
								"name": "IOrderedDataFrame.subset",
								"id": 1094
							}
						},
						{
							"id": 2047,
							"name": "tail",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"signatures": [
								{
									"id": 2048,
									"name": "tail",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Get X values from the end of the dataframe.\nPass in a negative value to get all items at the tail except X values at the head.",
										"returns": "Returns a new dataframe that has only the specified number of values taken from the end of the input sequence.\n"
									},
									"parameters": [
										{
											"id": 2049,
											"name": "numValues",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Number of values to take.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "IDataFrame",
										"id": 683,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "IndexT"
											},
											{
												"type": "typeParameter",
												"name": "ValueT"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "DataFrame.tail",
										"id": 1609
									},
									"implementationOf": {
										"type": "reference",
										"name": "IOrderedDataFrame.tail",
										"id": 1209
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/dataframe.ts",
									"line": 2425,
									"character": 8
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "DataFrame.tail",
								"id": 1609
							},
							"implementationOf": {
								"type": "reference",
								"name": "IOrderedDataFrame.tail",
								"id": 1208
							}
						},
						{
							"id": 2026,
							"name": "take",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"signatures": [
								{
									"id": 2027,
									"name": "take",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Take a number of rows in the series.",
										"returns": "Returns a new series with up to the specified number of values included.\n"
									},
									"parameters": [
										{
											"id": 2028,
											"name": "numRows",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Number of rows to take.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "IDataFrame",
										"id": 683,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "IndexT"
											},
											{
												"type": "typeParameter",
												"name": "ValueT"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "DataFrame.take",
										"id": 1588
									},
									"implementationOf": {
										"type": "reference",
										"name": "IOrderedDataFrame.take",
										"id": 1188
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/dataframe.ts",
									"line": 2275,
									"character": 8
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "DataFrame.take",
								"id": 1588
							},
							"implementationOf": {
								"type": "reference",
								"name": "IOrderedDataFrame.take",
								"id": 1187
							}
						},
						{
							"id": 2032,
							"name": "takeUntil",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"signatures": [
								{
									"id": 2033,
									"name": "takeUntil",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Take values from the series until a condition is met.",
										"returns": "Returns a new series or dataframe that only includes the initial sequential values that have not matched the predicate.\n"
									},
									"parameters": [
										{
											"id": 2034,
											"name": "predicate",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Return true to indicate the condition met.\n"
											},
											"type": {
												"type": "reference",
												"name": "PredicateFn",
												"id": 152,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "ValueT"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "IDataFrame",
										"id": 683,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "IndexT"
											},
											{
												"type": "typeParameter",
												"name": "ValueT"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "DataFrame.takeUntil",
										"id": 1594
									},
									"implementationOf": {
										"type": "reference",
										"name": "IOrderedDataFrame.takeUntil",
										"id": 1194
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/dataframe.ts",
									"line": 2316,
									"character": 13
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "DataFrame.takeUntil",
								"id": 1594
							},
							"implementationOf": {
								"type": "reference",
								"name": "IOrderedDataFrame.takeUntil",
								"id": 1193
							}
						},
						{
							"id": 2029,
							"name": "takeWhile",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"signatures": [
								{
									"id": 2030,
									"name": "takeWhile",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Take values from the series while a condition is met.",
										"returns": "Returns a new series that only includes the initial sequential values that have matched the predicate.\n"
									},
									"parameters": [
										{
											"id": 2031,
											"name": "predicate",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Return true to indicate the condition met.\n"
											},
											"type": {
												"type": "reference",
												"name": "PredicateFn",
												"id": 152,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "ValueT"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "IDataFrame",
										"id": 683,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "IndexT"
											},
											{
												"type": "typeParameter",
												"name": "ValueT"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "DataFrame.takeWhile",
										"id": 1591
									},
									"implementationOf": {
										"type": "reference",
										"name": "IOrderedDataFrame.takeWhile",
										"id": 1191
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/dataframe.ts",
									"line": 2296,
									"character": 13
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "DataFrame.takeWhile",
								"id": 1591
							},
							"implementationOf": {
								"type": "reference",
								"name": "IOrderedDataFrame.takeWhile",
								"id": 1190
							}
						},
						{
							"id": 1886,
							"name": "thenBy",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"signatures": [
								{
									"id": 1887,
									"name": "thenBy",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Performs additional sorting (ascending).",
										"returns": "Returns a new dataframe has been additionally sorted by the value returned by the selector.\n"
									},
									"typeParameter": [
										{
											"id": 1888,
											"name": "SortT",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										}
									],
									"parameters": [
										{
											"id": 1889,
											"name": "selector",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Selects the value to sort by.\n"
											},
											"type": {
												"type": "reference",
												"name": "SelectorWithIndexFn",
												"id": 3569,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "ValueT"
													},
													{
														"type": "typeParameter",
														"name": "SortT"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "IOrderedDataFrame",
										"id": 1043,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "IndexT"
											},
											{
												"type": "typeParameter",
												"name": "ValueT"
											},
											{
												"type": "typeParameter",
												"name": "SortT"
											}
										]
									},
									"implementationOf": {
										"type": "reference",
										"name": "IOrderedDataFrame.thenBy",
										"id": 1048
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/dataframe.ts",
									"line": 3797,
									"character": 10
								}
							],
							"implementationOf": {
								"type": "reference",
								"name": "IOrderedDataFrame.thenBy",
								"id": 1047
							}
						},
						{
							"id": 1890,
							"name": "thenByDescending",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"signatures": [
								{
									"id": 1891,
									"name": "thenByDescending",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Performs additional sorting (descending).",
										"returns": "Returns a new dataframe has been additionally sorted by the value returned by the selector.\n"
									},
									"typeParameter": [
										{
											"id": 1892,
											"name": "SortT",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										}
									],
									"parameters": [
										{
											"id": 1893,
											"name": "selector",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Selects the value to sort by.\n"
											},
											"type": {
												"type": "reference",
												"name": "SelectorWithIndexFn",
												"id": 3569,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "ValueT"
													},
													{
														"type": "typeParameter",
														"name": "SortT"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "IOrderedDataFrame",
										"id": 1043,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "IndexT"
											},
											{
												"type": "typeParameter",
												"name": "ValueT"
											},
											{
												"type": "typeParameter",
												"name": "SortT"
											}
										]
									},
									"implementationOf": {
										"type": "reference",
										"name": "IOrderedDataFrame.thenByDescending",
										"id": 1052
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/dataframe.ts",
									"line": 3809,
									"character": 20
								}
							],
							"implementationOf": {
								"type": "reference",
								"name": "IOrderedDataFrame.thenByDescending",
								"id": 1051
							}
						},
						{
							"id": 1955,
							"name": "toArray",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"signatures": [
								{
									"id": 1956,
									"name": "toArray",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Extract values from the dataframe as an array.\nThis forces lazy evaluation to complete.",
										"returns": "Returns an array of values contained within the dataframe.\n"
									},
									"type": {
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "any"
										}
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "DataFrame.toArray",
										"id": 1517
									},
									"implementationOf": {
										"type": "reference",
										"name": "IOrderedDataFrame.toArray",
										"id": 1117
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/dataframe.ts",
									"line": 1861,
									"character": 11
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "DataFrame.toArray",
								"id": 1517
							},
							"implementationOf": {
								"type": "reference",
								"name": "IOrderedDataFrame.toArray",
								"id": 1116
							}
						},
						{
							"id": 2252,
							"name": "toCSV",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"signatures": [
								{
									"id": 2253,
									"name": "toCSV",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Serialize the dataframe to CSV.",
										"text": " @returns Returns a CSV format string representing the dataframe.\n"
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "DataFrame.toCSV",
										"id": 1814
									},
									"implementationOf": {
										"type": "reference",
										"name": "IOrderedDataFrame.toCSV",
										"id": 1405
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/dataframe.ts",
									"line": 3522,
									"character": 9
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "DataFrame.toCSV",
								"id": 1814
							},
							"implementationOf": {
								"type": "reference",
								"name": "IOrderedDataFrame.toCSV",
								"id": 1404
							}
						},
						{
							"id": 2258,
							"name": "toHTML",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"signatures": [
								{
									"id": 2259,
									"name": "toHTML",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Serialize the data frame to HTML.",
										"text": " @returns Returns a HTML format string representing the dataframe.\n"
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "DataFrame.toHTML",
										"id": 1820
									},
									"implementationOf": {
										"type": "reference",
										"name": "IOrderedDataFrame.toHTML",
										"id": 1411
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/dataframe.ts",
									"line": 3551,
									"character": 10
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "DataFrame.toHTML",
								"id": 1820
							},
							"implementationOf": {
								"type": "reference",
								"name": "IOrderedDataFrame.toHTML",
								"id": 1410
							}
						},
						{
							"id": 2250,
							"name": "toJSON",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"signatures": [
								{
									"id": 2251,
									"name": "toJSON",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Serialize the dataframe to JSON.",
										"text": " @returns Returns a JSON format string representing the dataframe.\n"
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "DataFrame.toJSON",
										"id": 1812
									},
									"implementationOf": {
										"type": "reference",
										"name": "IOrderedDataFrame.toJSON",
										"id": 1403
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/dataframe.ts",
									"line": 3513,
									"character": 10
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "DataFrame.toJSON",
								"id": 1812
							},
							"implementationOf": {
								"type": "reference",
								"name": "IOrderedDataFrame.toJSON",
								"id": 1402
							}
						},
						{
							"id": 1959,
							"name": "toObject",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"signatures": [
								{
									"id": 1960,
									"name": "toObject",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Convert the dataframe to a JavaScript object.",
										"returns": "Returns a JavaScript object generated from the input sequence by the key and value selector funtions.\n"
									},
									"typeParameter": [
										{
											"id": 1961,
											"name": "KeyT",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										},
										{
											"id": 1962,
											"name": "FieldT",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										},
										{
											"id": 1963,
											"name": "OutT",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										}
									],
									"parameters": [
										{
											"id": 1964,
											"name": "keySelector",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Function that selects keys for the resulting object."
											},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 1965,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"signatures": [
														{
															"id": 1966,
															"name": "__call",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {},
															"parameters": [
																{
																	"id": 1967,
																	"name": "value",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {},
																	"type": {
																		"type": "typeParameter",
																		"name": "ValueT"
																	}
																}
															],
															"type": {
																"type": "typeParameter",
																"name": "KeyT"
															}
														}
													],
													"sources": [
														{
															"fileName": "lib/dataframe.ts",
															"line": 1896,
															"character": 64
														}
													]
												}
											}
										},
										{
											"id": 1968,
											"name": "valueSelector",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Function that selects values for the resulting object.\n"
											},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 1969,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"signatures": [
														{
															"id": 1970,
															"name": "__call",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {},
															"parameters": [
																{
																	"id": 1971,
																	"name": "value",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {},
																	"type": {
																		"type": "typeParameter",
																		"name": "ValueT"
																	}
																}
															],
															"type": {
																"type": "typeParameter",
																"name": "FieldT"
															}
														}
													],
													"sources": [
														{
															"fileName": "lib/dataframe.ts",
															"line": 1896,
															"character": 104
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "typeParameter",
										"name": "OutT"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "DataFrame.toObject",
										"id": 1521
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/dataframe.ts",
									"line": 1896,
									"character": 12
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "DataFrame.toObject",
								"id": 1521
							},
							"implementationOf": {
								"type": "reference",
								"name": "IOrderedDataFrame.toObject",
								"id": 1120
							}
						},
						{
							"id": 1957,
							"name": "toPairs",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"signatures": [
								{
									"id": 1958,
									"name": "toPairs",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Retreive the index and values from the DataFrame as an array of pairs.\nEach pair is [index, value].\nThis forces lazy evaluation to complete.",
										"returns": "Returns an array of pairs that contains the dataframe content. Each pair is a two element array that contains an index and a value.\n"
									},
									"type": {
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "Object"
										}
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "DataFrame.toPairs",
										"id": 1519
									},
									"implementationOf": {
										"type": "reference",
										"name": "IOrderedDataFrame.toPairs",
										"id": 1119
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/dataframe.ts",
									"line": 1878,
									"character": 11
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "DataFrame.toPairs",
								"id": 1519
							},
							"implementationOf": {
								"type": "reference",
								"name": "IOrderedDataFrame.toPairs",
								"id": 1118
							}
						},
						{
							"id": 1972,
							"name": "toRows",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"signatures": [
								{
									"id": 1973,
									"name": "toRows",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Bake the data frame to an array of rows.",
										"text": " @returns Returns an array of rows. Each row is an array of values in column order.\n"
									},
									"type": {
										"type": "array",
										"elementType": {
											"type": "array",
											"elementType": {
												"type": "intrinsic",
												"name": "any"
											}
										}
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "DataFrame.toRows",
										"id": 1534
									},
									"implementationOf": {
										"type": "reference",
										"name": "IOrderedDataFrame.toRows",
										"id": 1134
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/dataframe.ts",
									"line": 1909,
									"character": 10
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "DataFrame.toRows",
								"id": 1534
							},
							"implementationOf": {
								"type": "reference",
								"name": "IOrderedDataFrame.toRows",
								"id": 1133
							}
						},
						{
							"id": 2081,
							"name": "toString",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"signatures": [
								{
									"id": 2082,
									"name": "toString",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Format the dataframe for display as a string.\nThis forces lazy evaluation to complete.",
										"returns": "Generates and returns a string representation of the dataframe or dataframe.\n"
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "DataFrame.toString",
										"id": 1643
									},
									"implementationOf": {
										"type": "reference",
										"name": "IOrderedDataFrame.toString",
										"id": 1243
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/dataframe.ts",
									"line": 2671,
									"character": 12
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "DataFrame.toString",
								"id": 1643
							},
							"implementationOf": {
								"type": "reference",
								"name": "IOrderedDataFrame.toString",
								"id": 1242
							}
						},
						{
							"id": 2093,
							"name": "toStrings",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"signatures": [
								{
									"id": 2094,
									"name": "toStrings",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Convert a column of values of different types to a column of string values.",
										"returns": "Returns a new dataframe with a particular named column convert to strings.\n"
									},
									"parameters": [
										{
											"id": 2095,
											"name": "columnNameOrNames",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Specifies the column name or array of column names to convert to strings."
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "array",
														"elementType": {
															"type": "intrinsic",
															"name": "string"
														}
													}
												]
											}
										},
										{
											"id": 2096,
											"name": "formatString",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "undefined"
													},
													{
														"type": "intrinsic",
														"name": "string"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "IDataFrame",
										"id": 683,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "IndexT"
											},
											{
												"type": "typeParameter",
												"name": "ValueT"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "DataFrame.toStrings",
										"id": 1655
									},
									"implementationOf": {
										"type": "reference",
										"name": "IOrderedDataFrame.toStrings",
										"id": 1255
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/dataframe.ts",
									"line": 2770,
									"character": 13
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "DataFrame.toStrings",
								"id": 1655
							},
							"implementationOf": {
								"type": "reference",
								"name": "IOrderedDataFrame.toStrings",
								"id": 1254
							}
						},
						{
							"id": 1982,
							"name": "transformSeries",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"signatures": [
								{
									"id": 1983,
									"name": "transformSeries",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Transform one or more columns. This is equivalent to extracting a column, calling 'select' on it,\nthen plugging it back in as the same column.",
										"returns": "Returns a new dataframe with 1 or more columns transformed.\n"
									},
									"typeParameter": [
										{
											"id": 1984,
											"name": "NewValueT",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										}
									],
									"parameters": [
										{
											"id": 1985,
											"name": "columnSelectors",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Object with field names for each column to be transformed. Each field you be a selector that transforms that column.\n"
											},
											"type": {
												"type": "reference",
												"name": "IColumnTransformSpec",
												"id": 669
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "IDataFrame",
										"id": 683,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "IndexT"
											},
											{
												"type": "typeParameter",
												"name": "NewValueT"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "DataFrame.transformSeries",
										"id": 1544
									},
									"implementationOf": {
										"type": "reference",
										"name": "IOrderedDataFrame.transformSeries",
										"id": 1144
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/dataframe.ts",
									"line": 1978,
									"character": 19
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "DataFrame.transformSeries",
								"id": 1544
							},
							"implementationOf": {
								"type": "reference",
								"name": "IOrderedDataFrame.transformSeries",
								"id": 1143
							}
						},
						{
							"id": 2097,
							"name": "truncateStrings",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"signatures": [
								{
									"id": 2098,
									"name": "truncateStrings",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Produces a new data frame with all string values truncated to the requested maximum length.",
										"returns": "Returns a new dataframe with all strings truncated to the specified maximum length.\n"
									},
									"parameters": [
										{
											"id": 2099,
											"name": "maxLength",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The maximum length of the string values after truncation.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "IDataFrame",
										"id": 683,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "IndexT"
											},
											{
												"type": "typeParameter",
												"name": "ValueT"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "DataFrame.truncateStrings",
										"id": 1659
									},
									"implementationOf": {
										"type": "reference",
										"name": "IOrderedDataFrame.truncateStrings",
										"id": 1259
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/dataframe.ts",
									"line": 2796,
									"character": 19
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "DataFrame.truncateStrings",
								"id": 1659
							},
							"implementationOf": {
								"type": "reference",
								"name": "IOrderedDataFrame.truncateStrings",
								"id": 1258
							}
						},
						{
							"id": 2167,
							"name": "union",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"signatures": [
								{
									"id": 2168,
									"name": "union",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Returns the unique union of values between two dataframes.",
										"returns": "Returns the union of two dataframes.\n"
									},
									"typeParameter": [
										{
											"id": 2169,
											"name": "KeyT",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										}
									],
									"parameters": [
										{
											"id": 2170,
											"name": "other",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The other dataframes to combine."
											},
											"type": {
												"type": "reference",
												"name": "IDataFrame",
												"id": 683,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "IndexT"
													},
													{
														"type": "typeParameter",
														"name": "ValueT"
													}
												]
											}
										},
										{
											"id": 2171,
											"name": "selector",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "reference",
												"name": "SelectorFn",
												"id": 66,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "ValueT"
													},
													{
														"type": "typeParameter",
														"name": "KeyT"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "IDataFrame",
										"id": 683,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "IndexT"
											},
											{
												"type": "typeParameter",
												"name": "ValueT"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "DataFrame.union",
										"id": 1729
									},
									"implementationOf": {
										"type": "reference",
										"name": "IOrderedDataFrame.union",
										"id": 1320
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/dataframe.ts",
									"line": 3065,
									"character": 9
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "DataFrame.union",
								"id": 1729
							},
							"implementationOf": {
								"type": "reference",
								"name": "IOrderedDataFrame.union",
								"id": 1319
							}
						},
						{
							"id": 2005,
							"name": "variableWindow",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"signatures": [
								{
									"id": 2006,
									"name": "variableWindow",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Groups sequential values into variable length 'windows'.",
										"returns": "Returns a series of groups. Each group is itself a series that contains the values in the 'window'.\n"
									},
									"parameters": [
										{
											"id": 2007,
											"name": "comparer",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Predicate that compares two values and returns true if they should be in the same window.\n"
											},
											"type": {
												"type": "reference",
												"name": "ComparerFn",
												"id": 371,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "ValueT"
													},
													{
														"type": "typeParameter",
														"name": "ValueT"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "ISeries",
										"id": 2287,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "number"
											},
											{
												"type": "reference",
												"name": "IDataFrame",
												"id": 683,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "IndexT"
													},
													{
														"type": "typeParameter",
														"name": "ValueT"
													}
												]
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "DataFrame.variableWindow",
										"id": 1567
									},
									"implementationOf": {
										"type": "reference",
										"name": "IOrderedDataFrame.variableWindow",
										"id": 1167
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/dataframe.ts",
									"line": 2142,
									"character": 18
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "DataFrame.variableWindow",
								"id": 1567
							},
							"implementationOf": {
								"type": "reference",
								"name": "IOrderedDataFrame.variableWindow",
								"id": 1166
							}
						},
						{
							"id": 2050,
							"name": "where",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"signatures": [
								{
									"id": 2051,
									"name": "where",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Filter a series by a predicate selector.",
										"returns": "Returns a new series containing only the values that match the predicate.\n"
									},
									"parameters": [
										{
											"id": 2052,
											"name": "predicate",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Predicte function to filter rows of the series.\n"
											},
											"type": {
												"type": "reference",
												"name": "PredicateFn",
												"id": 152,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "ValueT"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "IDataFrame",
										"id": 683,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "IndexT"
											},
											{
												"type": "typeParameter",
												"name": "ValueT"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "DataFrame.where",
										"id": 1612
									},
									"implementationOf": {
										"type": "reference",
										"name": "IOrderedDataFrame.where",
										"id": 1212
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/dataframe.ts",
									"line": 2444,
									"character": 9
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "DataFrame.where",
								"id": 1612
							},
							"implementationOf": {
								"type": "reference",
								"name": "IOrderedDataFrame.where",
								"id": 1211
							}
						},
						{
							"id": 1999,
							"name": "window",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"signatures": [
								{
									"id": 2000,
									"name": "window",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Segment a dataframe into 'windows'. Returns a new series. Each value in the new series contains a 'window' (or segment) of the original dataframe.\nUse select or selectPairs to aggregate.",
										"returns": "Returns a new series, each value of which is a 'window' (or segment) of the original dataframe.\n"
									},
									"parameters": [
										{
											"id": 2001,
											"name": "period",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The number of values in the window.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "ISeries",
										"id": 2287,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "number"
											},
											{
												"type": "reference",
												"name": "IDataFrame",
												"id": 683,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "IndexT"
													},
													{
														"type": "typeParameter",
														"name": "ValueT"
													}
												]
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "DataFrame.window",
										"id": 1561
									},
									"implementationOf": {
										"type": "reference",
										"name": "IOrderedDataFrame.window",
										"id": 1161
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/dataframe.ts",
									"line": 2104,
									"character": 10
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "DataFrame.window",
								"id": 1561
							},
							"implementationOf": {
								"type": "reference",
								"name": "IOrderedDataFrame.window",
								"id": 1160
							}
						},
						{
							"id": 1906,
							"name": "withIndex",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"signatures": [
								{
									"id": 1907,
									"name": "withIndex",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Apply a new index to the dataframe.",
										"returns": "Returns a new dataframe or dataframe with the specified index attached.\n"
									},
									"typeParameter": [
										{
											"id": 1908,
											"name": "NewIndexT",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										}
									],
									"parameters": [
										{
											"id": 1909,
											"name": "newIndex",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The new array or iterable to apply to the dataframe. Can also be a selector to choose the index for each row in the dataframe.\n"
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "reference",
														"name": "Iterable",
														"typeArguments": [
															{
																"type": "typeParameter",
																"name": "NewIndexT"
															}
														]
													},
													{
														"type": "reference",
														"name": "SelectorFn",
														"id": 66,
														"typeArguments": [
															{
																"type": "typeParameter",
																"name": "ValueT"
															},
															{
																"type": "typeParameter",
																"name": "NewIndexT"
															}
														]
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "IDataFrame",
										"id": 683,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "NewIndexT"
											},
											{
												"type": "typeParameter",
												"name": "ValueT"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "DataFrame.withIndex",
										"id": 1468
									},
									"implementationOf": {
										"type": "reference",
										"name": "IOrderedDataFrame.withIndex",
										"id": 1068
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/dataframe.ts",
									"line": 1372,
									"character": 13
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "DataFrame.withIndex",
								"id": 1468
							},
							"implementationOf": {
								"type": "reference",
								"name": "IOrderedDataFrame.withIndex",
								"id": 1067
							}
						},
						{
							"id": 1923,
							"name": "withSeries",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"signatures": [
								{
									"id": 1924,
									"name": "withSeries",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Create a new dataframe with an additional column specified by the passed-in series.",
										"returns": "Returns a new dataframe replacing or adding a particular named column.\n"
									},
									"typeParameter": [
										{
											"id": 1925,
											"name": "SeriesValueT",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										}
									],
									"parameters": [
										{
											"id": 1926,
											"name": "columnNameOrSpec",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The name of the column to add or replace."
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "reference",
														"name": "IColumnGenSpec",
														"id": 663
													}
												]
											}
										},
										{
											"id": 1927,
											"name": "series",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "reference",
														"name": "ISeries",
														"id": 2287,
														"typeArguments": [
															{
																"type": "typeParameter",
																"name": "IndexT"
															},
															{
																"type": "typeParameter",
																"name": "SeriesValueT"
															}
														]
													},
													{
														"type": "reference",
														"name": "SeriesSelectorFn",
														"id": 2261,
														"typeArguments": [
															{
																"type": "typeParameter",
																"name": "IndexT"
															},
															{
																"type": "typeParameter",
																"name": "ValueT"
															},
															{
																"type": "typeParameter",
																"name": "SeriesValueT"
															}
														]
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "IDataFrame",
										"id": 683,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "IndexT"
											},
											{
												"type": "typeParameter",
												"name": "ValueT"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "DataFrame.withSeries",
										"id": 1485
									},
									"implementationOf": {
										"type": "reference",
										"name": "IOrderedDataFrame.withSeries",
										"id": 1085
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/dataframe.ts",
									"line": 1471,
									"character": 14
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "DataFrame.withSeries",
								"id": 1485
							},
							"implementationOf": {
								"type": "reference",
								"name": "IOrderedDataFrame.withSeries",
								"id": 1084
							}
						},
						{
							"id": 2131,
							"name": "zip",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"signatures": [
								{
									"id": 2132,
									"name": "zip",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Zip together multiple dataframes to create a new dataframe.\nPreserves the index of the first dataframe.",
										"returns": "Returns a single dataframe concatenated from multiple input dataframes.\n"
									},
									"typeParameter": [
										{
											"id": 2133,
											"name": "Index2T",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										},
										{
											"id": 2134,
											"name": "Value2T",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										},
										{
											"id": 2135,
											"name": "ResultT",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										}
									],
									"parameters": [
										{
											"id": 2136,
											"name": "s2",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "IDataFrame",
												"id": 683,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "Index2T"
													},
													{
														"type": "typeParameter",
														"name": "Value2T"
													}
												]
											}
										},
										{
											"id": 2137,
											"name": "zipper",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Zipper function that produces a new dataframe based on the input dataframes.\n"
											},
											"type": {
												"type": "reference",
												"name": "Zip2Fn",
												"id": 3582,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "ValueT"
													},
													{
														"type": "typeParameter",
														"name": "Value2T"
													},
													{
														"type": "typeParameter",
														"name": "ResultT"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "IDataFrame",
										"id": 683,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "IndexT"
											},
											{
												"type": "typeParameter",
												"name": "ResultT"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "DataFrame.zip",
										"id": 1693
									},
									"implementationOf": {
										"type": "reference",
										"name": "IOrderedDataFrame.zip",
										"id": 1281
									}
								},
								{
									"id": 2138,
									"name": "zip",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"typeParameter": [
										{
											"id": 2139,
											"name": "Index2T",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										},
										{
											"id": 2140,
											"name": "Value2T",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										},
										{
											"id": 2141,
											"name": "Index3T",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										},
										{
											"id": 2142,
											"name": "Value3T",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										},
										{
											"id": 2143,
											"name": "ResultT",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										}
									],
									"parameters": [
										{
											"id": 2144,
											"name": "s2",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "IDataFrame",
												"id": 683,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "Index2T"
													},
													{
														"type": "typeParameter",
														"name": "Value2T"
													}
												]
											}
										},
										{
											"id": 2145,
											"name": "s3",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "IDataFrame",
												"id": 683,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "Index3T"
													},
													{
														"type": "typeParameter",
														"name": "Value3T"
													}
												]
											}
										},
										{
											"id": 2146,
											"name": "zipper",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Zip3Fn",
												"id": 3590,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "ValueT"
													},
													{
														"type": "typeParameter",
														"name": "Value2T"
													},
													{
														"type": "typeParameter",
														"name": "Value3T"
													},
													{
														"type": "typeParameter",
														"name": "ResultT"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "IDataFrame",
										"id": 683,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "IndexT"
											},
											{
												"type": "typeParameter",
												"name": "ResultT"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "DataFrame.zip",
										"id": 1693
									},
									"implementationOf": {
										"type": "reference",
										"name": "IOrderedDataFrame.zip",
										"id": 1287
									}
								},
								{
									"id": 2147,
									"name": "zip",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"typeParameter": [
										{
											"id": 2148,
											"name": "Index2T",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										},
										{
											"id": 2149,
											"name": "Value2T",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										},
										{
											"id": 2150,
											"name": "Index3T",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										},
										{
											"id": 2151,
											"name": "Value3T",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										},
										{
											"id": 2152,
											"name": "Index4T",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										},
										{
											"id": 2153,
											"name": "Value4T",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										},
										{
											"id": 2154,
											"name": "ResultT",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										}
									],
									"parameters": [
										{
											"id": 2155,
											"name": "s2",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "IDataFrame",
												"id": 683,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "Index2T"
													},
													{
														"type": "typeParameter",
														"name": "Value2T"
													}
												]
											}
										},
										{
											"id": 2156,
											"name": "s3",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "IDataFrame",
												"id": 683,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "Index3T"
													},
													{
														"type": "typeParameter",
														"name": "Value3T"
													}
												]
											}
										},
										{
											"id": 2157,
											"name": "s4",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "IDataFrame",
												"id": 683,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "Index4T"
													},
													{
														"type": "typeParameter",
														"name": "Value4T"
													}
												]
											}
										},
										{
											"id": 2158,
											"name": "zipper",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Zip3Fn",
												"id": 3590,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "ValueT"
													},
													{
														"type": "typeParameter",
														"name": "Value2T"
													},
													{
														"type": "typeParameter",
														"name": "Value3T"
													},
													{
														"type": "typeParameter",
														"name": "ResultT"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "IDataFrame",
										"id": 683,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "IndexT"
											},
											{
												"type": "typeParameter",
												"name": "ResultT"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "DataFrame.zip",
										"id": 1693
									},
									"implementationOf": {
										"type": "reference",
										"name": "IOrderedDataFrame.zip",
										"id": 1296
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/dataframe.ts",
									"line": 3023,
									"character": 7
								},
								{
									"fileName": "lib/dataframe.ts",
									"line": 3024,
									"character": 7
								},
								{
									"fileName": "lib/dataframe.ts",
									"line": 3025,
									"character": 7
								},
								{
									"fileName": "lib/dataframe.ts",
									"line": 3026,
									"character": 7
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "DataFrame.zip",
								"id": 1693
							},
							"implementationOf": {
								"type": "reference",
								"name": "IOrderedDataFrame.zip",
								"id": 1280
							}
						},
						{
							"id": 2116,
							"name": "concat",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isStatic": true
							},
							"signatures": [
								{
									"id": 2117,
									"name": "concat",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Concatenate multiple dataframes into a single dataframe.",
										"returns": "Returns a single dataframe concatenated from multiple input dataframes.\n"
									},
									"typeParameter": [
										{
											"id": 2118,
											"name": "IndexT",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										},
										{
											"id": 2119,
											"name": "ValueT",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										}
									],
									"parameters": [
										{
											"id": 2120,
											"name": "dataframes",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Array of dataframes to concatenate.\n"
											},
											"type": {
												"type": "array",
												"elementType": {
													"type": "reference",
													"name": "IDataFrame",
													"id": 683,
													"typeArguments": [
														{
															"type": "typeParameter",
															"name": "IndexT"
														},
														{
															"type": "typeParameter",
															"name": "ValueT"
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "IDataFrame",
										"id": 683,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "IndexT"
											},
											{
												"type": "typeParameter",
												"name": "ValueT"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "DataFrame.concat",
										"id": 1678
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/dataframe.ts",
									"line": 2933,
									"character": 17
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "DataFrame.concat",
								"id": 1678
							}
						},
						{
							"id": 1876,
							"name": "makePairsSelector",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isStatic": true,
								"isPrivate": true
							},
							"signatures": [
								{
									"id": 1877,
									"name": "makePairsSelector",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 1878,
											"name": "selector",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "SortSelectorFn"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "SortSelectorFn"
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/dataframe.ts",
									"line": 3758,
									"character": 36
								}
							]
						},
						{
							"id": 1871,
							"name": "makeSortSpec",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isStatic": true,
								"isPrivate": true
							},
							"signatures": [
								{
									"id": 1872,
									"name": "makeSortSpec",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 1873,
											"name": "sortLevel",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										},
										{
											"id": 1874,
											"name": "selector",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "SortSelectorFn"
											}
										},
										{
											"id": 1875,
											"name": "direction",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Direction",
												"id": 390
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "ISortSpec",
										"id": 393
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/dataframe.ts",
									"line": 3751,
									"character": 31
								}
							]
						},
						{
							"id": 2124,
							"name": "zip",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isStatic": true
							},
							"signatures": [
								{
									"id": 2125,
									"name": "zip",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Zip together multiple dataframes to create a new dataframe.\nPreserves the index of the first dataframe.",
										"returns": "Returns a single dataframe zipped from multiple input dataframes.\n"
									},
									"typeParameter": [
										{
											"id": 2126,
											"name": "IndexT",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										},
										{
											"id": 2127,
											"name": "ValueT",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										},
										{
											"id": 2128,
											"name": "ResultT",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										}
									],
									"parameters": [
										{
											"id": 2129,
											"name": "dataframes",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Multiple arguments. Each can be either a dataframe or an array of dataframes."
											},
											"type": {
												"type": "array",
												"elementType": {
													"type": "reference",
													"name": "IDataFrame",
													"id": 683,
													"typeArguments": [
														{
															"type": "typeParameter",
															"name": "IndexT"
														},
														{
															"type": "typeParameter",
															"name": "ValueT"
														}
													]
												}
											}
										},
										{
											"id": 2130,
											"name": "zipper",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Selector function that produces a new dataframe based on the input dataframes.\n"
											},
											"type": {
												"type": "reference",
												"name": "ZipNFn",
												"id": 3576,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "ValueT"
													},
													{
														"type": "typeParameter",
														"name": "ResultT"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "IDataFrame",
										"id": 683,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "IndexT"
											},
											{
												"type": "typeParameter",
												"name": "ResultT"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "DataFrame.zip",
										"id": 1686
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/dataframe.ts",
									"line": 2990,
									"character": 14
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "DataFrame.zip",
								"id": 1686
							}
						}
					],
					"groups": [
						{
							"title": "Constructors",
							"kind": 512,
							"children": [
								1879
							]
						},
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								1868,
								1870,
								1869,
								1866,
								1867
							]
						},
						{
							"title": "Methods",
							"kind": 2048,
							"children": [
								1894,
								2074,
								2012,
								2056,
								2059,
								2236,
								2254,
								2256,
								2041,
								2100,
								2071,
								2077,
								1948,
								1945,
								2121,
								2035,
								2243,
								1990,
								2246,
								2248,
								2104,
								1937,
								2068,
								1928,
								2180,
								1919,
								2239,
								2037,
								2053,
								1986,
								1896,
								1898,
								1900,
								1912,
								2108,
								2112,
								1916,
								2044,
								1994,
								2233,
								2172,
								2188,
								2198,
								2208,
								2218,
								2039,
								2062,
								2159,
								2163,
								2089,
								2086,
								2083,
								2228,
								1951,
								1941,
								1910,
								2102,
								2002,
								1974,
								1978,
								2008,
								1902,
								2017,
								2023,
								2020,
								2065,
								1933,
								2047,
								2026,
								2032,
								2029,
								1886,
								1890,
								1955,
								2252,
								2258,
								2250,
								1959,
								1957,
								1972,
								2081,
								2093,
								1982,
								2097,
								2167,
								2005,
								2050,
								1999,
								1906,
								1923,
								2131,
								2116,
								1876,
								1871,
								2124
							]
						}
					],
					"sources": [
						{
							"fileName": "lib/dataframe.ts",
							"line": 3738,
							"character": 22
						}
					],
					"extendedTypes": [
						{
							"type": "reference",
							"name": "DataFrame",
							"id": 1420,
							"typeArguments": [
								{
									"type": "typeParameter",
									"name": "IndexT"
								},
								{
									"type": "typeParameter",
									"name": "ValueT"
								}
							]
						}
					],
					"implementedTypes": [
						{
							"type": "reference",
							"name": "IDataFrame",
							"id": 683,
							"typeArguments": [
								{
									"type": "typeParameter",
									"name": "IndexT"
								},
								{
									"type": "typeParameter",
									"name": "ValueT"
								}
							]
						},
						{
							"type": "reference",
							"name": "IOrderedDataFrame",
							"id": 1043,
							"typeArguments": [
								{
									"type": "typeParameter",
									"name": "IndexT"
								},
								{
									"type": "typeParameter",
									"name": "ValueT"
								},
								{
									"type": "typeParameter",
									"name": "SortT"
								}
							]
						}
					]
				},
				{
					"id": 660,
					"name": "IColumn",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "Represents a name column in a dataframe."
					},
					"children": [
						{
							"id": 661,
							"name": "name",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The name of the column."
							},
							"sources": [
								{
									"fileName": "lib/dataframe.ts",
									"line": 76,
									"character": 8
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 662,
							"name": "series",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The data series from the column."
							},
							"sources": [
								{
									"fileName": "lib/dataframe.ts",
									"line": 81,
									"character": 10
								}
							],
							"type": {
								"type": "reference",
								"name": "ISeries",
								"id": 2287,
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "any"
									},
									{
										"type": "intrinsic",
										"name": "any"
									}
								]
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								661,
								662
							]
						}
					],
					"sources": [
						{
							"fileName": "lib/dataframe.ts",
							"line": 71,
							"character": 24
						}
					]
				},
				{
					"id": 672,
					"name": "IColumnAggregateSpec",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "A spec for aggregating a collection of names columns."
					},
					"indexSignature": {
						"id": 673,
						"name": "__index",
						"kind": 8192,
						"kindString": "Index signature",
						"flags": {},
						"comment": {
							"shortText": "A spec for aggregating a collection of names columns."
						},
						"parameters": [
							{
								"id": 674,
								"name": "index",
								"kind": 32768,
								"kindString": "Parameter",
								"flags": {},
								"type": {
									"type": "intrinsic",
									"name": "string"
								}
							}
						],
						"type": {
							"type": "reference",
							"name": "AggregateFn",
							"id": 3644,
							"typeArguments": [
								{
									"type": "intrinsic",
									"name": "any"
								},
								{
									"type": "intrinsic",
									"name": "any"
								}
							]
						}
					},
					"sources": [
						{
							"fileName": "lib/dataframe.ts",
							"line": 108,
							"character": 37
						}
					]
				},
				{
					"id": 646,
					"name": "IColumnConfig",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "Defines the configuration for a new column."
					},
					"children": [
						{
							"id": 647,
							"name": "name",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The name of the new column."
							},
							"sources": [
								{
									"fileName": "lib/dataframe.ts",
									"line": 46,
									"character": 8
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 648,
							"name": "series",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The series of values for the column."
							},
							"sources": [
								{
									"fileName": "lib/dataframe.ts",
									"line": 51,
									"character": 10
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "reference",
										"name": "Iterable",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "any"
											}
										]
									},
									{
										"type": "reference",
										"name": "ISeries",
										"id": 2287,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "any"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										]
									}
								]
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								647,
								648
							]
						}
					],
					"sources": [
						{
							"fileName": "lib/dataframe.ts",
							"line": 42,
							"character": 30
						}
					]
				},
				{
					"id": 663,
					"name": "IColumnGenSpec",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "An object whose fields specify named columns or functions to generate columns."
					},
					"indexSignature": {
						"id": 664,
						"name": "__index",
						"kind": 8192,
						"kindString": "Index signature",
						"flags": {},
						"comment": {
							"shortText": "An object whose fields specify named columns or functions to generate columns."
						},
						"parameters": [
							{
								"id": 665,
								"name": "index",
								"kind": 32768,
								"kindString": "Parameter",
								"flags": {},
								"type": {
									"type": "intrinsic",
									"name": "string"
								}
							}
						],
						"type": {
							"type": "union",
							"types": [
								{
									"type": "reference",
									"name": "ISeries",
									"id": 2287,
									"typeArguments": [
										{
											"type": "intrinsic",
											"name": "any"
										},
										{
											"type": "intrinsic",
											"name": "any"
										}
									]
								},
								{
									"type": "reference",
									"name": "SeriesSelectorFn",
									"id": 2261,
									"typeArguments": [
										{
											"type": "intrinsic",
											"name": "any"
										},
										{
											"type": "intrinsic",
											"name": "any"
										},
										{
											"type": "intrinsic",
											"name": "any"
										}
									]
								}
							]
						}
					},
					"sources": [
						{
							"fileName": "lib/dataframe.ts",
							"line": 87,
							"character": 31
						}
					]
				},
				{
					"id": 666,
					"name": "IColumnRenameSpec",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "Specifies how to rename columns."
					},
					"indexSignature": {
						"id": 667,
						"name": "__index",
						"kind": 8192,
						"kindString": "Index signature",
						"flags": {},
						"comment": {
							"shortText": "Specifies how to rename columns."
						},
						"parameters": [
							{
								"id": 668,
								"name": "index",
								"kind": 32768,
								"kindString": "Parameter",
								"flags": {},
								"type": {
									"type": "intrinsic",
									"name": "string"
								}
							}
						],
						"type": {
							"type": "intrinsic",
							"name": "string"
						}
					},
					"sources": [
						{
							"fileName": "lib/dataframe.ts",
							"line": 94,
							"character": 34
						}
					]
				},
				{
					"id": 643,
					"name": "IColumnSpec",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "An object whose fields specify named columns."
					},
					"indexSignature": {
						"id": 644,
						"name": "__index",
						"kind": 8192,
						"kindString": "Index signature",
						"flags": {},
						"comment": {
							"shortText": "An object whose fields specify named columns."
						},
						"parameters": [
							{
								"id": 645,
								"name": "index",
								"kind": 32768,
								"kindString": "Parameter",
								"flags": {},
								"type": {
									"type": "intrinsic",
									"name": "string"
								}
							}
						],
						"type": {
							"type": "union",
							"types": [
								{
									"type": "reference",
									"name": "Iterable",
									"typeArguments": [
										{
											"type": "intrinsic",
											"name": "any"
										}
									]
								},
								{
									"type": "reference",
									"name": "ISeries",
									"id": 2287,
									"typeArguments": [
										{
											"type": "intrinsic",
											"name": "any"
										},
										{
											"type": "intrinsic",
											"name": "any"
										}
									]
								}
							]
						}
					},
					"sources": [
						{
							"fileName": "lib/dataframe.ts",
							"line": 35,
							"character": 28
						}
					]
				},
				{
					"id": 669,
					"name": "IColumnTransformSpec",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "Specifies columns to transform."
					},
					"indexSignature": {
						"id": 670,
						"name": "__index",
						"kind": 8192,
						"kindString": "Index signature",
						"flags": {},
						"comment": {
							"shortText": "Specifies columns to transform."
						},
						"parameters": [
							{
								"id": 671,
								"name": "index",
								"kind": 32768,
								"kindString": "Parameter",
								"flags": {},
								"type": {
									"type": "intrinsic",
									"name": "string"
								}
							}
						],
						"type": {
							"type": "reference",
							"name": "SelectorWithIndexFn",
							"id": 3569,
							"typeArguments": [
								{
									"type": "intrinsic",
									"name": "any"
								},
								{
									"type": "intrinsic",
									"name": "any"
								}
							]
						}
					},
					"sources": [
						{
							"fileName": "lib/dataframe.ts",
							"line": 101,
							"character": 37
						}
					]
				},
				{
					"id": 1822,
					"name": "ICsvSerializer",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "Packages a dataframe ready for CSV serialization."
					},
					"children": [
						{
							"id": 1823,
							"name": "writeFile",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1824,
									"name": "writeFile",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Serialize the dataframe to a CSV file in the local file system.\nAsynchronous version."
									},
									"parameters": [
										{
											"id": 1825,
											"name": "filePath",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Specifies the output path for the file.\n\n @returns Returns a promise that resolves when the file has been written.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Promise",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/dataframe.ts",
									"line": 3602,
									"character": 13
								}
							]
						},
						{
							"id": 1826,
							"name": "writeFileSync",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1827,
									"name": "writeFileSync",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Serialize the dataframe to a CSV file in the local file system.\nSynchronous version."
									},
									"parameters": [
										{
											"id": 1828,
											"name": "filePath",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Specifies the output path for the file.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/dataframe.ts",
									"line": 3610,
									"character": 17
								}
							]
						}
					],
					"groups": [
						{
							"title": "Methods",
							"kind": 2048,
							"children": [
								1823,
								1826
							]
						}
					],
					"sources": [
						{
							"fileName": "lib/dataframe.ts",
							"line": 3592,
							"character": 31
						}
					],
					"implementedBy": [
						{
							"type": "reference",
							"name": "CsvSerializer",
							"id": 1829
						}
					]
				},
				{
					"id": 683,
					"name": "IDataFrame",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "Interface that represents a dataframe containing a sequence of indexed rows of data."
					},
					"typeParameter": [
						{
							"id": 684,
							"name": "IndexT",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {}
						},
						{
							"id": 685,
							"name": "ValueT",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {}
						}
					],
					"children": [
						{
							"id": 686,
							"name": "__@iterator",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 687,
									"name": "__@iterator",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Get an iterator to enumerate the values of the dataframe."
									},
									"type": {
										"type": "reference",
										"name": "Iterator",
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "ValueT"
											}
										]
									},
									"overwrites": {
										"type": "reference",
										"name": "Iterable.[Symbol.iterator]"
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/dataframe.ts",
									"line": 173,
									"character": 21
								}
							],
							"overwrites": {
								"type": "reference",
								"name": "Iterable.[Symbol.iterator]"
							}
						},
						{
							"id": 866,
							"name": "after",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 867,
									"name": "after",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Get a new series containing all values after the specified index value (exclusive).",
										"returns": "Returns a new series containing all values after the specified index value.\n"
									},
									"parameters": [
										{
											"id": 868,
											"name": "indexValue",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The index value to search for.\n"
											},
											"type": {
												"type": "typeParameter",
												"name": "IndexT"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "IDataFrame",
										"id": 683,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "IndexT"
											},
											{
												"type": "typeParameter",
												"name": "ValueT"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/dataframe.ts",
									"line": 643,
									"character": 9
								}
							]
						},
						{
							"id": 804,
							"name": "aggregate",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 805,
									"name": "aggregate",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Aggregate the values in the dataframe.",
										"returns": "Returns a new value that has been aggregated from the input sequence by the 'selector' function.\n"
									},
									"typeParameter": [
										{
											"id": 806,
											"name": "ToT",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										}
									],
									"parameters": [
										{
											"id": 807,
											"name": "seedOrSelector",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "reference",
														"name": "AggregateFn",
														"id": 3644,
														"typeArguments": [
															{
																"type": "typeParameter",
																"name": "ValueT"
															},
															{
																"type": "typeParameter",
																"name": "ToT"
															}
														]
													},
													{
														"type": "typeParameter",
														"name": "ToT"
													},
													{
														"type": "reference",
														"name": "IColumnAggregateSpec",
														"id": 672
													}
												]
											}
										},
										{
											"id": 808,
											"name": "selector",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"text": "Function that takes the seed and then each value in the dataframe and produces the aggregate value.\n"
											},
											"type": {
												"type": "reference",
												"name": "AggregateFn",
												"id": 3644,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "ValueT"
													},
													{
														"type": "typeParameter",
														"name": "ToT"
													}
												]
											}
										}
									],
									"type": {
										"type": "typeParameter",
										"name": "ToT"
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/dataframe.ts",
									"line": 451,
									"character": 13
								}
							]
						},
						{
							"id": 848,
							"name": "all",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 849,
									"name": "all",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Determine if the predicate returns truthy for all values in the series.\nReturns false as soon as the predicate evaluates to falsy.\nReturns true if the predicate returns truthy for all values in the series.\nReturns false if the series is empty.",
										"returns": "Returns true if the predicate has returned truthy for every value in the sequence, otherwise returns false.\n"
									},
									"parameters": [
										{
											"id": 850,
											"name": "predicate",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Predicate function that receives each value in turn and returns truthy for a match, otherwise falsy.\n"
											},
											"type": {
												"type": "reference",
												"name": "PredicateFn",
												"id": 152,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "ValueT"
													}
												]
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/dataframe.ts",
									"line": 582,
									"character": 7
								}
							]
						},
						{
							"id": 851,
							"name": "any",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 852,
									"name": "any",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Determine if the predicate returns truthy for any of the values in the series.\nReturns true as soon as the predicate returns truthy.\nReturns false if the predicate never returns truthy.\nIf no predicate is specified the value itself is checked.",
										"returns": "Returns true if the predicate has returned truthy for any value in the sequence, otherwise returns false.\n"
									},
									"parameters": [
										{
											"id": 853,
											"name": "predicate",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "reference",
												"name": "PredicateFn",
												"id": 152,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "ValueT"
													}
												]
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/dataframe.ts",
									"line": 594,
									"character": 7
								}
							]
						},
						{
							"id": 1019,
							"name": "appendPair",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1020,
									"name": "appendPair",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Append a pair to the end of a dataframe.",
										"returns": "Returns a new dataframe with the specified pair appended.\n"
									},
									"parameters": [
										{
											"id": 1021,
											"name": "pair",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The pair to append.\n"
											},
											"type": {
												"type": "tuple",
												"elements": [
													{
														"type": "typeParameter",
														"name": "IndexT"
													},
													{
														"type": "typeParameter",
														"name": "ValueT"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "IDataFrame",
										"id": 683,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "IndexT"
											},
											{
												"type": "typeParameter",
												"name": "ValueT"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/dataframe.ts",
									"line": 950,
									"character": 14
								}
							]
						},
						{
							"id": 1037,
							"name": "asCSV",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1038,
									"name": "asCSV",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Treat the dataframe as CSV data for purposes of serialization.",
										"returns": "Returns an object that represents the dataframe for serialization in the CSV format. Call `writeFile`, `writeFileSync` to output the dataframe via different media.\n"
									},
									"type": {
										"type": "reference",
										"name": "ICsvSerializer",
										"id": 1822
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/dataframe.ts",
									"line": 1004,
									"character": 9
								}
							]
						},
						{
							"id": 1039,
							"name": "asJSON",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1040,
									"name": "asJSON",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Treat the dataframe as JSON data for purposes of serialization.",
										"returns": "Returns an object that can serialize the dataframe in the JSON format. Call `writeFile` or `writeFileSync` to output the dataframe via different media.\n"
									},
									"type": {
										"type": "reference",
										"name": "IJsonSerializer",
										"id": 1842
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/dataframe.ts",
									"line": 1011,
									"character": 10
								}
							]
						},
						{
							"id": 833,
							"name": "at",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 834,
									"name": "at",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Get the value at a specified index.",
										"returns": "Returns the value from the specified index in the sequence or undefined if there is no such index in the series.\n"
									},
									"parameters": [
										{
											"id": 835,
											"name": "index",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Index to for which to retreive the value.\n"
											},
											"type": {
												"type": "typeParameter",
												"name": "IndexT"
											}
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "typeParameter",
												"name": "ValueT"
											},
											{
												"type": "intrinsic",
												"name": "undefined"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/dataframe.ts",
									"line": 534,
									"character": 6
								}
							]
						},
						{
							"id": 892,
							"name": "bake",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 893,
									"name": "bake",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Forces lazy evaluation to complete and 'bakes' the dataframe into memory.",
										"returns": "Returns a dataframe that has been 'baked', all lazy evaluation has completed.\n"
									},
									"type": {
										"type": "reference",
										"name": "IDataFrame",
										"id": 683,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "IndexT"
											},
											{
												"type": "typeParameter",
												"name": "ValueT"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/dataframe.ts",
									"line": 715,
									"character": 8
								}
							]
						},
						{
							"id": 863,
							"name": "before",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 864,
									"name": "before",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Get a new series containing all values up to the specified index value (exclusive).",
										"returns": "Returns a new series containing all values up to the specified inde value.\n"
									},
									"parameters": [
										{
											"id": 865,
											"name": "indexValue",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The index value to search for before ending the new series.\n"
											},
											"type": {
												"type": "typeParameter",
												"name": "IndexT"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "IDataFrame",
										"id": 683,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "IndexT"
											},
											{
												"type": "typeParameter",
												"name": "ValueT"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/dataframe.ts",
									"line": 634,
									"character": 10
								}
							]
						},
						{
							"id": 869,
							"name": "between",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 870,
									"name": "between",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Get a new dataframe containing all values between the specified index values (inclusive).",
										"returns": "Returns a new dataframe containing all values between the specified index values (inclusive).\n"
									},
									"parameters": [
										{
											"id": 871,
											"name": "startIndexValue",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The index where the new sequence starts."
											},
											"type": {
												"type": "typeParameter",
												"name": "IndexT"
											}
										},
										{
											"id": 872,
											"name": "endIndexValue",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The index where the new sequence ends.\n"
											},
											"type": {
												"type": "typeParameter",
												"name": "IndexT"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "IDataFrame",
										"id": 683,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "IndexT"
											},
											{
												"type": "typeParameter",
												"name": "ValueT"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/dataframe.ts",
									"line": 653,
									"character": 11
								}
							]
						},
						{
							"id": 740,
							"name": "bringToBack",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 741,
									"name": "bringToBack",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Bring the name column (or columns) to the back, making it (or them) the last column(s) in the data-frame.",
										"returns": "Returns a new dataframe with 1 or more columns bought to the back of the column ordering.\n"
									},
									"parameters": [
										{
											"id": 742,
											"name": "columnOrColumns",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Specifies the column or columns to bring to the back.\n"
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "array",
														"elementType": {
															"type": "intrinsic",
															"name": "string"
														}
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "IDataFrame",
										"id": 683,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "IndexT"
											},
											{
												"type": "typeParameter",
												"name": "ValueT"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/dataframe.ts",
									"line": 306,
									"character": 15
								}
							]
						},
						{
							"id": 737,
							"name": "bringToFront",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 738,
									"name": "bringToFront",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Bring the name column (or columns) to the front, making it (or them) the first column(s) in the data-frame.",
										"returns": "Returns a new dataframe with 1 or more columns bought to the front of the column ordering.\n"
									},
									"parameters": [
										{
											"id": 739,
											"name": "columnOrColumns",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Specifies the column or columns to bring to the front.\n"
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "array",
														"elementType": {
															"type": "intrinsic",
															"name": "string"
														}
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "IDataFrame",
										"id": 683,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "IndexT"
											},
											{
												"type": "typeParameter",
												"name": "ValueT"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/dataframe.ts",
									"line": 297,
									"character": 16
								}
							]
						},
						{
							"id": 908,
							"name": "concat",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 909,
									"name": "concat",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Concatenate multiple other dataframes onto this dataframe.",
										"returns": "Returns a single dataframe concatenated from multiple input dataframes.\n"
									},
									"parameters": [
										{
											"id": 910,
											"name": "dataframes",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isRest": true
											},
											"comment": {
												"text": "Multiple arguments. Each can be either a dataframe or an array of dataframes.\n"
											},
											"type": {
												"type": "array",
												"elementType": {
													"type": "union",
													"types": [
														{
															"type": "reference",
															"name": "IDataFrame",
															"id": 683,
															"typeArguments": [
																{
																	"type": "unknown",
																	"name": "IndexT"
																},
																{
																	"type": "unknown",
																	"name": "ValueT"
																}
															]
														},
														{
															"type": "array",
															"elementType": {
																"type": "reference",
																"name": "IDataFrame",
																"id": 683,
																"typeArguments": [
																	{
																		"type": "unknown",
																		"name": "IndexT"
																	},
																	{
																		"type": "unknown",
																		"name": "ValueT"
																	}
																]
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "IDataFrame",
										"id": 683,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "IndexT"
											},
											{
												"type": "typeParameter",
												"name": "ValueT"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/dataframe.ts",
									"line": 758,
									"character": 10
								}
							]
						},
						{
							"id": 827,
							"name": "count",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 828,
									"name": "count",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Count the number of values in the series.",
										"returns": "Returns the count of all values in the series.\n"
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/dataframe.ts",
									"line": 511,
									"character": 9
								}
							]
						},
						{
							"id": 1026,
							"name": "defaultIfEmpty",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1027,
									"name": "defaultIfEmpty",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Returns the specified default sequence if the dataframe is empty.",
										"returns": "Returns 'defaultSequence' if the dataframe is empty.\n"
									},
									"parameters": [
										{
											"id": 1028,
											"name": "defaultSequence",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Default sequence to return if the dataframe is empty.\n"
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "array",
														"elementType": {
															"type": "typeParameter",
															"name": "ValueT"
														}
													},
													{
														"type": "reference",
														"name": "IDataFrame",
														"id": 683,
														"typeArguments": [
															{
																"type": "typeParameter",
																"name": "IndexT"
															},
															{
																"type": "typeParameter",
																"name": "ValueT"
															}
														]
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "IDataFrame",
										"id": 683,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "IndexT"
											},
											{
												"type": "typeParameter",
												"name": "ValueT"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/dataframe.ts",
									"line": 969,
									"character": 18
								}
							]
						},
						{
							"id": 782,
							"name": "deflate",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 783,
									"name": "deflate",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Deflate a data-frame to a series.",
										"returns": "Returns a series that was created from the input dataframe.\n"
									},
									"typeParameter": [
										{
											"id": 784,
											"name": "ToT",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										}
									],
									"parameters": [
										{
											"id": 785,
											"name": "selector",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "reference",
												"name": "SelectorWithIndexFn",
												"id": 3569,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "ValueT"
													},
													{
														"type": "typeParameter",
														"name": "ToT"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "ISeries",
										"id": 2287,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "IndexT"
											},
											{
												"type": "typeParameter",
												"name": "ToT"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/dataframe.ts",
									"line": 394,
									"character": 11
								}
							]
						},
						{
							"id": 1029,
							"name": "detectTypes",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1030,
									"name": "detectTypes",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Detect the types of the values in the dataframe.",
										"returns": "Returns a dataframe that describes the data types contained in the input series or dataframe.\n"
									},
									"type": {
										"type": "reference",
										"name": "IDataFrame",
										"id": 683,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "number"
											},
											{
												"type": "reference",
												"name": "ITypeFrequency",
												"id": 675
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/dataframe.ts",
									"line": 976,
									"character": 15
								}
							]
						},
						{
							"id": 1031,
							"name": "detectValues",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1032,
									"name": "detectValues",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Detect the frequency of the values in the dataframe.",
										"returns": "Returns a dataframe that describes the values contained in the dataframe.\n"
									},
									"type": {
										"type": "reference",
										"name": "IDataFrame",
										"id": 683,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "number"
											},
											{
												"type": "reference",
												"name": "IValueFrequency",
												"id": 679
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/dataframe.ts",
									"line": 983,
									"character": 16
								}
							]
						},
						{
							"id": 896,
							"name": "distinct",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 897,
									"name": "distinct",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Returns only values in the dataframe that have distinct values.",
										"returns": "Returns a dataframe containing only unique values as determined by the 'selector' function.\n"
									},
									"typeParameter": [
										{
											"id": 898,
											"name": "ToT",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										}
									],
									"parameters": [
										{
											"id": 899,
											"name": "selector",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"text": "Selects the value used to compare for duplicates.\n"
											},
											"type": {
												"type": "reference",
												"name": "SelectorFn",
												"id": 66,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "ValueT"
													},
													{
														"type": "typeParameter",
														"name": "ToT"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "IDataFrame",
										"id": 683,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "IndexT"
											},
											{
												"type": "typeParameter",
												"name": "ValueT"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/dataframe.ts",
									"line": 731,
									"character": 12
								}
							]
						},
						{
							"id": 729,
							"name": "dropSeries",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 730,
									"name": "dropSeries",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Create a new data frame with the requested column or columns dropped.",
										"returns": "Returns a new dataframe with a particular name column or columns removed.\n"
									},
									"typeParameter": [
										{
											"id": 731,
											"name": "NewValueT",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										}
									],
									"parameters": [
										{
											"id": 732,
											"name": "columnOrColumns",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Specifies the column name (a string) or columns (array of column names) to drop.\n"
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "array",
														"elementType": {
															"type": "intrinsic",
															"name": "string"
														}
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "IDataFrame",
										"id": 683,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "IndexT"
											},
											{
												"type": "typeParameter",
												"name": "NewValueT"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/dataframe.ts",
									"line": 278,
									"character": 14
								}
							]
						},
						{
							"id": 860,
							"name": "endAt",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 861,
									"name": "endAt",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Get a new series containing all values up until and including the specified index value (inclusive).",
										"returns": "Returns a new series containing all values up until and including the specified index value.\n"
									},
									"parameters": [
										{
											"id": 862,
											"name": "indexValue",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The index value to search for before ending the new series.\n"
											},
											"type": {
												"type": "typeParameter",
												"name": "IndexT"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "IDataFrame",
										"id": 683,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "IndexT"
											},
											{
												"type": "typeParameter",
												"name": "ValueT"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/dataframe.ts",
									"line": 625,
									"character": 9
								}
							]
						},
						{
							"id": 720,
							"name": "ensureSeries",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 721,
									"name": "ensureSeries",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Add a series if it doesn't already exist.",
										"returns": "Returns a new dataframe with the specified series added, if the series didn't already exist. Otherwise if the requested series already exists the same dataframe is returned.\n"
									},
									"typeParameter": [
										{
											"id": 722,
											"name": "SeriesValueT",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										}
									],
									"parameters": [
										{
											"id": 723,
											"name": "columnNameOrSpec",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The name of the series to add or a column spec that defines the new column."
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "reference",
														"name": "IColumnGenSpec",
														"id": 663
													}
												]
											}
										},
										{
											"id": 724,
											"name": "series",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"text": "The series to add to the dataframe. Can also be a function that returns the series.\n"
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "reference",
														"name": "ISeries",
														"id": 2287,
														"typeArguments": [
															{
																"type": "typeParameter",
																"name": "IndexT"
															},
															{
																"type": "typeParameter",
																"name": "SeriesValueT"
															}
														]
													},
													{
														"type": "reference",
														"name": "SeriesSelectorFn",
														"id": 2261,
														"typeArguments": [
															{
																"type": "typeParameter",
																"name": "IndexT"
															},
															{
																"type": "typeParameter",
																"name": "ValueT"
															},
															{
																"type": "typeParameter",
																"name": "SeriesValueT"
															}
														]
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "IDataFrame",
										"id": 683,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "IndexT"
											},
											{
												"type": "typeParameter",
												"name": "ValueT"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/dataframe.ts",
									"line": 260,
									"character": 16
								}
							]
						},
						{
							"id": 963,
							"name": "except",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 964,
									"name": "except",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Returns the exception of values between two dataframes.",
										"returns": "Returns the difference between the two dataframes.\n"
									},
									"typeParameter": [
										{
											"id": 965,
											"name": "InnerIndexT",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										},
										{
											"id": 966,
											"name": "InnerValueT",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										},
										{
											"id": 967,
											"name": "KeyT",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										}
									],
									"parameters": [
										{
											"id": 968,
											"name": "inner",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The other dataframe to combine."
											},
											"type": {
												"type": "reference",
												"name": "IDataFrame",
												"id": 683,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "InnerIndexT"
													},
													{
														"type": "typeParameter",
														"name": "InnerValueT"
													}
												]
											}
										},
										{
											"id": 969,
											"name": "outerSelector",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "reference",
												"name": "SelectorFn",
												"id": 66,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "ValueT"
													},
													{
														"type": "typeParameter",
														"name": "KeyT"
													}
												]
											}
										},
										{
											"id": 970,
											"name": "innerSelector",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "reference",
												"name": "SelectorFn",
												"id": 66,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "InnerValueT"
													},
													{
														"type": "typeParameter",
														"name": "KeyT"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "IDataFrame",
										"id": 683,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "IndexT"
											},
											{
												"type": "typeParameter",
												"name": "ValueT"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/dataframe.ts",
									"line": 830,
									"character": 10
								}
							]
						},
						{
							"id": 711,
							"name": "expectSeries",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 712,
									"name": "expectSeries",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Verify the existance of a column and return it.\nThrows an exception if the column doesn't exist."
									},
									"typeParameter": [
										{
											"id": 713,
											"name": "SeriesValueT",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										}
									],
									"parameters": [
										{
											"id": 714,
											"name": "columnName",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Name or index of the column to retreive.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "ISeries",
										"id": 2287,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "IndexT"
											},
											{
												"type": "typeParameter",
												"name": "SeriesValueT"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/dataframe.ts",
									"line": 240,
									"character": 16
								}
							]
						},
						{
							"id": 1022,
							"name": "fillGaps",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1023,
									"name": "fillGaps",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Fill gaps in a dataframe.",
										"returns": "Returns a new dataframe with gaps filled in.\n"
									},
									"parameters": [
										{
											"id": 1024,
											"name": "comparer",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Comparer that is passed pairA and pairB, two consecutive rows, return truthy if there is a gap between the rows, or falsey if there is no gap."
											},
											"type": {
												"type": "reference",
												"name": "ComparerFn",
												"id": 371,
												"typeArguments": [
													{
														"type": "tuple",
														"elements": [
															{
																"type": "typeParameter",
																"name": "IndexT"
															},
															{
																"type": "typeParameter",
																"name": "ValueT"
															}
														]
													},
													{
														"type": "tuple",
														"elements": [
															{
																"type": "typeParameter",
																"name": "IndexT"
															},
															{
																"type": "typeParameter",
																"name": "ValueT"
															}
														]
													}
												]
											}
										},
										{
											"id": 1025,
											"name": "generator",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Generator that is passed pairA and pairB, two consecutive rows, returns an array of pairs that fills the gap between the rows.\n"
											},
											"type": {
												"type": "reference",
												"name": "GapFillFn",
												"id": 3663,
												"typeArguments": [
													{
														"type": "tuple",
														"elements": [
															{
																"type": "typeParameter",
																"name": "IndexT"
															},
															{
																"type": "typeParameter",
																"name": "ValueT"
															}
														]
													},
													{
														"type": "tuple",
														"elements": [
															{
																"type": "typeParameter",
																"name": "IndexT"
															},
															{
																"type": "typeParameter",
																"name": "ValueT"
															}
														]
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "IDataFrame",
										"id": 683,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "IndexT"
											},
											{
												"type": "typeParameter",
												"name": "ValueT"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/dataframe.ts",
									"line": 960,
									"character": 12
								}
							]
						},
						{
							"id": 829,
							"name": "first",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 830,
									"name": "first",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Get the first value of the series.",
										"returns": "Returns the first value of the series.\n"
									},
									"type": {
										"type": "typeParameter",
										"name": "ValueT"
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/dataframe.ts",
									"line": 518,
									"character": 9
								}
							]
						},
						{
							"id": 845,
							"name": "forEach",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 846,
									"name": "forEach",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Invoke a callback function for each value in the series.",
										"returns": "Returns the input series with no modifications.\n"
									},
									"parameters": [
										{
											"id": 847,
											"name": "callback",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The calback to invoke for each value.\n"
											},
											"type": {
												"type": "reference",
												"name": "CallbackFn",
												"id": 3563,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "ValueT"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "IDataFrame",
										"id": 683,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "IndexT"
											},
											{
												"type": "typeParameter",
												"name": "ValueT"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/dataframe.ts",
									"line": 570,
									"character": 11
								}
							]
						},
						{
							"id": 778,
							"name": "generateSeries",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 779,
									"name": "generateSeries",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Generate new columns based on existing rows.",
										"returns": "Returns a new dataframe with 1 or more new columns.\n"
									},
									"typeParameter": [
										{
											"id": 780,
											"name": "NewValueT",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										}
									],
									"parameters": [
										{
											"id": 781,
											"name": "generator",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Generator function that transforms each row to a new set of columns.\n"
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "reference",
														"name": "SelectorWithIndexFn",
														"id": 3569,
														"typeArguments": [
															{
																"type": "intrinsic",
																"name": "any"
															},
															{
																"type": "intrinsic",
																"name": "any"
															}
														]
													},
													{
														"type": "reference",
														"name": "IColumnTransformSpec",
														"id": 669
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "IDataFrame",
										"id": 683,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "IndexT"
											},
											{
												"type": "typeParameter",
												"name": "NewValueT"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/dataframe.ts",
									"line": 385,
									"character": 18
								}
							]
						},
						{
							"id": 688,
							"name": "getColumnNames",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 689,
									"name": "getColumnNames",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Get the names of the columns in the dataframe.",
										"returns": "Returns an array of the column names in the dataframe.\n"
									},
									"type": {
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "string"
										}
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/dataframe.ts",
									"line": 180,
									"character": 18
								}
							]
						},
						{
							"id": 690,
							"name": "getColumns",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 691,
									"name": "getColumns",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Retreive a collection of all columns in the dataframe.",
										"returns": "Returns a series the columns in the dataframe.\n"
									},
									"type": {
										"type": "reference",
										"name": "ISeries",
										"id": 2287,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "number"
											},
											{
												"type": "reference",
												"name": "IColumn",
												"id": 660
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/dataframe.ts",
									"line": 187,
									"character": 14
								}
							]
						},
						{
							"id": 692,
							"name": "getIndex",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 693,
									"name": "getIndex",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Get the index for the dataframe."
									},
									"type": {
										"type": "reference",
										"name": "IIndex",
										"id": 3671,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "IndexT"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/dataframe.ts",
									"line": 192,
									"character": 12
								}
							]
						},
						{
							"id": 704,
							"name": "getSeries",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 705,
									"name": "getSeries",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Retreive a series from a column of the dataframe."
									},
									"typeParameter": [
										{
											"id": 706,
											"name": "SeriesValueT",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										}
									],
									"parameters": [
										{
											"id": 707,
											"name": "columnName",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Specifies the name of the column that contains the series to retreive.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "ISeries",
										"id": 2287,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "IndexT"
											},
											{
												"type": "typeParameter",
												"name": "SeriesValueT"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/dataframe.ts",
									"line": 224,
									"character": 13
								}
							]
						},
						{
							"id": 900,
							"name": "groupBy",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 901,
									"name": "groupBy",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Group the dataframe according to the selector.",
										"returns": "Returns a series of groups. Each group is a dataframe with values that have been grouped by the 'selector' function.\n"
									},
									"typeParameter": [
										{
											"id": 902,
											"name": "GroupT",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										}
									],
									"parameters": [
										{
											"id": 903,
											"name": "selector",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Selector that defines the value to group by.\n"
											},
											"type": {
												"type": "reference",
												"name": "SelectorWithIndexFn",
												"id": 3569,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "ValueT"
													},
													{
														"type": "typeParameter",
														"name": "GroupT"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "ISeries",
										"id": 2287,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "number"
											},
											{
												"type": "reference",
												"name": "IDataFrame",
												"id": 683,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "IndexT"
													},
													{
														"type": "typeParameter",
														"name": "ValueT"
													}
												]
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/dataframe.ts",
									"line": 740,
									"character": 11
								}
							]
						},
						{
							"id": 904,
							"name": "groupSequentialBy",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 905,
									"name": "groupSequentialBy",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Group sequential values into a series of windows.",
										"returns": "Returns a series of groups. Each group is a series with values that have been grouped by the 'selector' function.\n"
									},
									"typeParameter": [
										{
											"id": 906,
											"name": "GroupT",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										}
									],
									"parameters": [
										{
											"id": 907,
											"name": "selector",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"text": "Optional selector that defines the value to group by.\n"
											},
											"type": {
												"type": "reference",
												"name": "SelectorFn",
												"id": 66,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "ValueT"
													},
													{
														"type": "typeParameter",
														"name": "GroupT"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "ISeries",
										"id": 2287,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "number"
											},
											{
												"type": "reference",
												"name": "IDataFrame",
												"id": 683,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "IndexT"
													},
													{
														"type": "typeParameter",
														"name": "ValueT"
													}
												]
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/dataframe.ts",
									"line": 749,
									"character": 21
								}
							]
						},
						{
							"id": 708,
							"name": "hasSeries",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 709,
									"name": "hasSeries",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Returns true if the column with the requested name exists in the dataframe."
									},
									"parameters": [
										{
											"id": 710,
											"name": "columnName",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Name of the column to check.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/dataframe.ts",
									"line": 231,
									"character": 13
								}
							]
						},
						{
							"id": 836,
							"name": "head",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 837,
									"name": "head",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Get X values from the start of the series.",
										"returns": "Returns a new series that has only the specified number of values taken from the start of the input sequence.\n"
									},
									"parameters": [
										{
											"id": 838,
											"name": "numValues",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Number of values to take.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "IDataFrame",
										"id": 683,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "IndexT"
											},
											{
												"type": "typeParameter",
												"name": "ValueT"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/dataframe.ts",
									"line": 543,
									"character": 8
								}
							]
						},
						{
							"id": 786,
							"name": "inflateSeries",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 787,
									"name": "inflateSeries",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Inflate a named series in the data-frame to 1 or more new series in the new dataframe.",
										"returns": "Returns a new dataframe with a column inflated to 1 or more new columns.\n"
									},
									"typeParameter": [
										{
											"id": 788,
											"name": "NewValueT",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										}
									],
									"parameters": [
										{
											"id": 789,
											"name": "columnName",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Name or index of the column to retreive."
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 790,
											"name": "selector",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "reference",
												"name": "SelectorWithIndexFn",
												"id": 3569,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "IndexT"
													},
													{
														"type": "intrinsic",
														"name": "any"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "IDataFrame",
										"id": 683,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "IndexT"
											},
											{
												"type": "typeParameter",
												"name": "ValueT"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/dataframe.ts",
									"line": 404,
									"character": 17
								}
							]
						},
						{
							"id": 1016,
							"name": "insertPair",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1017,
									"name": "insertPair",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Insert a pair at the start of the dataframe.",
										"returns": "Returns a new dataframe with the specified pair inserted.\n"
									},
									"parameters": [
										{
											"id": 1018,
											"name": "pair",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The pair to insert.\n"
											},
											"type": {
												"type": "tuple",
												"elements": [
													{
														"type": "typeParameter",
														"name": "IndexT"
													},
													{
														"type": "typeParameter",
														"name": "ValueT"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "IDataFrame",
										"id": 683,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "IndexT"
											},
											{
												"type": "typeParameter",
												"name": "ValueT"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/dataframe.ts",
									"line": 941,
									"character": 14
								}
							]
						},
						{
							"id": 955,
							"name": "intersection",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 956,
									"name": "intersection",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Returns the intersection of values between two dataframes.",
										"returns": "Returns the intersection of two dataframes.\n"
									},
									"typeParameter": [
										{
											"id": 957,
											"name": "InnerIndexT",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										},
										{
											"id": 958,
											"name": "InnerValueT",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										},
										{
											"id": 959,
											"name": "KeyT",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										}
									],
									"parameters": [
										{
											"id": 960,
											"name": "inner",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The other dataframes to combine."
											},
											"type": {
												"type": "reference",
												"name": "IDataFrame",
												"id": 683,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "InnerIndexT"
													},
													{
														"type": "typeParameter",
														"name": "InnerValueT"
													}
												]
											}
										},
										{
											"id": 961,
											"name": "outerSelector",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "reference",
												"name": "SelectorFn",
												"id": 66,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "ValueT"
													},
													{
														"type": "typeParameter",
														"name": "KeyT"
													}
												]
											}
										},
										{
											"id": 962,
											"name": "innerSelector",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "reference",
												"name": "SelectorFn",
												"id": 66,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "InnerValueT"
													},
													{
														"type": "typeParameter",
														"name": "KeyT"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "IDataFrame",
										"id": 683,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "IndexT"
											},
											{
												"type": "typeParameter",
												"name": "ValueT"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/dataframe.ts",
									"line": 814,
									"character": 16
								}
							]
						},
						{
							"id": 971,
							"name": "join",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 972,
									"name": "join",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Correlates the elements of two dataframes on matching keys.",
										"returns": "Returns the joined dataframe.\n"
									},
									"typeParameter": [
										{
											"id": 973,
											"name": "KeyT",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										},
										{
											"id": 974,
											"name": "InnerIndexT",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										},
										{
											"id": 975,
											"name": "InnerValueT",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										},
										{
											"id": 976,
											"name": "ResultValueT",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										}
									],
									"parameters": [
										{
											"id": 977,
											"name": "inner",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The inner dataframe to join."
											},
											"type": {
												"type": "reference",
												"name": "IDataFrame",
												"id": 683,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "InnerIndexT"
													},
													{
														"type": "typeParameter",
														"name": "InnerValueT"
													}
												]
											}
										},
										{
											"id": 978,
											"name": "outerKeySelector",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Selector that chooses the join key from the outer sequence."
											},
											"type": {
												"type": "reference",
												"name": "SelectorFn",
												"id": 66,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "ValueT"
													},
													{
														"type": "typeParameter",
														"name": "KeyT"
													}
												]
											}
										},
										{
											"id": 979,
											"name": "innerKeySelector",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Selector that chooses the join key from the inner sequence."
											},
											"type": {
												"type": "reference",
												"name": "SelectorFn",
												"id": 66,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "InnerValueT"
													},
													{
														"type": "typeParameter",
														"name": "KeyT"
													}
												]
											}
										},
										{
											"id": 980,
											"name": "resultSelector",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Selector that defines how to merge outer and inner values.\n"
											},
											"type": {
												"type": "reference",
												"name": "JoinFn",
												"id": 3631,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "ValueT"
													},
													{
														"type": "typeParameter",
														"name": "InnerValueT"
													},
													{
														"type": "typeParameter",
														"name": "ResultValueT"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "IDataFrame",
										"id": 683,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "number"
											},
											{
												"type": "typeParameter",
												"name": "ResultValueT"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/dataframe.ts",
									"line": 847,
									"character": 8
								}
							]
						},
						{
							"id": 981,
							"name": "joinOuter",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 982,
									"name": "joinOuter",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Performs an outer join on two dataframes. Correlates the elements based on matching keys.\nIncludes elements from both dataframes that have no correlation in the other dataframe.",
										"returns": "Returns the joined dataframe.\n"
									},
									"typeParameter": [
										{
											"id": 983,
											"name": "KeyT",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										},
										{
											"id": 984,
											"name": "InnerIndexT",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										},
										{
											"id": 985,
											"name": "InnerValueT",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										},
										{
											"id": 986,
											"name": "ResultValueT",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										}
									],
									"parameters": [
										{
											"id": 987,
											"name": "inner",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The inner dataframe to join."
											},
											"type": {
												"type": "reference",
												"name": "IDataFrame",
												"id": 683,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "InnerIndexT"
													},
													{
														"type": "typeParameter",
														"name": "InnerValueT"
													}
												]
											}
										},
										{
											"id": 988,
											"name": "outerKeySelector",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Selector that chooses the join key from the outer sequence."
											},
											"type": {
												"type": "reference",
												"name": "SelectorFn",
												"id": 66,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "ValueT"
													},
													{
														"type": "typeParameter",
														"name": "KeyT"
													}
												]
											}
										},
										{
											"id": 989,
											"name": "innerKeySelector",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Selector that chooses the join key from the inner sequence."
											},
											"type": {
												"type": "reference",
												"name": "SelectorFn",
												"id": 66,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "InnerValueT"
													},
													{
														"type": "typeParameter",
														"name": "KeyT"
													}
												]
											}
										},
										{
											"id": 990,
											"name": "resultSelector",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Selector that defines how to merge outer and inner values.\n\nImplementation from here:\n\n\thttp://blogs.geniuscode.net/RyanDHatch/?p=116\n"
											},
											"type": {
												"type": "reference",
												"name": "JoinFn",
												"id": 3631,
												"typeArguments": [
													{
														"type": "union",
														"types": [
															{
																"type": "typeParameter",
																"name": "ValueT"
															},
															{
																"type": "intrinsic",
																"name": "null"
															}
														]
													},
													{
														"type": "union",
														"types": [
															{
																"type": "typeParameter",
																"name": "InnerValueT"
															},
															{
																"type": "intrinsic",
																"name": "null"
															}
														]
													},
													{
														"type": "typeParameter",
														"name": "ResultValueT"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "IDataFrame",
										"id": 683,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "number"
											},
											{
												"type": "typeParameter",
												"name": "ResultValueT"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/dataframe.ts",
									"line": 870,
									"character": 13
								}
							]
						},
						{
							"id": 991,
							"name": "joinOuterLeft",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 992,
									"name": "joinOuterLeft",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Performs a left outer join on two dataframe. Correlates the elements based on matching keys.\nIncludes left elements that have no correlation.",
										"returns": "Returns the joined dataframe.\n"
									},
									"typeParameter": [
										{
											"id": 993,
											"name": "KeyT",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										},
										{
											"id": 994,
											"name": "InnerIndexT",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										},
										{
											"id": 995,
											"name": "InnerValueT",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										},
										{
											"id": 996,
											"name": "ResultValueT",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										}
									],
									"parameters": [
										{
											"id": 997,
											"name": "inner",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The inner dataframe to join."
											},
											"type": {
												"type": "reference",
												"name": "IDataFrame",
												"id": 683,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "InnerIndexT"
													},
													{
														"type": "typeParameter",
														"name": "InnerValueT"
													}
												]
											}
										},
										{
											"id": 998,
											"name": "outerKeySelector",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Selector that chooses the join key from the outer sequence."
											},
											"type": {
												"type": "reference",
												"name": "SelectorFn",
												"id": 66,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "ValueT"
													},
													{
														"type": "typeParameter",
														"name": "KeyT"
													}
												]
											}
										},
										{
											"id": 999,
											"name": "innerKeySelector",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Selector that chooses the join key from the inner sequence."
											},
											"type": {
												"type": "reference",
												"name": "SelectorFn",
												"id": 66,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "InnerValueT"
													},
													{
														"type": "typeParameter",
														"name": "KeyT"
													}
												]
											}
										},
										{
											"id": 1000,
											"name": "resultSelector",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Selector that defines how to merge outer and inner values.\n\nImplementation from here:\n\n\thttp://blogs.geniuscode.net/RyanDHatch/?p=116\n"
											},
											"type": {
												"type": "reference",
												"name": "JoinFn",
												"id": 3631,
												"typeArguments": [
													{
														"type": "union",
														"types": [
															{
																"type": "typeParameter",
																"name": "ValueT"
															},
															{
																"type": "intrinsic",
																"name": "null"
															}
														]
													},
													{
														"type": "union",
														"types": [
															{
																"type": "typeParameter",
																"name": "InnerValueT"
															},
															{
																"type": "intrinsic",
																"name": "null"
															}
														]
													},
													{
														"type": "typeParameter",
														"name": "ResultValueT"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "IDataFrame",
										"id": 683,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "number"
											},
											{
												"type": "typeParameter",
												"name": "ResultValueT"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/dataframe.ts",
									"line": 894,
									"character": 17
								}
							]
						},
						{
							"id": 1001,
							"name": "joinOuterRight",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1002,
									"name": "joinOuterRight",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Performs a right outer join on two dataframes. Correlates the elements based on matching keys.\nIncludes right elements that have no correlation.",
										"returns": "Returns the joined dataframe.\n"
									},
									"typeParameter": [
										{
											"id": 1003,
											"name": "KeyT",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										},
										{
											"id": 1004,
											"name": "InnerIndexT",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										},
										{
											"id": 1005,
											"name": "InnerValueT",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										},
										{
											"id": 1006,
											"name": "ResultValueT",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										}
									],
									"parameters": [
										{
											"id": 1007,
											"name": "inner",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The inner dataframe to join."
											},
											"type": {
												"type": "reference",
												"name": "IDataFrame",
												"id": 683,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "InnerIndexT"
													},
													{
														"type": "typeParameter",
														"name": "InnerValueT"
													}
												]
											}
										},
										{
											"id": 1008,
											"name": "outerKeySelector",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Selector that chooses the join key from the outer sequence."
											},
											"type": {
												"type": "reference",
												"name": "SelectorFn",
												"id": 66,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "ValueT"
													},
													{
														"type": "typeParameter",
														"name": "KeyT"
													}
												]
											}
										},
										{
											"id": 1009,
											"name": "innerKeySelector",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Selector that chooses the join key from the inner sequence."
											},
											"type": {
												"type": "reference",
												"name": "SelectorFn",
												"id": 66,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "InnerValueT"
													},
													{
														"type": "typeParameter",
														"name": "KeyT"
													}
												]
											}
										},
										{
											"id": 1010,
											"name": "resultSelector",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Selector that defines how to merge outer and inner values.\n\nImplementation from here:\n\n\thttp://blogs.geniuscode.net/RyanDHatch/?p=116\n"
											},
											"type": {
												"type": "reference",
												"name": "JoinFn",
												"id": 3631,
												"typeArguments": [
													{
														"type": "union",
														"types": [
															{
																"type": "typeParameter",
																"name": "ValueT"
															},
															{
																"type": "intrinsic",
																"name": "null"
															}
														]
													},
													{
														"type": "union",
														"types": [
															{
																"type": "typeParameter",
																"name": "InnerValueT"
															},
															{
																"type": "intrinsic",
																"name": "null"
															}
														]
													},
													{
														"type": "typeParameter",
														"name": "ResultValueT"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "IDataFrame",
										"id": 683,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "number"
											},
											{
												"type": "typeParameter",
												"name": "ResultValueT"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/dataframe.ts",
									"line": 917,
									"character": 18
								}
							]
						},
						{
							"id": 831,
							"name": "last",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 832,
									"name": "last",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Get the last value of the series.",
										"returns": "Returns the last value of the series.\n"
									},
									"type": {
										"type": "typeParameter",
										"name": "ValueT"
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/dataframe.ts",
									"line": 525,
									"character": 8
								}
							]
						},
						{
							"id": 854,
							"name": "none",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 855,
									"name": "none",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Determine if the predicate returns truthy for none of the values in the series.\nReturns true for an empty series.\nReturns true if the predicate always returns falsy.\nOtherwise returns false.\nIf no predicate is specified the value itself is checked.",
										"returns": "Returns true if the predicate has returned truthy for no values in the series, otherwise returns false.\n"
									},
									"parameters": [
										{
											"id": 856,
											"name": "predicate",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "reference",
												"name": "PredicateFn",
												"id": 152,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "ValueT"
													}
												]
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/dataframe.ts",
									"line": 607,
									"character": 8
								}
							]
						},
						{
							"id": 942,
							"name": "orderBy",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 943,
									"name": "orderBy",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Sorts the dataframe by a value defined by the selector (ascending).",
										"returns": "Returns a new ordered dataframe that has been sorted by the value returned by the selector.\n"
									},
									"typeParameter": [
										{
											"id": 944,
											"name": "SortT",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										}
									],
									"parameters": [
										{
											"id": 945,
											"name": "selector",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Selects the value to sort by.\n"
											},
											"type": {
												"type": "reference",
												"name": "SelectorWithIndexFn",
												"id": 3569,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "ValueT"
													},
													{
														"type": "typeParameter",
														"name": "SortT"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "IOrderedDataFrame",
										"id": 1043,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "IndexT"
											},
											{
												"type": "typeParameter",
												"name": "ValueT"
											},
											{
												"type": "typeParameter",
												"name": "SortT"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/dataframe.ts",
									"line": 781,
									"character": 11
								}
							]
						},
						{
							"id": 946,
							"name": "orderByDescending",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 947,
									"name": "orderByDescending",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Sorts the dataframe by a value defined by the selector (descending).",
										"returns": "Returns a new ordered dataframe that has been sorted by the value returned by the selector.\n"
									},
									"typeParameter": [
										{
											"id": 948,
											"name": "SortT",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										}
									],
									"parameters": [
										{
											"id": 949,
											"name": "selector",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Selects the value to sort by.\n"
											},
											"type": {
												"type": "reference",
												"name": "SelectorWithIndexFn",
												"id": 3569,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "ValueT"
													},
													{
														"type": "typeParameter",
														"name": "SortT"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "IOrderedDataFrame",
										"id": 1043,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "IndexT"
											},
											{
												"type": "typeParameter",
												"name": "ValueT"
											},
											{
												"type": "typeParameter",
												"name": "SortT"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/dataframe.ts",
									"line": 790,
									"character": 21
								}
							]
						},
						{
							"id": 881,
							"name": "parseDates",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 882,
									"name": "parseDates",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Parse a column with string values to a column with date values.",
										"returns": "Returns a new dataframe with a particular named column parsed as dates.\n"
									},
									"parameters": [
										{
											"id": 883,
											"name": "columnNameOrNames",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Specifies the column name or array of column names to parse."
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "array",
														"elementType": {
															"type": "intrinsic",
															"name": "string"
														}
													}
												]
											}
										},
										{
											"id": 884,
											"name": "formatString",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "undefined"
													},
													{
														"type": "intrinsic",
														"name": "string"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "IDataFrame",
										"id": 683,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "IndexT"
											},
											{
												"type": "typeParameter",
												"name": "ValueT"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/dataframe.ts",
									"line": 689,
									"character": 14
								}
							]
						},
						{
							"id": 878,
							"name": "parseFloats",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 879,
									"name": "parseFloats",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Parse a column with string values to a column with float values.",
										"returns": "Returns a new dataframe with a particular named column parsed as floats.\n"
									},
									"parameters": [
										{
											"id": 880,
											"name": "columnNameOrNames",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Specifies the column name or array of column names to parse.\n"
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "array",
														"elementType": {
															"type": "intrinsic",
															"name": "string"
														}
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "IDataFrame",
										"id": 683,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "IndexT"
											},
											{
												"type": "typeParameter",
												"name": "ValueT"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/dataframe.ts",
									"line": 679,
									"character": 15
								}
							]
						},
						{
							"id": 875,
							"name": "parseInts",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 876,
									"name": "parseInts",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Parse a column with string values to a column with int values.",
										"returns": "Returns a new dataframe with a particular named column parsed as ints.\n"
									},
									"parameters": [
										{
											"id": 877,
											"name": "columnNameOrNames",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Specifies the column name or array of column names to parse.\n"
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "array",
														"elementType": {
															"type": "intrinsic",
															"name": "string"
														}
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "IDataFrame",
										"id": 683,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "IndexT"
											},
											{
												"type": "typeParameter",
												"name": "ValueT"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/dataframe.ts",
									"line": 670,
									"character": 13
								}
							]
						},
						{
							"id": 1011,
							"name": "pivot",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1012,
									"name": "pivot",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Reshape (or pivot) a table based on column values.",
										"returns": "Returns a new dataframe that has been pivoted based on a particular column's values.\n"
									},
									"typeParameter": [
										{
											"id": 1013,
											"name": "NewValueT",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										}
									],
									"parameters": [
										{
											"id": 1014,
											"name": "column",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Column name whose values make the new DataFrame's columns."
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 1015,
											"name": "value",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Column name whose values populate the new DataFrame's values.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "IDataFrame",
										"id": 683,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "IndexT"
											},
											{
												"type": "typeParameter",
												"name": "NewValueT"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/dataframe.ts",
									"line": 932,
									"character": 9
								}
							]
						},
						{
							"id": 743,
							"name": "renameSeries",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 744,
									"name": "renameSeries",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Create a new data-frame with renamed series.",
										"returns": "Returns a new dataframe with columns renamed.\n"
									},
									"typeParameter": [
										{
											"id": 745,
											"name": "NewValueT",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										}
									],
									"parameters": [
										{
											"id": 746,
											"name": "newColumnNames",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "A column rename spec - maps existing column names to new column names.\n"
											},
											"type": {
												"type": "reference",
												"name": "IColumnRenameSpec",
												"id": 666
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "IDataFrame",
										"id": 683,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "IndexT"
											},
											{
												"type": "typeParameter",
												"name": "NewValueT"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/dataframe.ts",
									"line": 315,
									"character": 16
								}
							]
						},
						{
							"id": 733,
							"name": "reorderSeries",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 734,
									"name": "reorderSeries",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Create a new data frame with columns reordered.\nNew column names create new columns (with undefined values), omitting existing column names causes those columns to be dropped.",
										"returns": "Returns a new dataframe with columns remapped according to the specified column layout.\n"
									},
									"typeParameter": [
										{
											"id": 735,
											"name": "NewValueT",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										}
									],
									"parameters": [
										{
											"id": 736,
											"name": "columnNames",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The new order for columns.\n"
											},
											"type": {
												"type": "array",
												"elementType": {
													"type": "intrinsic",
													"name": "string"
												}
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "IDataFrame",
										"id": 683,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "IndexT"
											},
											{
												"type": "typeParameter",
												"name": "NewValueT"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/dataframe.ts",
									"line": 288,
									"character": 17
								}
							]
						},
						{
							"id": 702,
							"name": "resetIndex",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 703,
									"name": "resetIndex",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Resets the index of the dataframe back to the default zero-based sequential integer index.",
										"returns": "Returns a new dataframe with the index reset to the default zero-based index.\n"
									},
									"type": {
										"type": "reference",
										"name": "IDataFrame",
										"id": 683,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "number"
											},
											{
												"type": "typeParameter",
												"name": "ValueT"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/dataframe.ts",
									"line": 217,
									"character": 14
								}
							]
						},
						{
							"id": 894,
							"name": "reverse",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 895,
									"name": "reverse",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Reverse the dataframe.",
										"returns": "Returns a new dataframe that is the reverse of the input.\n"
									},
									"type": {
										"type": "reference",
										"name": "IDataFrame",
										"id": 683,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "IndexT"
											},
											{
												"type": "typeParameter",
												"name": "ValueT"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/dataframe.ts",
									"line": 722,
									"character": 11
								}
							]
						},
						{
							"id": 794,
							"name": "rollingWindow",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 795,
									"name": "rollingWindow",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Segment a dataframe into 'rolling windows'. Returns a new series. Each value in the new series contains a 'window' (or segment) of the original dataframe.",
										"returns": "Returns a new series, each value of which is a 'window' (or segment) of the original dataframe.\n"
									},
									"parameters": [
										{
											"id": 796,
											"name": "period",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The number of values in the window.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "ISeries",
										"id": 2287,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "number"
											},
											{
												"type": "reference",
												"name": "IDataFrame",
												"id": 683,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "IndexT"
													},
													{
														"type": "typeParameter",
														"name": "ValueT"
													}
												]
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/dataframe.ts",
									"line": 423,
									"character": 17
								}
							]
						},
						{
							"id": 766,
							"name": "select",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 767,
									"name": "select",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Generate a new dataframe based by calling the selector function on each value.",
										"returns": "Returns a new dataframe that has been transformed by the selector function.\n"
									},
									"typeParameter": [
										{
											"id": 768,
											"name": "ToT",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										}
									],
									"parameters": [
										{
											"id": 769,
											"name": "selector",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Selector function that transforms each value to create a new dataframe.\n"
											},
											"type": {
												"type": "reference",
												"name": "SelectorWithIndexFn",
												"id": 3569,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "ValueT"
													},
													{
														"type": "typeParameter",
														"name": "ToT"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "IDataFrame",
										"id": 683,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "IndexT"
											},
											{
												"type": "typeParameter",
												"name": "ToT"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/dataframe.ts",
									"line": 357,
									"character": 10
								}
							]
						},
						{
							"id": 770,
							"name": "selectMany",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 771,
									"name": "selectMany",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Generate a new dataframe based on the results of the selector function.",
										"returns": "Returns a new dataframe with values that have been produced by the selector function.\n"
									},
									"typeParameter": [
										{
											"id": 772,
											"name": "ToT",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										}
									],
									"parameters": [
										{
											"id": 773,
											"name": "selector",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Selector function that transforms each value into a list of values.\n"
											},
											"type": {
												"type": "reference",
												"name": "SelectorWithIndexFn",
												"id": 3569,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "ValueT"
													},
													{
														"type": "reference",
														"name": "Iterable",
														"typeArguments": [
															{
																"type": "typeParameter",
																"name": "ToT"
															}
														]
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "IDataFrame",
										"id": 683,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "IndexT"
											},
											{
												"type": "typeParameter",
												"name": "ToT"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/dataframe.ts",
									"line": 366,
									"character": 14
								}
							]
						},
						{
							"id": 800,
							"name": "sequentialDistinct",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 801,
									"name": "sequentialDistinct",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Collapase distinct values that happen to be sequential.",
										"returns": "Returns a new dataframe with duplicate values that are sequential removed.\n"
									},
									"typeParameter": [
										{
											"id": 802,
											"name": "ToT",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										}
									],
									"parameters": [
										{
											"id": 803,
											"name": "selector",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "reference",
												"name": "SelectorFn",
												"id": 66,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "ValueT"
													},
													{
														"type": "typeParameter",
														"name": "ToT"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "IDataFrame",
										"id": 683,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "IndexT"
											},
											{
												"type": "typeParameter",
												"name": "ValueT"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/dataframe.ts",
									"line": 441,
									"character": 22
								}
							]
						},
						{
							"id": 694,
							"name": "setIndex",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 695,
									"name": "setIndex",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Set a named column as the index of the data-frame.",
										"returns": "Returns a new dataframe with the values of a particular named column as the index.\n"
									},
									"typeParameter": [
										{
											"id": 696,
											"name": "NewIndexT",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										}
									],
									"parameters": [
										{
											"id": 697,
											"name": "columnName",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Name or index of the column to set as the index.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "IDataFrame",
										"id": 683,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "NewIndexT"
											},
											{
												"type": "typeParameter",
												"name": "ValueT"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/dataframe.ts",
									"line": 201,
									"character": 12
								}
							]
						},
						{
							"id": 809,
							"name": "skip",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 810,
									"name": "skip",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Skip a number of values in the dataframe.",
										"returns": "Returns a new dataframe or dataframe with the specified number of values skipped.\n"
									},
									"parameters": [
										{
											"id": 811,
											"name": "numValues",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Number of values to skip.     *"
											},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "IDataFrame",
										"id": 683,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "IndexT"
											},
											{
												"type": "typeParameter",
												"name": "ValueT"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/dataframe.ts",
									"line": 459,
									"character": 8
								}
							]
						},
						{
							"id": 815,
							"name": "skipUntil",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 816,
									"name": "skipUntil",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Skips values in the series until a condition is met.",
										"returns": "Returns a new series with all initial sequential values removed that don't match the predicate.\n"
									},
									"parameters": [
										{
											"id": 817,
											"name": "predicate",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Return true to indicate the condition met.\n"
											},
											"type": {
												"type": "reference",
												"name": "PredicateFn",
												"id": 152,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "ValueT"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "IDataFrame",
										"id": 683,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "IndexT"
											},
											{
												"type": "typeParameter",
												"name": "ValueT"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/dataframe.ts",
									"line": 477,
									"character": 13
								}
							]
						},
						{
							"id": 812,
							"name": "skipWhile",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 813,
									"name": "skipWhile",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Skips values in the series while a condition is met.",
										"returns": "Returns a new series with all initial sequential values removed that match the predicate.\n"
									},
									"parameters": [
										{
											"id": 814,
											"name": "predicate",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Return true to indicate the condition met.\n"
											},
											"type": {
												"type": "reference",
												"name": "PredicateFn",
												"id": 152,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "ValueT"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "IDataFrame",
										"id": 683,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "IndexT"
											},
											{
												"type": "typeParameter",
												"name": "ValueT"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/dataframe.ts",
									"line": 468,
									"character": 13
								}
							]
						},
						{
							"id": 857,
							"name": "startAt",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 858,
									"name": "startAt",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Get a new series containing all values starting at and after the specified index value.",
										"returns": "Returns a new series containing all values starting at and after the specified index value.\n"
									},
									"parameters": [
										{
											"id": 859,
											"name": "indexValue",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The index value to search for before starting the new series.\n"
											},
											"type": {
												"type": "typeParameter",
												"name": "IndexT"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "IDataFrame",
										"id": 683,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "IndexT"
											},
											{
												"type": "typeParameter",
												"name": "ValueT"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/dataframe.ts",
									"line": 616,
									"character": 11
								}
							]
						},
						{
							"id": 725,
							"name": "subset",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 726,
									"name": "subset",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Create a new data-frame from a subset of columns.",
										"returns": "Returns a dataframe with a subset of columns from the input dataframe.\n"
									},
									"typeParameter": [
										{
											"id": 727,
											"name": "NewValueT",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										}
									],
									"parameters": [
										{
											"id": 728,
											"name": "columnNames",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Array of column names to include in the new data-frame.\n"
											},
											"type": {
												"type": "array",
												"elementType": {
													"type": "intrinsic",
													"name": "string"
												}
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "IDataFrame",
										"id": 683,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "IndexT"
											},
											{
												"type": "typeParameter",
												"name": "NewValueT"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/dataframe.ts",
									"line": 269,
									"character": 10
								}
							]
						},
						{
							"id": 839,
							"name": "tail",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 840,
									"name": "tail",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Get X values from the end of the series.",
										"returns": "Returns a new series that has only the specified number of values taken from the end of the input sequence.\n"
									},
									"parameters": [
										{
											"id": 841,
											"name": "numValues",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Number of values to take.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "IDataFrame",
										"id": 683,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "IndexT"
											},
											{
												"type": "typeParameter",
												"name": "ValueT"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/dataframe.ts",
									"line": 552,
									"character": 8
								}
							]
						},
						{
							"id": 818,
							"name": "take",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 819,
									"name": "take",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Take a number of rows in the series.",
										"returns": "Returns a new series with up to the specified number of values included.\n"
									},
									"parameters": [
										{
											"id": 820,
											"name": "numRows",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Number of rows to take.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "IDataFrame",
										"id": 683,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "IndexT"
											},
											{
												"type": "typeParameter",
												"name": "ValueT"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/dataframe.ts",
									"line": 486,
									"character": 8
								}
							]
						},
						{
							"id": 824,
							"name": "takeUntil",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 825,
									"name": "takeUntil",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Take values from the series until a condition is met.",
										"returns": "Returns a new series or dataframe that only includes the initial sequential values that have not matched the predicate.\n"
									},
									"parameters": [
										{
											"id": 826,
											"name": "predicate",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Return true to indicate the condition met.\n"
											},
											"type": {
												"type": "reference",
												"name": "PredicateFn",
												"id": 152,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "ValueT"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "IDataFrame",
										"id": 683,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "IndexT"
											},
											{
												"type": "typeParameter",
												"name": "ValueT"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/dataframe.ts",
									"line": 504,
									"character": 13
								}
							]
						},
						{
							"id": 821,
							"name": "takeWhile",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 822,
									"name": "takeWhile",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Take values from the series while a condition is met.",
										"returns": "Returns a new series that only includes the initial sequential values that have matched the predicate.\n"
									},
									"parameters": [
										{
											"id": 823,
											"name": "predicate",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Return true to indicate the condition met.\n"
											},
											"type": {
												"type": "reference",
												"name": "PredicateFn",
												"id": 152,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "ValueT"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "IDataFrame",
										"id": 683,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "IndexT"
											},
											{
												"type": "typeParameter",
												"name": "ValueT"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/dataframe.ts",
									"line": 495,
									"character": 13
								}
							]
						},
						{
							"id": 747,
							"name": "toArray",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 748,
									"name": "toArray",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Extract values from the dataframe as an array.\nThis forces lazy evaluation to complete.",
										"returns": "Returns an array of values contained within the dataframe.\n"
									},
									"type": {
										"type": "array",
										"elementType": {
											"type": "typeParameter",
											"name": "ValueT"
										}
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/dataframe.ts",
									"line": 323,
									"character": 11
								}
							]
						},
						{
							"id": 1035,
							"name": "toCSV",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1036,
									"name": "toCSV",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Serialize the dataframe to CSV.",
										"text": " @returns Returns a CSV format string representing the dataframe.\n"
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/dataframe.ts",
									"line": 997,
									"character": 9
								}
							]
						},
						{
							"id": 1041,
							"name": "toHTML",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1042,
									"name": "toHTML",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Serialize the data frame to HTML.",
										"text": " @returns Returns a HTML format string representing the dataframe.\n"
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/dataframe.ts",
									"line": 1018,
									"character": 10
								}
							]
						},
						{
							"id": 1033,
							"name": "toJSON",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1034,
									"name": "toJSON",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Serialize the dataframe to JSON.",
										"text": " @returns Returns a JSON format string representing the dataframe.\n"
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/dataframe.ts",
									"line": 990,
									"character": 10
								}
							]
						},
						{
							"id": 751,
							"name": "toObject",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 752,
									"name": "toObject",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Convert the dataframe to a JavaScript object.",
										"returns": "Returns a JavaScript object generated from the input sequence by the key and value selector funtions.\n"
									},
									"typeParameter": [
										{
											"id": 753,
											"name": "KeyT",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										},
										{
											"id": 754,
											"name": "FieldT",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										},
										{
											"id": 755,
											"name": "OutT",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										}
									],
									"parameters": [
										{
											"id": 756,
											"name": "keySelector",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Function that selects keys for the resulting object."
											},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 757,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"comment": {
														"text": "Function that selects values for the resulting object.\n"
													},
													"signatures": [
														{
															"id": 758,
															"name": "__call",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {},
															"comment": {
																"text": "Function that selects values for the resulting object.\n"
															},
															"parameters": [
																{
																	"id": 759,
																	"name": "value",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {},
																	"type": {
																		"type": "typeParameter",
																		"name": "ValueT"
																	}
																}
															],
															"type": {
																"type": "typeParameter",
																"name": "KeyT"
															}
														}
													],
													"sources": [
														{
															"fileName": "lib/dataframe.ts",
															"line": 341,
															"character": 64
														}
													]
												}
											}
										},
										{
											"id": 760,
											"name": "valueSelector",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 761,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"signatures": [
														{
															"id": 762,
															"name": "__call",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {},
															"parameters": [
																{
																	"id": 763,
																	"name": "value",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {},
																	"type": {
																		"type": "typeParameter",
																		"name": "ValueT"
																	}
																}
															],
															"type": {
																"type": "typeParameter",
																"name": "FieldT"
															}
														}
													],
													"sources": [
														{
															"fileName": "lib/dataframe.ts",
															"line": 341,
															"character": 104
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "typeParameter",
										"name": "OutT"
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/dataframe.ts",
									"line": 341,
									"character": 12
								}
							]
						},
						{
							"id": 749,
							"name": "toPairs",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 750,
									"name": "toPairs",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Retreive the index and values from the DataFrame as an array of pairs.\nEach pairs is [index, value].",
										"returns": "Returns an array of pairs that contains the dataframe content. Each pair is a two element array that contains an index and a value.\n"
									},
									"type": {
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "Object"
										}
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/dataframe.ts",
									"line": 331,
									"character": 11
								}
							]
						},
						{
							"id": 764,
							"name": "toRows",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 765,
									"name": "toRows",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Bake the data frame to an array of rows.",
										"text": " @returns Returns an array of rows. Each row is an array of values in column order.\n"
									},
									"type": {
										"type": "array",
										"elementType": {
											"type": "array",
											"elementType": {
												"type": "intrinsic",
												"name": "any"
											}
										}
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/dataframe.ts",
									"line": 348,
									"character": 10
								}
							]
						},
						{
							"id": 873,
							"name": "toString",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 874,
									"name": "toString",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Format the dataframe for display as a string.\nThis forces lazy evaluation to complete.",
										"returns": "Generates and returns a string representation of the dataframe or dataframe.\n"
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/dataframe.ts",
									"line": 661,
									"character": 12
								}
							]
						},
						{
							"id": 885,
							"name": "toStrings",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 886,
									"name": "toStrings",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Convert a column of values of different types to a column of string values.",
										"returns": "Returns a new dataframe with a particular named column convert to strings.\n"
									},
									"parameters": [
										{
											"id": 887,
											"name": "columnNameOrNames",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Specifies the column name or array of column names to convert to strings."
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "array",
														"elementType": {
															"type": "intrinsic",
															"name": "string"
														}
													}
												]
											}
										},
										{
											"id": 888,
											"name": "formatString",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "undefined"
													},
													{
														"type": "intrinsic",
														"name": "string"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "IDataFrame",
										"id": 683,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "IndexT"
											},
											{
												"type": "typeParameter",
												"name": "ValueT"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/dataframe.ts",
									"line": 699,
									"character": 13
								}
							]
						},
						{
							"id": 774,
							"name": "transformSeries",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 775,
									"name": "transformSeries",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Transform one or more columns. This is equivalent to extracting a column, calling 'select' on it,\nthen plugging it back in as the same column.",
										"returns": "Returns a new dataframe with 1 or more columns transformed.\n"
									},
									"typeParameter": [
										{
											"id": 776,
											"name": "NewValueT",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										}
									],
									"parameters": [
										{
											"id": 777,
											"name": "columnSelectors",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Object with field names for each column to be transformed. Each field you be a selector that transforms that column.\n"
											},
											"type": {
												"type": "reference",
												"name": "IColumnTransformSpec",
												"id": 669
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "IDataFrame",
										"id": 683,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "IndexT"
											},
											{
												"type": "typeParameter",
												"name": "NewValueT"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/dataframe.ts",
									"line": 376,
									"character": 19
								}
							]
						},
						{
							"id": 889,
							"name": "truncateStrings",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 890,
									"name": "truncateStrings",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Produces a new data frame with all string values truncated to the requested maximum length.",
										"returns": "Returns a new dataframe with all strings truncated to the specified maximum length.\n"
									},
									"parameters": [
										{
											"id": 891,
											"name": "maxLength",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The maximum length of the string values after truncation.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "IDataFrame",
										"id": 683,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "IndexT"
											},
											{
												"type": "typeParameter",
												"name": "ValueT"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/dataframe.ts",
									"line": 708,
									"character": 19
								}
							]
						},
						{
							"id": 950,
							"name": "union",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 951,
									"name": "union",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Returns the unique union of values between two dataframes.",
										"returns": "Returns the union of two dataframes.\n"
									},
									"typeParameter": [
										{
											"id": 952,
											"name": "KeyT",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										}
									],
									"parameters": [
										{
											"id": 953,
											"name": "other",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The other dataframe to combine."
											},
											"type": {
												"type": "reference",
												"name": "IDataFrame",
												"id": 683,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "IndexT"
													},
													{
														"type": "typeParameter",
														"name": "ValueT"
													}
												]
											}
										},
										{
											"id": 954,
											"name": "selector",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "reference",
												"name": "SelectorFn",
												"id": 66,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "ValueT"
													},
													{
														"type": "typeParameter",
														"name": "KeyT"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "IDataFrame",
										"id": 683,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "IndexT"
											},
											{
												"type": "typeParameter",
												"name": "ValueT"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/dataframe.ts",
									"line": 800,
									"character": 9
								}
							]
						},
						{
							"id": 797,
							"name": "variableWindow",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 798,
									"name": "variableWindow",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Groups sequential values into variable length 'windows'.",
										"returns": "Returns a series of groups. Each group is itself a dataframe that contains the values in the 'window'.\n"
									},
									"parameters": [
										{
											"id": 799,
											"name": "comparer",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Predicate that compares two values and returns true if they should be in the same window.\n"
											},
											"type": {
												"type": "reference",
												"name": "ComparerFn",
												"id": 371,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "ValueT"
													},
													{
														"type": "typeParameter",
														"name": "ValueT"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "ISeries",
										"id": 2287,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "number"
											},
											{
												"type": "reference",
												"name": "IDataFrame",
												"id": 683,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "IndexT"
													},
													{
														"type": "typeParameter",
														"name": "ValueT"
													}
												]
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/dataframe.ts",
									"line": 432,
									"character": 18
								}
							]
						},
						{
							"id": 842,
							"name": "where",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 843,
									"name": "where",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Filter a series by a predicate selector.",
										"returns": "Returns a new series containing only the values that match the predicate.\n"
									},
									"parameters": [
										{
											"id": 844,
											"name": "predicate",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Predicte function to filter rows of the series.\n"
											},
											"type": {
												"type": "reference",
												"name": "PredicateFn",
												"id": 152,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "ValueT"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "IDataFrame",
										"id": 683,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "IndexT"
											},
											{
												"type": "typeParameter",
												"name": "ValueT"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/dataframe.ts",
									"line": 561,
									"character": 9
								}
							]
						},
						{
							"id": 791,
							"name": "window",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 792,
									"name": "window",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Segment a dataframe into 'windows'. Returns a new series. Each value in the new dataframe contains a 'window' (or segment) of the original dataframe.\nUse select or selectPairs to aggregate.",
										"returns": "Returns a new series, each value of which is a 'window' (or segment) of the original dataframe.\n"
									},
									"parameters": [
										{
											"id": 793,
											"name": "period",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The number of values in the window.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "ISeries",
										"id": 2287,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "number"
											},
											{
												"type": "reference",
												"name": "IDataFrame",
												"id": 683,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "IndexT"
													},
													{
														"type": "typeParameter",
														"name": "ValueT"
													}
												]
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/dataframe.ts",
									"line": 414,
									"character": 10
								}
							]
						},
						{
							"id": 698,
							"name": "withIndex",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 699,
									"name": "withIndex",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Apply a new index to the dataframe.",
										"returns": "Returns a new dataframe with the specified index attached.\n"
									},
									"typeParameter": [
										{
											"id": 700,
											"name": "NewIndexT",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										}
									],
									"parameters": [
										{
											"id": 701,
											"name": "newIndex",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The new index to apply to the dataframe.\n"
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "reference",
														"name": "Iterable",
														"typeArguments": [
															{
																"type": "typeParameter",
																"name": "NewIndexT"
															}
														]
													},
													{
														"type": "reference",
														"name": "SelectorFn",
														"id": 66,
														"typeArguments": [
															{
																"type": "typeParameter",
																"name": "ValueT"
															},
															{
																"type": "typeParameter",
																"name": "NewIndexT"
															}
														]
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "IDataFrame",
										"id": 683,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "NewIndexT"
											},
											{
												"type": "typeParameter",
												"name": "ValueT"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/dataframe.ts",
									"line": 210,
									"character": 13
								}
							]
						},
						{
							"id": 715,
							"name": "withSeries",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 716,
									"name": "withSeries",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Create a new dataframe with an additional column specified by the passed-in series.",
										"returns": "Returns a new dataframe replacing or adding a particular named column.\n"
									},
									"typeParameter": [
										{
											"id": 717,
											"name": "SeriesValueT",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										}
									],
									"parameters": [
										{
											"id": 718,
											"name": "columnNameOrSpec",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The name of the column to add or replace."
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "reference",
														"name": "IColumnGenSpec",
														"id": 663
													}
												]
											}
										},
										{
											"id": 719,
											"name": "series",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "reference",
														"name": "ISeries",
														"id": 2287,
														"typeArguments": [
															{
																"type": "typeParameter",
																"name": "IndexT"
															},
															{
																"type": "typeParameter",
																"name": "SeriesValueT"
															}
														]
													},
													{
														"type": "reference",
														"name": "SeriesSelectorFn",
														"id": 2261,
														"typeArguments": [
															{
																"type": "typeParameter",
																"name": "IndexT"
															},
															{
																"type": "typeParameter",
																"name": "ValueT"
															},
															{
																"type": "typeParameter",
																"name": "SeriesValueT"
															}
														]
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "IDataFrame",
										"id": 683,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "IndexT"
											},
											{
												"type": "typeParameter",
												"name": "ValueT"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/dataframe.ts",
									"line": 250,
									"character": 14
								}
							]
						},
						{
							"id": 911,
							"name": "zip",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 912,
									"name": "zip",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Zip together multiple dataframes to create a new dataframe.\nPreserves the index of the first dataframe.",
										"returns": "Returns a single dataframe concatenated from multiple input dataframes.\n"
									},
									"typeParameter": [
										{
											"id": 913,
											"name": "Index2T",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										},
										{
											"id": 914,
											"name": "Value2T",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										},
										{
											"id": 915,
											"name": "ResultT",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										}
									],
									"parameters": [
										{
											"id": 916,
											"name": "s2",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "IDataFrame",
												"id": 683,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "Index2T"
													},
													{
														"type": "typeParameter",
														"name": "Value2T"
													}
												]
											}
										},
										{
											"id": 917,
											"name": "zipper",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Zipper function that produces a new dataframe based on the input dataframes.\n"
											},
											"type": {
												"type": "reference",
												"name": "Zip2Fn",
												"id": 3582,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "ValueT"
													},
													{
														"type": "typeParameter",
														"name": "Value2T"
													},
													{
														"type": "typeParameter",
														"name": "ResultT"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "IDataFrame",
										"id": 683,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "IndexT"
											},
											{
												"type": "typeParameter",
												"name": "ResultT"
											}
										]
									}
								},
								{
									"id": 918,
									"name": "zip",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"typeParameter": [
										{
											"id": 919,
											"name": "Index2T",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										},
										{
											"id": 920,
											"name": "Value2T",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										},
										{
											"id": 921,
											"name": "Index3T",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										},
										{
											"id": 922,
											"name": "Value3T",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										},
										{
											"id": 923,
											"name": "ResultT",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										}
									],
									"parameters": [
										{
											"id": 924,
											"name": "s2",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "IDataFrame",
												"id": 683,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "Index2T"
													},
													{
														"type": "typeParameter",
														"name": "Value2T"
													}
												]
											}
										},
										{
											"id": 925,
											"name": "s3",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "IDataFrame",
												"id": 683,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "Index3T"
													},
													{
														"type": "typeParameter",
														"name": "Value3T"
													}
												]
											}
										},
										{
											"id": 926,
											"name": "zipper",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Zip3Fn",
												"id": 3590,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "ValueT"
													},
													{
														"type": "typeParameter",
														"name": "Value2T"
													},
													{
														"type": "typeParameter",
														"name": "Value3T"
													},
													{
														"type": "typeParameter",
														"name": "ResultT"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "IDataFrame",
										"id": 683,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "IndexT"
											},
											{
												"type": "typeParameter",
												"name": "ResultT"
											}
										]
									}
								},
								{
									"id": 927,
									"name": "zip",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"typeParameter": [
										{
											"id": 928,
											"name": "Index2T",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										},
										{
											"id": 929,
											"name": "Value2T",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										},
										{
											"id": 930,
											"name": "Index3T",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										},
										{
											"id": 931,
											"name": "Value3T",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										},
										{
											"id": 932,
											"name": "Index4T",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										},
										{
											"id": 933,
											"name": "Value4T",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										},
										{
											"id": 934,
											"name": "ResultT",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										}
									],
									"parameters": [
										{
											"id": 935,
											"name": "s2",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "IDataFrame",
												"id": 683,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "Index2T"
													},
													{
														"type": "typeParameter",
														"name": "Value2T"
													}
												]
											}
										},
										{
											"id": 936,
											"name": "s3",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "IDataFrame",
												"id": 683,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "Index3T"
													},
													{
														"type": "typeParameter",
														"name": "Value3T"
													}
												]
											}
										},
										{
											"id": 937,
											"name": "s4",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "IDataFrame",
												"id": 683,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "Index4T"
													},
													{
														"type": "typeParameter",
														"name": "Value4T"
													}
												]
											}
										},
										{
											"id": 938,
											"name": "zipper",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Zip3Fn",
												"id": 3590,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "ValueT"
													},
													{
														"type": "typeParameter",
														"name": "Value2T"
													},
													{
														"type": "typeParameter",
														"name": "Value3T"
													},
													{
														"type": "typeParameter",
														"name": "ResultT"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "IDataFrame",
										"id": 683,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "IndexT"
											},
											{
												"type": "typeParameter",
												"name": "ResultT"
											}
										]
									}
								},
								{
									"id": 939,
									"name": "zip",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"typeParameter": [
										{
											"id": 940,
											"name": "ResultT",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										}
									],
									"parameters": [
										{
											"id": 941,
											"name": "args",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isRest": true
											},
											"type": {
												"type": "array",
												"elementType": {
													"type": "intrinsic",
													"name": "any"
												}
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "IDataFrame",
										"id": 683,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "IndexT"
											},
											{
												"type": "typeParameter",
												"name": "ResultT"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/dataframe.ts",
									"line": 769,
									"character": 7
								},
								{
									"fileName": "lib/dataframe.ts",
									"line": 770,
									"character": 7
								},
								{
									"fileName": "lib/dataframe.ts",
									"line": 771,
									"character": 7
								},
								{
									"fileName": "lib/dataframe.ts",
									"line": 772,
									"character": 7
								}
							]
						}
					],
					"groups": [
						{
							"title": "Methods",
							"kind": 2048,
							"children": [
								686,
								866,
								804,
								848,
								851,
								1019,
								1037,
								1039,
								833,
								892,
								863,
								869,
								740,
								737,
								908,
								827,
								1026,
								782,
								1029,
								1031,
								896,
								729,
								860,
								720,
								963,
								711,
								1022,
								829,
								845,
								778,
								688,
								690,
								692,
								704,
								900,
								904,
								708,
								836,
								786,
								1016,
								955,
								971,
								981,
								991,
								1001,
								831,
								854,
								942,
								946,
								881,
								878,
								875,
								1011,
								743,
								733,
								702,
								894,
								794,
								766,
								770,
								800,
								694,
								809,
								815,
								812,
								857,
								725,
								839,
								818,
								824,
								821,
								747,
								1035,
								1041,
								1033,
								751,
								749,
								764,
								873,
								885,
								774,
								889,
								950,
								797,
								842,
								791,
								698,
								715,
								911
							]
						}
					],
					"sources": [
						{
							"fileName": "lib/dataframe.ts",
							"line": 168,
							"character": 27
						}
					],
					"extendedTypes": [
						{
							"type": "reference",
							"name": "Iterable",
							"typeArguments": [
								{
									"type": "typeParameter",
									"name": "ValueT"
								}
							]
						}
					],
					"extendedBy": [
						{
							"type": "reference",
							"name": "IOrderedDataFrame",
							"id": 1043
						}
					],
					"implementedBy": [
						{
							"type": "reference",
							"name": "DataFrame",
							"id": 1420
						},
						{
							"type": "reference",
							"name": "OrderedDataFrame",
							"id": 1862
						}
					]
				},
				{
					"id": 649,
					"name": "IDataFrameConfig",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "DataFrame configuration."
					},
					"typeParameter": [
						{
							"id": 650,
							"name": "IndexT",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {}
						},
						{
							"id": 651,
							"name": "ValueT",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {}
						}
					],
					"children": [
						{
							"id": 657,
							"name": "baked",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "lib/dataframe.ts",
									"line": 63,
									"character": 9
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "true"
									},
									{
										"type": "intrinsic",
										"name": "false"
									}
								]
							}
						},
						{
							"id": 656,
							"name": "columnNames",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "lib/dataframe.ts",
									"line": 62,
									"character": 15
								}
							],
							"type": {
								"type": "reference",
								"name": "Iterable",
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							}
						},
						{
							"id": 659,
							"name": "columns",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "lib/dataframe.ts",
									"line": 65,
									"character": 11
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "reference",
										"name": "Iterable",
										"typeArguments": [
											{
												"type": "reference",
												"name": "IColumnConfig",
												"id": 646
											}
										]
									},
									{
										"type": "reference",
										"name": "IColumnSpec",
										"id": 643
									}
								]
							}
						},
						{
							"id": 658,
							"name": "considerAllRows",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "lib/dataframe.ts",
									"line": 64,
									"character": 19
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "true"
									},
									{
										"type": "intrinsic",
										"name": "false"
									}
								]
							}
						},
						{
							"id": 654,
							"name": "index",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "lib/dataframe.ts",
									"line": 60,
									"character": 9
								}
							],
							"type": {
								"type": "reference",
								"name": "Iterable",
								"typeArguments": [
									{
										"type": "typeParameter",
										"name": "IndexT"
									}
								]
							}
						},
						{
							"id": 655,
							"name": "pairs",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "lib/dataframe.ts",
									"line": 61,
									"character": 9
								}
							],
							"type": {
								"type": "reference",
								"name": "Iterable",
								"typeArguments": [
									{
										"type": "tuple",
										"elements": [
											{
												"type": "typeParameter",
												"name": "IndexT"
											},
											{
												"type": "typeParameter",
												"name": "ValueT"
											}
										]
									}
								]
							}
						},
						{
							"id": 653,
							"name": "rows",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "lib/dataframe.ts",
									"line": 59,
									"character": 8
								}
							],
							"type": {
								"type": "reference",
								"name": "Iterable",
								"typeArguments": [
									{
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "any"
										}
									}
								]
							}
						},
						{
							"id": 652,
							"name": "values",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "lib/dataframe.ts",
									"line": 58,
									"character": 10
								}
							],
							"type": {
								"type": "reference",
								"name": "Iterable",
								"typeArguments": [
									{
										"type": "typeParameter",
										"name": "ValueT"
									}
								]
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								657,
								656,
								659,
								658,
								654,
								655,
								653,
								652
							]
						}
					],
					"sources": [
						{
							"fileName": "lib/dataframe.ts",
							"line": 57,
							"character": 33
						}
					]
				},
				{
					"id": 1412,
					"name": "IDataFrameContent",
					"kind": 256,
					"kindString": "Interface",
					"flags": {},
					"typeParameter": [
						{
							"id": 1413,
							"name": "IndexT",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {}
						},
						{
							"id": 1414,
							"name": "ValueT",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {}
						}
					],
					"children": [
						{
							"id": 1418,
							"name": "columnNames",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"sources": [
								{
									"fileName": "lib/dataframe.ts",
									"line": 1052,
									"character": 15
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "string"
										}
									},
									{
										"type": "reference",
										"name": "Iterable",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											}
										]
									}
								]
							}
						},
						{
							"id": 1415,
							"name": "index",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"sources": [
								{
									"fileName": "lib/dataframe.ts",
									"line": 1048,
									"character": 9
								}
							],
							"type": {
								"type": "reference",
								"name": "Iterable",
								"typeArguments": [
									{
										"type": "typeParameter",
										"name": "IndexT"
									}
								]
							}
						},
						{
							"id": 1419,
							"name": "isBaked",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"sources": [
								{
									"fileName": "lib/dataframe.ts",
									"line": 1053,
									"character": 11
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						},
						{
							"id": 1417,
							"name": "pairs",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"sources": [
								{
									"fileName": "lib/dataframe.ts",
									"line": 1050,
									"character": 9
								}
							],
							"type": {
								"type": "reference",
								"name": "Iterable",
								"typeArguments": [
									{
										"type": "tuple",
										"elements": [
											{
												"type": "typeParameter",
												"name": "IndexT"
											},
											{
												"type": "typeParameter",
												"name": "ValueT"
											}
										]
									}
								]
							}
						},
						{
							"id": 1416,
							"name": "values",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"sources": [
								{
									"fileName": "lib/dataframe.ts",
									"line": 1049,
									"character": 10
								}
							],
							"type": {
								"type": "reference",
								"name": "Iterable",
								"typeArguments": [
									{
										"type": "typeParameter",
										"name": "ValueT"
									}
								]
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								1418,
								1415,
								1419,
								1417,
								1416
							]
						}
					],
					"sources": [
						{
							"fileName": "lib/dataframe.ts",
							"line": 1047,
							"character": 27
						}
					]
				},
				{
					"id": 1842,
					"name": "IJsonSerializer",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "Packages a dataframe ready for JSON serialization."
					},
					"children": [
						{
							"id": 1843,
							"name": "writeFile",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1844,
									"name": "writeFile",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Serialize the dataframe to a JSON file in the local file system.\nAsynchronous version."
									},
									"parameters": [
										{
											"id": 1845,
											"name": "filePath",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Specifies the output path for the file.\n\n @returns Returns a promise that resolves when the file has been written.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Promise",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/dataframe.ts",
									"line": 3675,
									"character": 23
								}
							]
						},
						{
							"id": 1846,
							"name": "writeFileSync",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1847,
									"name": "writeFileSync",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Serialize the dataframe to a JSON file in the local file system.\nSynchronous version."
									},
									"parameters": [
										{
											"id": 1848,
											"name": "filePath",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Specifies the output path for the file.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/dataframe.ts",
									"line": 3683,
									"character": 17
								}
							]
						}
					],
					"groups": [
						{
							"title": "Methods",
							"kind": 2048,
							"children": [
								1843,
								1846
							]
						}
					],
					"sources": [
						{
							"fileName": "lib/dataframe.ts",
							"line": 3665,
							"character": 32
						}
					],
					"implementedBy": [
						{
							"type": "reference",
							"name": "JsonSerializer",
							"id": 1849
						}
					]
				},
				{
					"id": 1043,
					"name": "IOrderedDataFrame",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "Interface to a dataframe that has been ordered."
					},
					"typeParameter": [
						{
							"id": 1044,
							"name": "IndexT",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {}
						},
						{
							"id": 1045,
							"name": "ValueT",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {}
						},
						{
							"id": 1046,
							"name": "SortT",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {}
						}
					],
					"children": [
						{
							"id": 1055,
							"name": "__@iterator",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1056,
									"name": "__@iterator",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Get an iterator to enumerate the values of the dataframe."
									},
									"type": {
										"type": "reference",
										"name": "Iterator",
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "ValueT"
											}
										]
									},
									"overwrites": {
										"type": "reference",
										"name": "Iterable.[Symbol.iterator]"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "IDataFrame.[Symbol.iterator]",
										"id": 686
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/dataframe.ts",
									"line": 173,
									"character": 21
								}
							],
							"overwrites": {
								"type": "reference",
								"name": "Iterable.[Symbol.iterator]"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "IDataFrame.[Symbol.iterator]",
								"id": 686
							}
						},
						{
							"id": 1235,
							"name": "after",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1236,
									"name": "after",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Get a new series containing all values after the specified index value (exclusive).",
										"returns": "Returns a new series containing all values after the specified index value.\n"
									},
									"parameters": [
										{
											"id": 1237,
											"name": "indexValue",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The index value to search for.\n"
											},
											"type": {
												"type": "typeParameter",
												"name": "IndexT"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "IDataFrame",
										"id": 683,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "IndexT"
											},
											{
												"type": "typeParameter",
												"name": "ValueT"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "IDataFrame.after",
										"id": 866
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/dataframe.ts",
									"line": 643,
									"character": 9
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "IDataFrame.after",
								"id": 866
							}
						},
						{
							"id": 1173,
							"name": "aggregate",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1174,
									"name": "aggregate",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Aggregate the values in the dataframe.",
										"returns": "Returns a new value that has been aggregated from the input sequence by the 'selector' function.\n"
									},
									"typeParameter": [
										{
											"id": 1175,
											"name": "ToT",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										}
									],
									"parameters": [
										{
											"id": 1176,
											"name": "seedOrSelector",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "reference",
														"name": "AggregateFn",
														"id": 3644,
														"typeArguments": [
															{
																"type": "typeParameter",
																"name": "ValueT"
															},
															{
																"type": "typeParameter",
																"name": "ToT"
															}
														]
													},
													{
														"type": "typeParameter",
														"name": "ToT"
													},
													{
														"type": "reference",
														"name": "IColumnAggregateSpec",
														"id": 672
													}
												]
											}
										},
										{
											"id": 1177,
											"name": "selector",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"text": "Function that takes the seed and then each value in the dataframe and produces the aggregate value.\n"
											},
											"type": {
												"type": "reference",
												"name": "AggregateFn",
												"id": 3644,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "ValueT"
													},
													{
														"type": "typeParameter",
														"name": "ToT"
													}
												]
											}
										}
									],
									"type": {
										"type": "typeParameter",
										"name": "ToT"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "IDataFrame.aggregate",
										"id": 804
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/dataframe.ts",
									"line": 451,
									"character": 13
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "IDataFrame.aggregate",
								"id": 804
							}
						},
						{
							"id": 1217,
							"name": "all",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1218,
									"name": "all",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Determine if the predicate returns truthy for all values in the series.\nReturns false as soon as the predicate evaluates to falsy.\nReturns true if the predicate returns truthy for all values in the series.\nReturns false if the series is empty.",
										"returns": "Returns true if the predicate has returned truthy for every value in the sequence, otherwise returns false.\n"
									},
									"parameters": [
										{
											"id": 1219,
											"name": "predicate",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Predicate function that receives each value in turn and returns truthy for a match, otherwise falsy.\n"
											},
											"type": {
												"type": "reference",
												"name": "PredicateFn",
												"id": 152,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "ValueT"
													}
												]
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "IDataFrame.all",
										"id": 848
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/dataframe.ts",
									"line": 582,
									"character": 7
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "IDataFrame.all",
								"id": 848
							}
						},
						{
							"id": 1220,
							"name": "any",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1221,
									"name": "any",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Determine if the predicate returns truthy for any of the values in the series.\nReturns true as soon as the predicate returns truthy.\nReturns false if the predicate never returns truthy.\nIf no predicate is specified the value itself is checked.",
										"returns": "Returns true if the predicate has returned truthy for any value in the sequence, otherwise returns false.\n"
									},
									"parameters": [
										{
											"id": 1222,
											"name": "predicate",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "reference",
												"name": "PredicateFn",
												"id": 152,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "ValueT"
													}
												]
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "IDataFrame.any",
										"id": 851
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/dataframe.ts",
									"line": 594,
									"character": 7
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "IDataFrame.any",
								"id": 851
							}
						},
						{
							"id": 1388,
							"name": "appendPair",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1389,
									"name": "appendPair",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Append a pair to the end of a dataframe.",
										"returns": "Returns a new dataframe with the specified pair appended.\n"
									},
									"parameters": [
										{
											"id": 1390,
											"name": "pair",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The pair to append.\n"
											},
											"type": {
												"type": "tuple",
												"elements": [
													{
														"type": "typeParameter",
														"name": "IndexT"
													},
													{
														"type": "typeParameter",
														"name": "ValueT"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "IDataFrame",
										"id": 683,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "IndexT"
											},
											{
												"type": "typeParameter",
												"name": "ValueT"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "IDataFrame.appendPair",
										"id": 1019
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/dataframe.ts",
									"line": 950,
									"character": 14
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "IDataFrame.appendPair",
								"id": 1019
							}
						},
						{
							"id": 1406,
							"name": "asCSV",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1407,
									"name": "asCSV",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Treat the dataframe as CSV data for purposes of serialization.",
										"returns": "Returns an object that represents the dataframe for serialization in the CSV format. Call `writeFile`, `writeFileSync` to output the dataframe via different media.\n"
									},
									"type": {
										"type": "reference",
										"name": "ICsvSerializer",
										"id": 1822
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "IDataFrame.asCSV",
										"id": 1037
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/dataframe.ts",
									"line": 1004,
									"character": 9
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "IDataFrame.asCSV",
								"id": 1037
							}
						},
						{
							"id": 1408,
							"name": "asJSON",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1409,
									"name": "asJSON",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Treat the dataframe as JSON data for purposes of serialization.",
										"returns": "Returns an object that can serialize the dataframe in the JSON format. Call `writeFile` or `writeFileSync` to output the dataframe via different media.\n"
									},
									"type": {
										"type": "reference",
										"name": "IJsonSerializer",
										"id": 1842
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "IDataFrame.asJSON",
										"id": 1039
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/dataframe.ts",
									"line": 1011,
									"character": 10
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "IDataFrame.asJSON",
								"id": 1039
							}
						},
						{
							"id": 1202,
							"name": "at",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1203,
									"name": "at",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Get the value at a specified index.",
										"returns": "Returns the value from the specified index in the sequence or undefined if there is no such index in the series.\n"
									},
									"parameters": [
										{
											"id": 1204,
											"name": "index",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Index to for which to retreive the value.\n"
											},
											"type": {
												"type": "typeParameter",
												"name": "IndexT"
											}
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "typeParameter",
												"name": "ValueT"
											},
											{
												"type": "intrinsic",
												"name": "undefined"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "IDataFrame.at",
										"id": 833
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/dataframe.ts",
									"line": 534,
									"character": 6
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "IDataFrame.at",
								"id": 833
							}
						},
						{
							"id": 1261,
							"name": "bake",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1262,
									"name": "bake",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Forces lazy evaluation to complete and 'bakes' the dataframe into memory.",
										"returns": "Returns a dataframe that has been 'baked', all lazy evaluation has completed.\n"
									},
									"type": {
										"type": "reference",
										"name": "IDataFrame",
										"id": 683,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "IndexT"
											},
											{
												"type": "typeParameter",
												"name": "ValueT"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "IDataFrame.bake",
										"id": 892
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/dataframe.ts",
									"line": 715,
									"character": 8
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "IDataFrame.bake",
								"id": 892
							}
						},
						{
							"id": 1232,
							"name": "before",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1233,
									"name": "before",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Get a new series containing all values up to the specified index value (exclusive).",
										"returns": "Returns a new series containing all values up to the specified inde value.\n"
									},
									"parameters": [
										{
											"id": 1234,
											"name": "indexValue",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The index value to search for before ending the new series.\n"
											},
											"type": {
												"type": "typeParameter",
												"name": "IndexT"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "IDataFrame",
										"id": 683,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "IndexT"
											},
											{
												"type": "typeParameter",
												"name": "ValueT"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "IDataFrame.before",
										"id": 863
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/dataframe.ts",
									"line": 634,
									"character": 10
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "IDataFrame.before",
								"id": 863
							}
						},
						{
							"id": 1238,
							"name": "between",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1239,
									"name": "between",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Get a new dataframe containing all values between the specified index values (inclusive).",
										"returns": "Returns a new dataframe containing all values between the specified index values (inclusive).\n"
									},
									"parameters": [
										{
											"id": 1240,
											"name": "startIndexValue",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The index where the new sequence starts."
											},
											"type": {
												"type": "typeParameter",
												"name": "IndexT"
											}
										},
										{
											"id": 1241,
											"name": "endIndexValue",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The index where the new sequence ends.\n"
											},
											"type": {
												"type": "typeParameter",
												"name": "IndexT"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "IDataFrame",
										"id": 683,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "IndexT"
											},
											{
												"type": "typeParameter",
												"name": "ValueT"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "IDataFrame.between",
										"id": 869
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/dataframe.ts",
									"line": 653,
									"character": 11
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "IDataFrame.between",
								"id": 869
							}
						},
						{
							"id": 1109,
							"name": "bringToBack",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1110,
									"name": "bringToBack",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Bring the name column (or columns) to the back, making it (or them) the last column(s) in the data-frame.",
										"returns": "Returns a new dataframe with 1 or more columns bought to the back of the column ordering.\n"
									},
									"parameters": [
										{
											"id": 1111,
											"name": "columnOrColumns",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Specifies the column or columns to bring to the back.\n"
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "array",
														"elementType": {
															"type": "intrinsic",
															"name": "string"
														}
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "IDataFrame",
										"id": 683,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "IndexT"
											},
											{
												"type": "typeParameter",
												"name": "ValueT"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "IDataFrame.bringToBack",
										"id": 740
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/dataframe.ts",
									"line": 306,
									"character": 15
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "IDataFrame.bringToBack",
								"id": 740
							}
						},
						{
							"id": 1106,
							"name": "bringToFront",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1107,
									"name": "bringToFront",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Bring the name column (or columns) to the front, making it (or them) the first column(s) in the data-frame.",
										"returns": "Returns a new dataframe with 1 or more columns bought to the front of the column ordering.\n"
									},
									"parameters": [
										{
											"id": 1108,
											"name": "columnOrColumns",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Specifies the column or columns to bring to the front.\n"
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "array",
														"elementType": {
															"type": "intrinsic",
															"name": "string"
														}
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "IDataFrame",
										"id": 683,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "IndexT"
											},
											{
												"type": "typeParameter",
												"name": "ValueT"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "IDataFrame.bringToFront",
										"id": 737
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/dataframe.ts",
									"line": 297,
									"character": 16
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "IDataFrame.bringToFront",
								"id": 737
							}
						},
						{
							"id": 1277,
							"name": "concat",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1278,
									"name": "concat",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Concatenate multiple other dataframes onto this dataframe.",
										"returns": "Returns a single dataframe concatenated from multiple input dataframes.\n"
									},
									"parameters": [
										{
											"id": 1279,
											"name": "dataframes",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isRest": true
											},
											"comment": {
												"text": "Multiple arguments. Each can be either a dataframe or an array of dataframes.\n"
											},
											"type": {
												"type": "array",
												"elementType": {
													"type": "union",
													"types": [
														{
															"type": "reference",
															"name": "IDataFrame",
															"id": 683,
															"typeArguments": [
																{
																	"type": "unknown",
																	"name": "IndexT"
																},
																{
																	"type": "unknown",
																	"name": "ValueT"
																}
															]
														},
														{
															"type": "array",
															"elementType": {
																"type": "reference",
																"name": "IDataFrame",
																"id": 683,
																"typeArguments": [
																	{
																		"type": "unknown",
																		"name": "IndexT"
																	},
																	{
																		"type": "unknown",
																		"name": "ValueT"
																	}
																]
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "IDataFrame",
										"id": 683,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "IndexT"
											},
											{
												"type": "typeParameter",
												"name": "ValueT"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "IDataFrame.concat",
										"id": 908
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/dataframe.ts",
									"line": 758,
									"character": 10
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "IDataFrame.concat",
								"id": 908
							}
						},
						{
							"id": 1196,
							"name": "count",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1197,
									"name": "count",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Count the number of values in the series.",
										"returns": "Returns the count of all values in the series.\n"
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "IDataFrame.count",
										"id": 827
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/dataframe.ts",
									"line": 511,
									"character": 9
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "IDataFrame.count",
								"id": 827
							}
						},
						{
							"id": 1395,
							"name": "defaultIfEmpty",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1396,
									"name": "defaultIfEmpty",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Returns the specified default sequence if the dataframe is empty.",
										"returns": "Returns 'defaultSequence' if the dataframe is empty.\n"
									},
									"parameters": [
										{
											"id": 1397,
											"name": "defaultSequence",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Default sequence to return if the dataframe is empty.\n"
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "array",
														"elementType": {
															"type": "typeParameter",
															"name": "ValueT"
														}
													},
													{
														"type": "reference",
														"name": "IDataFrame",
														"id": 683,
														"typeArguments": [
															{
																"type": "typeParameter",
																"name": "IndexT"
															},
															{
																"type": "typeParameter",
																"name": "ValueT"
															}
														]
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "IDataFrame",
										"id": 683,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "IndexT"
											},
											{
												"type": "typeParameter",
												"name": "ValueT"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "IDataFrame.defaultIfEmpty",
										"id": 1026
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/dataframe.ts",
									"line": 969,
									"character": 18
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "IDataFrame.defaultIfEmpty",
								"id": 1026
							}
						},
						{
							"id": 1151,
							"name": "deflate",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1152,
									"name": "deflate",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Deflate a data-frame to a series.",
										"returns": "Returns a series that was created from the input dataframe.\n"
									},
									"typeParameter": [
										{
											"id": 1153,
											"name": "ToT",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										}
									],
									"parameters": [
										{
											"id": 1154,
											"name": "selector",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "reference",
												"name": "SelectorWithIndexFn",
												"id": 3569,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "ValueT"
													},
													{
														"type": "typeParameter",
														"name": "ToT"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "ISeries",
										"id": 2287,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "IndexT"
											},
											{
												"type": "typeParameter",
												"name": "ToT"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "IDataFrame.deflate",
										"id": 782
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/dataframe.ts",
									"line": 394,
									"character": 11
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "IDataFrame.deflate",
								"id": 782
							}
						},
						{
							"id": 1398,
							"name": "detectTypes",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1399,
									"name": "detectTypes",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Detect the types of the values in the dataframe.",
										"returns": "Returns a dataframe that describes the data types contained in the input series or dataframe.\n"
									},
									"type": {
										"type": "reference",
										"name": "IDataFrame",
										"id": 683,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "number"
											},
											{
												"type": "reference",
												"name": "ITypeFrequency",
												"id": 675
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "IDataFrame.detectTypes",
										"id": 1029
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/dataframe.ts",
									"line": 976,
									"character": 15
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "IDataFrame.detectTypes",
								"id": 1029
							}
						},
						{
							"id": 1400,
							"name": "detectValues",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1401,
									"name": "detectValues",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Detect the frequency of the values in the dataframe.",
										"returns": "Returns a dataframe that describes the values contained in the dataframe.\n"
									},
									"type": {
										"type": "reference",
										"name": "IDataFrame",
										"id": 683,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "number"
											},
											{
												"type": "reference",
												"name": "IValueFrequency",
												"id": 679
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "IDataFrame.detectValues",
										"id": 1031
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/dataframe.ts",
									"line": 983,
									"character": 16
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "IDataFrame.detectValues",
								"id": 1031
							}
						},
						{
							"id": 1265,
							"name": "distinct",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1266,
									"name": "distinct",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Returns only values in the dataframe that have distinct values.",
										"returns": "Returns a dataframe containing only unique values as determined by the 'selector' function.\n"
									},
									"typeParameter": [
										{
											"id": 1267,
											"name": "ToT",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										}
									],
									"parameters": [
										{
											"id": 1268,
											"name": "selector",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"text": "Selects the value used to compare for duplicates.\n"
											},
											"type": {
												"type": "reference",
												"name": "SelectorFn",
												"id": 66,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "ValueT"
													},
													{
														"type": "typeParameter",
														"name": "ToT"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "IDataFrame",
										"id": 683,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "IndexT"
											},
											{
												"type": "typeParameter",
												"name": "ValueT"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "IDataFrame.distinct",
										"id": 896
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/dataframe.ts",
									"line": 731,
									"character": 12
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "IDataFrame.distinct",
								"id": 896
							}
						},
						{
							"id": 1098,
							"name": "dropSeries",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1099,
									"name": "dropSeries",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Create a new data frame with the requested column or columns dropped.",
										"returns": "Returns a new dataframe with a particular name column or columns removed.\n"
									},
									"typeParameter": [
										{
											"id": 1100,
											"name": "NewValueT",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										}
									],
									"parameters": [
										{
											"id": 1101,
											"name": "columnOrColumns",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Specifies the column name (a string) or columns (array of column names) to drop.\n"
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "array",
														"elementType": {
															"type": "intrinsic",
															"name": "string"
														}
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "IDataFrame",
										"id": 683,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "IndexT"
											},
											{
												"type": "typeParameter",
												"name": "NewValueT"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "IDataFrame.dropSeries",
										"id": 729
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/dataframe.ts",
									"line": 278,
									"character": 14
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "IDataFrame.dropSeries",
								"id": 729
							}
						},
						{
							"id": 1229,
							"name": "endAt",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1230,
									"name": "endAt",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Get a new series containing all values up until and including the specified index value (inclusive).",
										"returns": "Returns a new series containing all values up until and including the specified index value.\n"
									},
									"parameters": [
										{
											"id": 1231,
											"name": "indexValue",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The index value to search for before ending the new series.\n"
											},
											"type": {
												"type": "typeParameter",
												"name": "IndexT"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "IDataFrame",
										"id": 683,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "IndexT"
											},
											{
												"type": "typeParameter",
												"name": "ValueT"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "IDataFrame.endAt",
										"id": 860
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/dataframe.ts",
									"line": 625,
									"character": 9
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "IDataFrame.endAt",
								"id": 860
							}
						},
						{
							"id": 1089,
							"name": "ensureSeries",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1090,
									"name": "ensureSeries",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Add a series if it doesn't already exist.",
										"returns": "Returns a new dataframe with the specified series added, if the series didn't already exist. Otherwise if the requested series already exists the same dataframe is returned.\n"
									},
									"typeParameter": [
										{
											"id": 1091,
											"name": "SeriesValueT",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										}
									],
									"parameters": [
										{
											"id": 1092,
											"name": "columnNameOrSpec",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The name of the series to add or a column spec that defines the new column."
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "reference",
														"name": "IColumnGenSpec",
														"id": 663
													}
												]
											}
										},
										{
											"id": 1093,
											"name": "series",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"text": "The series to add to the dataframe. Can also be a function that returns the series.\n"
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "reference",
														"name": "ISeries",
														"id": 2287,
														"typeArguments": [
															{
																"type": "typeParameter",
																"name": "IndexT"
															},
															{
																"type": "typeParameter",
																"name": "SeriesValueT"
															}
														]
													},
													{
														"type": "reference",
														"name": "SeriesSelectorFn",
														"id": 2261,
														"typeArguments": [
															{
																"type": "typeParameter",
																"name": "IndexT"
															},
															{
																"type": "typeParameter",
																"name": "ValueT"
															},
															{
																"type": "typeParameter",
																"name": "SeriesValueT"
															}
														]
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "IDataFrame",
										"id": 683,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "IndexT"
											},
											{
												"type": "typeParameter",
												"name": "ValueT"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "IDataFrame.ensureSeries",
										"id": 720
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/dataframe.ts",
									"line": 260,
									"character": 16
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "IDataFrame.ensureSeries",
								"id": 720
							}
						},
						{
							"id": 1332,
							"name": "except",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1333,
									"name": "except",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Returns the exception of values between two dataframes.",
										"returns": "Returns the difference between the two dataframes.\n"
									},
									"typeParameter": [
										{
											"id": 1334,
											"name": "InnerIndexT",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										},
										{
											"id": 1335,
											"name": "InnerValueT",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										},
										{
											"id": 1336,
											"name": "KeyT",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										}
									],
									"parameters": [
										{
											"id": 1337,
											"name": "inner",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The other dataframe to combine."
											},
											"type": {
												"type": "reference",
												"name": "IDataFrame",
												"id": 683,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "InnerIndexT"
													},
													{
														"type": "typeParameter",
														"name": "InnerValueT"
													}
												]
											}
										},
										{
											"id": 1338,
											"name": "outerSelector",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "reference",
												"name": "SelectorFn",
												"id": 66,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "ValueT"
													},
													{
														"type": "typeParameter",
														"name": "KeyT"
													}
												]
											}
										},
										{
											"id": 1339,
											"name": "innerSelector",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "reference",
												"name": "SelectorFn",
												"id": 66,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "InnerValueT"
													},
													{
														"type": "typeParameter",
														"name": "KeyT"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "IDataFrame",
										"id": 683,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "IndexT"
											},
											{
												"type": "typeParameter",
												"name": "ValueT"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "IDataFrame.except",
										"id": 963
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/dataframe.ts",
									"line": 830,
									"character": 10
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "IDataFrame.except",
								"id": 963
							}
						},
						{
							"id": 1080,
							"name": "expectSeries",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1081,
									"name": "expectSeries",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Verify the existance of a column and return it.\nThrows an exception if the column doesn't exist."
									},
									"typeParameter": [
										{
											"id": 1082,
											"name": "SeriesValueT",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										}
									],
									"parameters": [
										{
											"id": 1083,
											"name": "columnName",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Name or index of the column to retreive.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "ISeries",
										"id": 2287,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "IndexT"
											},
											{
												"type": "typeParameter",
												"name": "SeriesValueT"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "IDataFrame.expectSeries",
										"id": 711
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/dataframe.ts",
									"line": 240,
									"character": 16
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "IDataFrame.expectSeries",
								"id": 711
							}
						},
						{
							"id": 1391,
							"name": "fillGaps",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1392,
									"name": "fillGaps",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Fill gaps in a dataframe.",
										"returns": "Returns a new dataframe with gaps filled in.\n"
									},
									"parameters": [
										{
											"id": 1393,
											"name": "comparer",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Comparer that is passed pairA and pairB, two consecutive rows, return truthy if there is a gap between the rows, or falsey if there is no gap."
											},
											"type": {
												"type": "reference",
												"name": "ComparerFn",
												"id": 371,
												"typeArguments": [
													{
														"type": "tuple",
														"elements": [
															{
																"type": "typeParameter",
																"name": "IndexT"
															},
															{
																"type": "typeParameter",
																"name": "ValueT"
															}
														]
													},
													{
														"type": "tuple",
														"elements": [
															{
																"type": "typeParameter",
																"name": "IndexT"
															},
															{
																"type": "typeParameter",
																"name": "ValueT"
															}
														]
													}
												]
											}
										},
										{
											"id": 1394,
											"name": "generator",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Generator that is passed pairA and pairB, two consecutive rows, returns an array of pairs that fills the gap between the rows.\n"
											},
											"type": {
												"type": "reference",
												"name": "GapFillFn",
												"id": 3663,
												"typeArguments": [
													{
														"type": "tuple",
														"elements": [
															{
																"type": "typeParameter",
																"name": "IndexT"
															},
															{
																"type": "typeParameter",
																"name": "ValueT"
															}
														]
													},
													{
														"type": "tuple",
														"elements": [
															{
																"type": "typeParameter",
																"name": "IndexT"
															},
															{
																"type": "typeParameter",
																"name": "ValueT"
															}
														]
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "IDataFrame",
										"id": 683,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "IndexT"
											},
											{
												"type": "typeParameter",
												"name": "ValueT"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "IDataFrame.fillGaps",
										"id": 1022
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/dataframe.ts",
									"line": 960,
									"character": 12
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "IDataFrame.fillGaps",
								"id": 1022
							}
						},
						{
							"id": 1198,
							"name": "first",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1199,
									"name": "first",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Get the first value of the series.",
										"returns": "Returns the first value of the series.\n"
									},
									"type": {
										"type": "typeParameter",
										"name": "ValueT"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "IDataFrame.first",
										"id": 829
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/dataframe.ts",
									"line": 518,
									"character": 9
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "IDataFrame.first",
								"id": 829
							}
						},
						{
							"id": 1214,
							"name": "forEach",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1215,
									"name": "forEach",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Invoke a callback function for each value in the series.",
										"returns": "Returns the input series with no modifications.\n"
									},
									"parameters": [
										{
											"id": 1216,
											"name": "callback",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The calback to invoke for each value.\n"
											},
											"type": {
												"type": "reference",
												"name": "CallbackFn",
												"id": 3563,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "ValueT"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "IDataFrame",
										"id": 683,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "IndexT"
											},
											{
												"type": "typeParameter",
												"name": "ValueT"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "IDataFrame.forEach",
										"id": 845
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/dataframe.ts",
									"line": 570,
									"character": 11
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "IDataFrame.forEach",
								"id": 845
							}
						},
						{
							"id": 1147,
							"name": "generateSeries",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1148,
									"name": "generateSeries",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Generate new columns based on existing rows.",
										"returns": "Returns a new dataframe with 1 or more new columns.\n"
									},
									"typeParameter": [
										{
											"id": 1149,
											"name": "NewValueT",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										}
									],
									"parameters": [
										{
											"id": 1150,
											"name": "generator",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Generator function that transforms each row to a new set of columns.\n"
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "reference",
														"name": "SelectorWithIndexFn",
														"id": 3569,
														"typeArguments": [
															{
																"type": "intrinsic",
																"name": "any"
															},
															{
																"type": "intrinsic",
																"name": "any"
															}
														]
													},
													{
														"type": "reference",
														"name": "IColumnTransformSpec",
														"id": 669
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "IDataFrame",
										"id": 683,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "IndexT"
											},
											{
												"type": "typeParameter",
												"name": "NewValueT"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "IDataFrame.generateSeries",
										"id": 778
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/dataframe.ts",
									"line": 385,
									"character": 18
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "IDataFrame.generateSeries",
								"id": 778
							}
						},
						{
							"id": 1057,
							"name": "getColumnNames",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1058,
									"name": "getColumnNames",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Get the names of the columns in the dataframe.",
										"returns": "Returns an array of the column names in the dataframe.\n"
									},
									"type": {
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "string"
										}
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "IDataFrame.getColumnNames",
										"id": 688
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/dataframe.ts",
									"line": 180,
									"character": 18
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "IDataFrame.getColumnNames",
								"id": 688
							}
						},
						{
							"id": 1059,
							"name": "getColumns",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1060,
									"name": "getColumns",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Retreive a collection of all columns in the dataframe.",
										"returns": "Returns a series the columns in the dataframe.\n"
									},
									"type": {
										"type": "reference",
										"name": "ISeries",
										"id": 2287,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "number"
											},
											{
												"type": "reference",
												"name": "IColumn",
												"id": 660
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "IDataFrame.getColumns",
										"id": 690
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/dataframe.ts",
									"line": 187,
									"character": 14
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "IDataFrame.getColumns",
								"id": 690
							}
						},
						{
							"id": 1061,
							"name": "getIndex",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1062,
									"name": "getIndex",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Get the index for the dataframe."
									},
									"type": {
										"type": "reference",
										"name": "IIndex",
										"id": 3671,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "IndexT"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "IDataFrame.getIndex",
										"id": 692
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/dataframe.ts",
									"line": 192,
									"character": 12
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "IDataFrame.getIndex",
								"id": 692
							}
						},
						{
							"id": 1073,
							"name": "getSeries",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1074,
									"name": "getSeries",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Retreive a series from a column of the dataframe."
									},
									"typeParameter": [
										{
											"id": 1075,
											"name": "SeriesValueT",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										}
									],
									"parameters": [
										{
											"id": 1076,
											"name": "columnName",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Specifies the name of the column that contains the series to retreive.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "ISeries",
										"id": 2287,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "IndexT"
											},
											{
												"type": "typeParameter",
												"name": "SeriesValueT"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "IDataFrame.getSeries",
										"id": 704
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/dataframe.ts",
									"line": 224,
									"character": 13
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "IDataFrame.getSeries",
								"id": 704
							}
						},
						{
							"id": 1269,
							"name": "groupBy",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1270,
									"name": "groupBy",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Group the dataframe according to the selector.",
										"returns": "Returns a series of groups. Each group is a dataframe with values that have been grouped by the 'selector' function.\n"
									},
									"typeParameter": [
										{
											"id": 1271,
											"name": "GroupT",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										}
									],
									"parameters": [
										{
											"id": 1272,
											"name": "selector",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Selector that defines the value to group by.\n"
											},
											"type": {
												"type": "reference",
												"name": "SelectorWithIndexFn",
												"id": 3569,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "ValueT"
													},
													{
														"type": "typeParameter",
														"name": "GroupT"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "ISeries",
										"id": 2287,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "number"
											},
											{
												"type": "reference",
												"name": "IDataFrame",
												"id": 683,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "IndexT"
													},
													{
														"type": "typeParameter",
														"name": "ValueT"
													}
												]
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "IDataFrame.groupBy",
										"id": 900
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/dataframe.ts",
									"line": 740,
									"character": 11
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "IDataFrame.groupBy",
								"id": 900
							}
						},
						{
							"id": 1273,
							"name": "groupSequentialBy",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1274,
									"name": "groupSequentialBy",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Group sequential values into a series of windows.",
										"returns": "Returns a series of groups. Each group is a series with values that have been grouped by the 'selector' function.\n"
									},
									"typeParameter": [
										{
											"id": 1275,
											"name": "GroupT",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										}
									],
									"parameters": [
										{
											"id": 1276,
											"name": "selector",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"text": "Optional selector that defines the value to group by.\n"
											},
											"type": {
												"type": "reference",
												"name": "SelectorFn",
												"id": 66,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "ValueT"
													},
													{
														"type": "typeParameter",
														"name": "GroupT"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "ISeries",
										"id": 2287,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "number"
											},
											{
												"type": "reference",
												"name": "IDataFrame",
												"id": 683,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "IndexT"
													},
													{
														"type": "typeParameter",
														"name": "ValueT"
													}
												]
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "IDataFrame.groupSequentialBy",
										"id": 904
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/dataframe.ts",
									"line": 749,
									"character": 21
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "IDataFrame.groupSequentialBy",
								"id": 904
							}
						},
						{
							"id": 1077,
							"name": "hasSeries",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1078,
									"name": "hasSeries",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Returns true if the column with the requested name exists in the dataframe."
									},
									"parameters": [
										{
											"id": 1079,
											"name": "columnName",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Name of the column to check.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "IDataFrame.hasSeries",
										"id": 708
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/dataframe.ts",
									"line": 231,
									"character": 13
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "IDataFrame.hasSeries",
								"id": 708
							}
						},
						{
							"id": 1205,
							"name": "head",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1206,
									"name": "head",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Get X values from the start of the series.",
										"returns": "Returns a new series that has only the specified number of values taken from the start of the input sequence.\n"
									},
									"parameters": [
										{
											"id": 1207,
											"name": "numValues",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Number of values to take.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "IDataFrame",
										"id": 683,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "IndexT"
											},
											{
												"type": "typeParameter",
												"name": "ValueT"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "IDataFrame.head",
										"id": 836
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/dataframe.ts",
									"line": 543,
									"character": 8
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "IDataFrame.head",
								"id": 836
							}
						},
						{
							"id": 1155,
							"name": "inflateSeries",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1156,
									"name": "inflateSeries",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Inflate a named series in the data-frame to 1 or more new series in the new dataframe.",
										"returns": "Returns a new dataframe with a column inflated to 1 or more new columns.\n"
									},
									"typeParameter": [
										{
											"id": 1157,
											"name": "NewValueT",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										}
									],
									"parameters": [
										{
											"id": 1158,
											"name": "columnName",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Name or index of the column to retreive."
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 1159,
											"name": "selector",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "reference",
												"name": "SelectorWithIndexFn",
												"id": 3569,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "IndexT"
													},
													{
														"type": "intrinsic",
														"name": "any"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "IDataFrame",
										"id": 683,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "IndexT"
											},
											{
												"type": "typeParameter",
												"name": "ValueT"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "IDataFrame.inflateSeries",
										"id": 786
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/dataframe.ts",
									"line": 404,
									"character": 17
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "IDataFrame.inflateSeries",
								"id": 786
							}
						},
						{
							"id": 1385,
							"name": "insertPair",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1386,
									"name": "insertPair",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Insert a pair at the start of the dataframe.",
										"returns": "Returns a new dataframe with the specified pair inserted.\n"
									},
									"parameters": [
										{
											"id": 1387,
											"name": "pair",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The pair to insert.\n"
											},
											"type": {
												"type": "tuple",
												"elements": [
													{
														"type": "typeParameter",
														"name": "IndexT"
													},
													{
														"type": "typeParameter",
														"name": "ValueT"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "IDataFrame",
										"id": 683,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "IndexT"
											},
											{
												"type": "typeParameter",
												"name": "ValueT"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "IDataFrame.insertPair",
										"id": 1016
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/dataframe.ts",
									"line": 941,
									"character": 14
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "IDataFrame.insertPair",
								"id": 1016
							}
						},
						{
							"id": 1324,
							"name": "intersection",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1325,
									"name": "intersection",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Returns the intersection of values between two dataframes.",
										"returns": "Returns the intersection of two dataframes.\n"
									},
									"typeParameter": [
										{
											"id": 1326,
											"name": "InnerIndexT",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										},
										{
											"id": 1327,
											"name": "InnerValueT",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										},
										{
											"id": 1328,
											"name": "KeyT",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										}
									],
									"parameters": [
										{
											"id": 1329,
											"name": "inner",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The other dataframes to combine."
											},
											"type": {
												"type": "reference",
												"name": "IDataFrame",
												"id": 683,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "InnerIndexT"
													},
													{
														"type": "typeParameter",
														"name": "InnerValueT"
													}
												]
											}
										},
										{
											"id": 1330,
											"name": "outerSelector",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "reference",
												"name": "SelectorFn",
												"id": 66,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "ValueT"
													},
													{
														"type": "typeParameter",
														"name": "KeyT"
													}
												]
											}
										},
										{
											"id": 1331,
											"name": "innerSelector",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "reference",
												"name": "SelectorFn",
												"id": 66,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "InnerValueT"
													},
													{
														"type": "typeParameter",
														"name": "KeyT"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "IDataFrame",
										"id": 683,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "IndexT"
											},
											{
												"type": "typeParameter",
												"name": "ValueT"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "IDataFrame.intersection",
										"id": 955
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/dataframe.ts",
									"line": 814,
									"character": 16
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "IDataFrame.intersection",
								"id": 955
							}
						},
						{
							"id": 1340,
							"name": "join",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1341,
									"name": "join",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Correlates the elements of two dataframes on matching keys.",
										"returns": "Returns the joined dataframe.\n"
									},
									"typeParameter": [
										{
											"id": 1342,
											"name": "KeyT",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										},
										{
											"id": 1343,
											"name": "InnerIndexT",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										},
										{
											"id": 1344,
											"name": "InnerValueT",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										},
										{
											"id": 1345,
											"name": "ResultValueT",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										}
									],
									"parameters": [
										{
											"id": 1346,
											"name": "inner",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The inner dataframe to join."
											},
											"type": {
												"type": "reference",
												"name": "IDataFrame",
												"id": 683,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "InnerIndexT"
													},
													{
														"type": "typeParameter",
														"name": "InnerValueT"
													}
												]
											}
										},
										{
											"id": 1347,
											"name": "outerKeySelector",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Selector that chooses the join key from the outer sequence."
											},
											"type": {
												"type": "reference",
												"name": "SelectorFn",
												"id": 66,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "ValueT"
													},
													{
														"type": "typeParameter",
														"name": "KeyT"
													}
												]
											}
										},
										{
											"id": 1348,
											"name": "innerKeySelector",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Selector that chooses the join key from the inner sequence."
											},
											"type": {
												"type": "reference",
												"name": "SelectorFn",
												"id": 66,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "InnerValueT"
													},
													{
														"type": "typeParameter",
														"name": "KeyT"
													}
												]
											}
										},
										{
											"id": 1349,
											"name": "resultSelector",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Selector that defines how to merge outer and inner values.\n"
											},
											"type": {
												"type": "reference",
												"name": "JoinFn",
												"id": 3631,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "ValueT"
													},
													{
														"type": "typeParameter",
														"name": "InnerValueT"
													},
													{
														"type": "typeParameter",
														"name": "ResultValueT"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "IDataFrame",
										"id": 683,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "number"
											},
											{
												"type": "typeParameter",
												"name": "ResultValueT"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "IDataFrame.join",
										"id": 971
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/dataframe.ts",
									"line": 847,
									"character": 8
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "IDataFrame.join",
								"id": 971
							}
						},
						{
							"id": 1350,
							"name": "joinOuter",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1351,
									"name": "joinOuter",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Performs an outer join on two dataframes. Correlates the elements based on matching keys.\nIncludes elements from both dataframes that have no correlation in the other dataframe.",
										"returns": "Returns the joined dataframe.\n"
									},
									"typeParameter": [
										{
											"id": 1352,
											"name": "KeyT",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										},
										{
											"id": 1353,
											"name": "InnerIndexT",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										},
										{
											"id": 1354,
											"name": "InnerValueT",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										},
										{
											"id": 1355,
											"name": "ResultValueT",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										}
									],
									"parameters": [
										{
											"id": 1356,
											"name": "inner",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The inner dataframe to join."
											},
											"type": {
												"type": "reference",
												"name": "IDataFrame",
												"id": 683,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "InnerIndexT"
													},
													{
														"type": "typeParameter",
														"name": "InnerValueT"
													}
												]
											}
										},
										{
											"id": 1357,
											"name": "outerKeySelector",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Selector that chooses the join key from the outer sequence."
											},
											"type": {
												"type": "reference",
												"name": "SelectorFn",
												"id": 66,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "ValueT"
													},
													{
														"type": "typeParameter",
														"name": "KeyT"
													}
												]
											}
										},
										{
											"id": 1358,
											"name": "innerKeySelector",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Selector that chooses the join key from the inner sequence."
											},
											"type": {
												"type": "reference",
												"name": "SelectorFn",
												"id": 66,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "InnerValueT"
													},
													{
														"type": "typeParameter",
														"name": "KeyT"
													}
												]
											}
										},
										{
											"id": 1359,
											"name": "resultSelector",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Selector that defines how to merge outer and inner values.\n\nImplementation from here:\n\n\thttp://blogs.geniuscode.net/RyanDHatch/?p=116\n"
											},
											"type": {
												"type": "reference",
												"name": "JoinFn",
												"id": 3631,
												"typeArguments": [
													{
														"type": "union",
														"types": [
															{
																"type": "typeParameter",
																"name": "ValueT"
															},
															{
																"type": "intrinsic",
																"name": "null"
															}
														]
													},
													{
														"type": "union",
														"types": [
															{
																"type": "typeParameter",
																"name": "InnerValueT"
															},
															{
																"type": "intrinsic",
																"name": "null"
															}
														]
													},
													{
														"type": "typeParameter",
														"name": "ResultValueT"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "IDataFrame",
										"id": 683,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "number"
											},
											{
												"type": "typeParameter",
												"name": "ResultValueT"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "IDataFrame.joinOuter",
										"id": 981
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/dataframe.ts",
									"line": 870,
									"character": 13
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "IDataFrame.joinOuter",
								"id": 981
							}
						},
						{
							"id": 1360,
							"name": "joinOuterLeft",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1361,
									"name": "joinOuterLeft",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Performs a left outer join on two dataframe. Correlates the elements based on matching keys.\nIncludes left elements that have no correlation.",
										"returns": "Returns the joined dataframe.\n"
									},
									"typeParameter": [
										{
											"id": 1362,
											"name": "KeyT",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										},
										{
											"id": 1363,
											"name": "InnerIndexT",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										},
										{
											"id": 1364,
											"name": "InnerValueT",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										},
										{
											"id": 1365,
											"name": "ResultValueT",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										}
									],
									"parameters": [
										{
											"id": 1366,
											"name": "inner",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The inner dataframe to join."
											},
											"type": {
												"type": "reference",
												"name": "IDataFrame",
												"id": 683,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "InnerIndexT"
													},
													{
														"type": "typeParameter",
														"name": "InnerValueT"
													}
												]
											}
										},
										{
											"id": 1367,
											"name": "outerKeySelector",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Selector that chooses the join key from the outer sequence."
											},
											"type": {
												"type": "reference",
												"name": "SelectorFn",
												"id": 66,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "ValueT"
													},
													{
														"type": "typeParameter",
														"name": "KeyT"
													}
												]
											}
										},
										{
											"id": 1368,
											"name": "innerKeySelector",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Selector that chooses the join key from the inner sequence."
											},
											"type": {
												"type": "reference",
												"name": "SelectorFn",
												"id": 66,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "InnerValueT"
													},
													{
														"type": "typeParameter",
														"name": "KeyT"
													}
												]
											}
										},
										{
											"id": 1369,
											"name": "resultSelector",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Selector that defines how to merge outer and inner values.\n\nImplementation from here:\n\n\thttp://blogs.geniuscode.net/RyanDHatch/?p=116\n"
											},
											"type": {
												"type": "reference",
												"name": "JoinFn",
												"id": 3631,
												"typeArguments": [
													{
														"type": "union",
														"types": [
															{
																"type": "typeParameter",
																"name": "ValueT"
															},
															{
																"type": "intrinsic",
																"name": "null"
															}
														]
													},
													{
														"type": "union",
														"types": [
															{
																"type": "typeParameter",
																"name": "InnerValueT"
															},
															{
																"type": "intrinsic",
																"name": "null"
															}
														]
													},
													{
														"type": "typeParameter",
														"name": "ResultValueT"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "IDataFrame",
										"id": 683,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "number"
											},
											{
												"type": "typeParameter",
												"name": "ResultValueT"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "IDataFrame.joinOuterLeft",
										"id": 991
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/dataframe.ts",
									"line": 894,
									"character": 17
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "IDataFrame.joinOuterLeft",
								"id": 991
							}
						},
						{
							"id": 1370,
							"name": "joinOuterRight",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1371,
									"name": "joinOuterRight",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Performs a right outer join on two dataframes. Correlates the elements based on matching keys.\nIncludes right elements that have no correlation.",
										"returns": "Returns the joined dataframe.\n"
									},
									"typeParameter": [
										{
											"id": 1372,
											"name": "KeyT",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										},
										{
											"id": 1373,
											"name": "InnerIndexT",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										},
										{
											"id": 1374,
											"name": "InnerValueT",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										},
										{
											"id": 1375,
											"name": "ResultValueT",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										}
									],
									"parameters": [
										{
											"id": 1376,
											"name": "inner",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The inner dataframe to join."
											},
											"type": {
												"type": "reference",
												"name": "IDataFrame",
												"id": 683,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "InnerIndexT"
													},
													{
														"type": "typeParameter",
														"name": "InnerValueT"
													}
												]
											}
										},
										{
											"id": 1377,
											"name": "outerKeySelector",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Selector that chooses the join key from the outer sequence."
											},
											"type": {
												"type": "reference",
												"name": "SelectorFn",
												"id": 66,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "ValueT"
													},
													{
														"type": "typeParameter",
														"name": "KeyT"
													}
												]
											}
										},
										{
											"id": 1378,
											"name": "innerKeySelector",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Selector that chooses the join key from the inner sequence."
											},
											"type": {
												"type": "reference",
												"name": "SelectorFn",
												"id": 66,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "InnerValueT"
													},
													{
														"type": "typeParameter",
														"name": "KeyT"
													}
												]
											}
										},
										{
											"id": 1379,
											"name": "resultSelector",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Selector that defines how to merge outer and inner values.\n\nImplementation from here:\n\n\thttp://blogs.geniuscode.net/RyanDHatch/?p=116\n"
											},
											"type": {
												"type": "reference",
												"name": "JoinFn",
												"id": 3631,
												"typeArguments": [
													{
														"type": "union",
														"types": [
															{
																"type": "typeParameter",
																"name": "ValueT"
															},
															{
																"type": "intrinsic",
																"name": "null"
															}
														]
													},
													{
														"type": "union",
														"types": [
															{
																"type": "typeParameter",
																"name": "InnerValueT"
															},
															{
																"type": "intrinsic",
																"name": "null"
															}
														]
													},
													{
														"type": "typeParameter",
														"name": "ResultValueT"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "IDataFrame",
										"id": 683,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "number"
											},
											{
												"type": "typeParameter",
												"name": "ResultValueT"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "IDataFrame.joinOuterRight",
										"id": 1001
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/dataframe.ts",
									"line": 917,
									"character": 18
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "IDataFrame.joinOuterRight",
								"id": 1001
							}
						},
						{
							"id": 1200,
							"name": "last",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1201,
									"name": "last",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Get the last value of the series.",
										"returns": "Returns the last value of the series.\n"
									},
									"type": {
										"type": "typeParameter",
										"name": "ValueT"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "IDataFrame.last",
										"id": 831
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/dataframe.ts",
									"line": 525,
									"character": 8
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "IDataFrame.last",
								"id": 831
							}
						},
						{
							"id": 1223,
							"name": "none",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1224,
									"name": "none",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Determine if the predicate returns truthy for none of the values in the series.\nReturns true for an empty series.\nReturns true if the predicate always returns falsy.\nOtherwise returns false.\nIf no predicate is specified the value itself is checked.",
										"returns": "Returns true if the predicate has returned truthy for no values in the series, otherwise returns false.\n"
									},
									"parameters": [
										{
											"id": 1225,
											"name": "predicate",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "reference",
												"name": "PredicateFn",
												"id": 152,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "ValueT"
													}
												]
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "IDataFrame.none",
										"id": 854
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/dataframe.ts",
									"line": 607,
									"character": 8
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "IDataFrame.none",
								"id": 854
							}
						},
						{
							"id": 1311,
							"name": "orderBy",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1312,
									"name": "orderBy",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Sorts the dataframe by a value defined by the selector (ascending).",
										"returns": "Returns a new ordered dataframe that has been sorted by the value returned by the selector.\n"
									},
									"typeParameter": [
										{
											"id": 1313,
											"name": "SortT",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										}
									],
									"parameters": [
										{
											"id": 1314,
											"name": "selector",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Selects the value to sort by.\n"
											},
											"type": {
												"type": "reference",
												"name": "SelectorWithIndexFn",
												"id": 3569,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "ValueT"
													},
													{
														"type": "typeParameter",
														"name": "SortT"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "IOrderedDataFrame",
										"id": 1043,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "IndexT"
											},
											{
												"type": "typeParameter",
												"name": "ValueT"
											},
											{
												"type": "typeParameter",
												"name": "SortT"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "IDataFrame.orderBy",
										"id": 942
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/dataframe.ts",
									"line": 781,
									"character": 11
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "IDataFrame.orderBy",
								"id": 942
							}
						},
						{
							"id": 1315,
							"name": "orderByDescending",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1316,
									"name": "orderByDescending",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Sorts the dataframe by a value defined by the selector (descending).",
										"returns": "Returns a new ordered dataframe that has been sorted by the value returned by the selector.\n"
									},
									"typeParameter": [
										{
											"id": 1317,
											"name": "SortT",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										}
									],
									"parameters": [
										{
											"id": 1318,
											"name": "selector",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Selects the value to sort by.\n"
											},
											"type": {
												"type": "reference",
												"name": "SelectorWithIndexFn",
												"id": 3569,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "ValueT"
													},
													{
														"type": "typeParameter",
														"name": "SortT"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "IOrderedDataFrame",
										"id": 1043,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "IndexT"
											},
											{
												"type": "typeParameter",
												"name": "ValueT"
											},
											{
												"type": "typeParameter",
												"name": "SortT"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "IDataFrame.orderByDescending",
										"id": 946
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/dataframe.ts",
									"line": 790,
									"character": 21
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "IDataFrame.orderByDescending",
								"id": 946
							}
						},
						{
							"id": 1250,
							"name": "parseDates",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1251,
									"name": "parseDates",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Parse a column with string values to a column with date values.",
										"returns": "Returns a new dataframe with a particular named column parsed as dates.\n"
									},
									"parameters": [
										{
											"id": 1252,
											"name": "columnNameOrNames",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Specifies the column name or array of column names to parse."
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "array",
														"elementType": {
															"type": "intrinsic",
															"name": "string"
														}
													}
												]
											}
										},
										{
											"id": 1253,
											"name": "formatString",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "undefined"
													},
													{
														"type": "intrinsic",
														"name": "string"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "IDataFrame",
										"id": 683,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "IndexT"
											},
											{
												"type": "typeParameter",
												"name": "ValueT"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "IDataFrame.parseDates",
										"id": 881
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/dataframe.ts",
									"line": 689,
									"character": 14
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "IDataFrame.parseDates",
								"id": 881
							}
						},
						{
							"id": 1247,
							"name": "parseFloats",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1248,
									"name": "parseFloats",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Parse a column with string values to a column with float values.",
										"returns": "Returns a new dataframe with a particular named column parsed as floats.\n"
									},
									"parameters": [
										{
											"id": 1249,
											"name": "columnNameOrNames",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Specifies the column name or array of column names to parse.\n"
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "array",
														"elementType": {
															"type": "intrinsic",
															"name": "string"
														}
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "IDataFrame",
										"id": 683,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "IndexT"
											},
											{
												"type": "typeParameter",
												"name": "ValueT"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "IDataFrame.parseFloats",
										"id": 878
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/dataframe.ts",
									"line": 679,
									"character": 15
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "IDataFrame.parseFloats",
								"id": 878
							}
						},
						{
							"id": 1244,
							"name": "parseInts",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1245,
									"name": "parseInts",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Parse a column with string values to a column with int values.",
										"returns": "Returns a new dataframe with a particular named column parsed as ints.\n"
									},
									"parameters": [
										{
											"id": 1246,
											"name": "columnNameOrNames",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Specifies the column name or array of column names to parse.\n"
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "array",
														"elementType": {
															"type": "intrinsic",
															"name": "string"
														}
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "IDataFrame",
										"id": 683,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "IndexT"
											},
											{
												"type": "typeParameter",
												"name": "ValueT"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "IDataFrame.parseInts",
										"id": 875
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/dataframe.ts",
									"line": 670,
									"character": 13
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "IDataFrame.parseInts",
								"id": 875
							}
						},
						{
							"id": 1380,
							"name": "pivot",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1381,
									"name": "pivot",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Reshape (or pivot) a table based on column values.",
										"returns": "Returns a new dataframe that has been pivoted based on a particular column's values.\n"
									},
									"typeParameter": [
										{
											"id": 1382,
											"name": "NewValueT",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										}
									],
									"parameters": [
										{
											"id": 1383,
											"name": "column",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Column name whose values make the new DataFrame's columns."
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 1384,
											"name": "value",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Column name whose values populate the new DataFrame's values.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "IDataFrame",
										"id": 683,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "IndexT"
											},
											{
												"type": "typeParameter",
												"name": "NewValueT"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "IDataFrame.pivot",
										"id": 1011
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/dataframe.ts",
									"line": 932,
									"character": 9
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "IDataFrame.pivot",
								"id": 1011
							}
						},
						{
							"id": 1112,
							"name": "renameSeries",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1113,
									"name": "renameSeries",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Create a new data-frame with renamed series.",
										"returns": "Returns a new dataframe with columns renamed.\n"
									},
									"typeParameter": [
										{
											"id": 1114,
											"name": "NewValueT",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										}
									],
									"parameters": [
										{
											"id": 1115,
											"name": "newColumnNames",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "A column rename spec - maps existing column names to new column names.\n"
											},
											"type": {
												"type": "reference",
												"name": "IColumnRenameSpec",
												"id": 666
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "IDataFrame",
										"id": 683,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "IndexT"
											},
											{
												"type": "typeParameter",
												"name": "NewValueT"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "IDataFrame.renameSeries",
										"id": 743
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/dataframe.ts",
									"line": 315,
									"character": 16
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "IDataFrame.renameSeries",
								"id": 743
							}
						},
						{
							"id": 1102,
							"name": "reorderSeries",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1103,
									"name": "reorderSeries",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Create a new data frame with columns reordered.\nNew column names create new columns (with undefined values), omitting existing column names causes those columns to be dropped.",
										"returns": "Returns a new dataframe with columns remapped according to the specified column layout.\n"
									},
									"typeParameter": [
										{
											"id": 1104,
											"name": "NewValueT",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										}
									],
									"parameters": [
										{
											"id": 1105,
											"name": "columnNames",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The new order for columns.\n"
											},
											"type": {
												"type": "array",
												"elementType": {
													"type": "intrinsic",
													"name": "string"
												}
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "IDataFrame",
										"id": 683,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "IndexT"
											},
											{
												"type": "typeParameter",
												"name": "NewValueT"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "IDataFrame.reorderSeries",
										"id": 733
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/dataframe.ts",
									"line": 288,
									"character": 17
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "IDataFrame.reorderSeries",
								"id": 733
							}
						},
						{
							"id": 1071,
							"name": "resetIndex",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1072,
									"name": "resetIndex",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Resets the index of the dataframe back to the default zero-based sequential integer index.",
										"returns": "Returns a new dataframe with the index reset to the default zero-based index.\n"
									},
									"type": {
										"type": "reference",
										"name": "IDataFrame",
										"id": 683,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "number"
											},
											{
												"type": "typeParameter",
												"name": "ValueT"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "IDataFrame.resetIndex",
										"id": 702
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/dataframe.ts",
									"line": 217,
									"character": 14
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "IDataFrame.resetIndex",
								"id": 702
							}
						},
						{
							"id": 1263,
							"name": "reverse",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1264,
									"name": "reverse",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Reverse the dataframe.",
										"returns": "Returns a new dataframe that is the reverse of the input.\n"
									},
									"type": {
										"type": "reference",
										"name": "IDataFrame",
										"id": 683,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "IndexT"
											},
											{
												"type": "typeParameter",
												"name": "ValueT"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "IDataFrame.reverse",
										"id": 894
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/dataframe.ts",
									"line": 722,
									"character": 11
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "IDataFrame.reverse",
								"id": 894
							}
						},
						{
							"id": 1163,
							"name": "rollingWindow",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1164,
									"name": "rollingWindow",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Segment a dataframe into 'rolling windows'. Returns a new series. Each value in the new series contains a 'window' (or segment) of the original dataframe.",
										"returns": "Returns a new series, each value of which is a 'window' (or segment) of the original dataframe.\n"
									},
									"parameters": [
										{
											"id": 1165,
											"name": "period",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The number of values in the window.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "ISeries",
										"id": 2287,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "number"
											},
											{
												"type": "reference",
												"name": "IDataFrame",
												"id": 683,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "IndexT"
													},
													{
														"type": "typeParameter",
														"name": "ValueT"
													}
												]
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "IDataFrame.rollingWindow",
										"id": 794
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/dataframe.ts",
									"line": 423,
									"character": 17
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "IDataFrame.rollingWindow",
								"id": 794
							}
						},
						{
							"id": 1135,
							"name": "select",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1136,
									"name": "select",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Generate a new dataframe based by calling the selector function on each value.",
										"returns": "Returns a new dataframe that has been transformed by the selector function.\n"
									},
									"typeParameter": [
										{
											"id": 1137,
											"name": "ToT",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										}
									],
									"parameters": [
										{
											"id": 1138,
											"name": "selector",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Selector function that transforms each value to create a new dataframe.\n"
											},
											"type": {
												"type": "reference",
												"name": "SelectorWithIndexFn",
												"id": 3569,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "ValueT"
													},
													{
														"type": "typeParameter",
														"name": "ToT"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "IDataFrame",
										"id": 683,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "IndexT"
											},
											{
												"type": "typeParameter",
												"name": "ToT"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "IDataFrame.select",
										"id": 766
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/dataframe.ts",
									"line": 357,
									"character": 10
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "IDataFrame.select",
								"id": 766
							}
						},
						{
							"id": 1139,
							"name": "selectMany",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1140,
									"name": "selectMany",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Generate a new dataframe based on the results of the selector function.",
										"returns": "Returns a new dataframe with values that have been produced by the selector function.\n"
									},
									"typeParameter": [
										{
											"id": 1141,
											"name": "ToT",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										}
									],
									"parameters": [
										{
											"id": 1142,
											"name": "selector",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Selector function that transforms each value into a list of values.\n"
											},
											"type": {
												"type": "reference",
												"name": "SelectorWithIndexFn",
												"id": 3569,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "ValueT"
													},
													{
														"type": "reference",
														"name": "Iterable",
														"typeArguments": [
															{
																"type": "typeParameter",
																"name": "ToT"
															}
														]
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "IDataFrame",
										"id": 683,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "IndexT"
											},
											{
												"type": "typeParameter",
												"name": "ToT"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "IDataFrame.selectMany",
										"id": 770
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/dataframe.ts",
									"line": 366,
									"character": 14
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "IDataFrame.selectMany",
								"id": 770
							}
						},
						{
							"id": 1169,
							"name": "sequentialDistinct",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1170,
									"name": "sequentialDistinct",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Collapase distinct values that happen to be sequential.",
										"returns": "Returns a new dataframe with duplicate values that are sequential removed.\n"
									},
									"typeParameter": [
										{
											"id": 1171,
											"name": "ToT",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										}
									],
									"parameters": [
										{
											"id": 1172,
											"name": "selector",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "reference",
												"name": "SelectorFn",
												"id": 66,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "ValueT"
													},
													{
														"type": "typeParameter",
														"name": "ToT"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "IDataFrame",
										"id": 683,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "IndexT"
											},
											{
												"type": "typeParameter",
												"name": "ValueT"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "IDataFrame.sequentialDistinct",
										"id": 800
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/dataframe.ts",
									"line": 441,
									"character": 22
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "IDataFrame.sequentialDistinct",
								"id": 800
							}
						},
						{
							"id": 1063,
							"name": "setIndex",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1064,
									"name": "setIndex",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Set a named column as the index of the data-frame.",
										"returns": "Returns a new dataframe with the values of a particular named column as the index.\n"
									},
									"typeParameter": [
										{
											"id": 1065,
											"name": "NewIndexT",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										}
									],
									"parameters": [
										{
											"id": 1066,
											"name": "columnName",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Name or index of the column to set as the index.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "IDataFrame",
										"id": 683,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "NewIndexT"
											},
											{
												"type": "typeParameter",
												"name": "ValueT"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "IDataFrame.setIndex",
										"id": 694
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/dataframe.ts",
									"line": 201,
									"character": 12
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "IDataFrame.setIndex",
								"id": 694
							}
						},
						{
							"id": 1178,
							"name": "skip",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1179,
									"name": "skip",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Skip a number of values in the dataframe.",
										"returns": "Returns a new dataframe or dataframe with the specified number of values skipped.\n"
									},
									"parameters": [
										{
											"id": 1180,
											"name": "numValues",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Number of values to skip.     *"
											},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "IDataFrame",
										"id": 683,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "IndexT"
											},
											{
												"type": "typeParameter",
												"name": "ValueT"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "IDataFrame.skip",
										"id": 809
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/dataframe.ts",
									"line": 459,
									"character": 8
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "IDataFrame.skip",
								"id": 809
							}
						},
						{
							"id": 1184,
							"name": "skipUntil",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1185,
									"name": "skipUntil",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Skips values in the series until a condition is met.",
										"returns": "Returns a new series with all initial sequential values removed that don't match the predicate.\n"
									},
									"parameters": [
										{
											"id": 1186,
											"name": "predicate",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Return true to indicate the condition met.\n"
											},
											"type": {
												"type": "reference",
												"name": "PredicateFn",
												"id": 152,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "ValueT"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "IDataFrame",
										"id": 683,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "IndexT"
											},
											{
												"type": "typeParameter",
												"name": "ValueT"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "IDataFrame.skipUntil",
										"id": 815
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/dataframe.ts",
									"line": 477,
									"character": 13
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "IDataFrame.skipUntil",
								"id": 815
							}
						},
						{
							"id": 1181,
							"name": "skipWhile",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1182,
									"name": "skipWhile",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Skips values in the series while a condition is met.",
										"returns": "Returns a new series with all initial sequential values removed that match the predicate.\n"
									},
									"parameters": [
										{
											"id": 1183,
											"name": "predicate",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Return true to indicate the condition met.\n"
											},
											"type": {
												"type": "reference",
												"name": "PredicateFn",
												"id": 152,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "ValueT"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "IDataFrame",
										"id": 683,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "IndexT"
											},
											{
												"type": "typeParameter",
												"name": "ValueT"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "IDataFrame.skipWhile",
										"id": 812
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/dataframe.ts",
									"line": 468,
									"character": 13
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "IDataFrame.skipWhile",
								"id": 812
							}
						},
						{
							"id": 1226,
							"name": "startAt",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1227,
									"name": "startAt",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Get a new series containing all values starting at and after the specified index value.",
										"returns": "Returns a new series containing all values starting at and after the specified index value.\n"
									},
									"parameters": [
										{
											"id": 1228,
											"name": "indexValue",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The index value to search for before starting the new series.\n"
											},
											"type": {
												"type": "typeParameter",
												"name": "IndexT"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "IDataFrame",
										"id": 683,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "IndexT"
											},
											{
												"type": "typeParameter",
												"name": "ValueT"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "IDataFrame.startAt",
										"id": 857
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/dataframe.ts",
									"line": 616,
									"character": 11
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "IDataFrame.startAt",
								"id": 857
							}
						},
						{
							"id": 1094,
							"name": "subset",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1095,
									"name": "subset",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Create a new data-frame from a subset of columns.",
										"returns": "Returns a dataframe with a subset of columns from the input dataframe.\n"
									},
									"typeParameter": [
										{
											"id": 1096,
											"name": "NewValueT",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										}
									],
									"parameters": [
										{
											"id": 1097,
											"name": "columnNames",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Array of column names to include in the new data-frame.\n"
											},
											"type": {
												"type": "array",
												"elementType": {
													"type": "intrinsic",
													"name": "string"
												}
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "IDataFrame",
										"id": 683,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "IndexT"
											},
											{
												"type": "typeParameter",
												"name": "NewValueT"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "IDataFrame.subset",
										"id": 725
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/dataframe.ts",
									"line": 269,
									"character": 10
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "IDataFrame.subset",
								"id": 725
							}
						},
						{
							"id": 1208,
							"name": "tail",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1209,
									"name": "tail",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Get X values from the end of the series.",
										"returns": "Returns a new series that has only the specified number of values taken from the end of the input sequence.\n"
									},
									"parameters": [
										{
											"id": 1210,
											"name": "numValues",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Number of values to take.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "IDataFrame",
										"id": 683,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "IndexT"
											},
											{
												"type": "typeParameter",
												"name": "ValueT"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "IDataFrame.tail",
										"id": 839
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/dataframe.ts",
									"line": 552,
									"character": 8
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "IDataFrame.tail",
								"id": 839
							}
						},
						{
							"id": 1187,
							"name": "take",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1188,
									"name": "take",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Take a number of rows in the series.",
										"returns": "Returns a new series with up to the specified number of values included.\n"
									},
									"parameters": [
										{
											"id": 1189,
											"name": "numRows",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Number of rows to take.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "IDataFrame",
										"id": 683,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "IndexT"
											},
											{
												"type": "typeParameter",
												"name": "ValueT"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "IDataFrame.take",
										"id": 818
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/dataframe.ts",
									"line": 486,
									"character": 8
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "IDataFrame.take",
								"id": 818
							}
						},
						{
							"id": 1193,
							"name": "takeUntil",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1194,
									"name": "takeUntil",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Take values from the series until a condition is met.",
										"returns": "Returns a new series or dataframe that only includes the initial sequential values that have not matched the predicate.\n"
									},
									"parameters": [
										{
											"id": 1195,
											"name": "predicate",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Return true to indicate the condition met.\n"
											},
											"type": {
												"type": "reference",
												"name": "PredicateFn",
												"id": 152,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "ValueT"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "IDataFrame",
										"id": 683,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "IndexT"
											},
											{
												"type": "typeParameter",
												"name": "ValueT"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "IDataFrame.takeUntil",
										"id": 824
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/dataframe.ts",
									"line": 504,
									"character": 13
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "IDataFrame.takeUntil",
								"id": 824
							}
						},
						{
							"id": 1190,
							"name": "takeWhile",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1191,
									"name": "takeWhile",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Take values from the series while a condition is met.",
										"returns": "Returns a new series that only includes the initial sequential values that have matched the predicate.\n"
									},
									"parameters": [
										{
											"id": 1192,
											"name": "predicate",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Return true to indicate the condition met.\n"
											},
											"type": {
												"type": "reference",
												"name": "PredicateFn",
												"id": 152,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "ValueT"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "IDataFrame",
										"id": 683,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "IndexT"
											},
											{
												"type": "typeParameter",
												"name": "ValueT"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "IDataFrame.takeWhile",
										"id": 821
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/dataframe.ts",
									"line": 495,
									"character": 13
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "IDataFrame.takeWhile",
								"id": 821
							}
						},
						{
							"id": 1047,
							"name": "thenBy",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1048,
									"name": "thenBy",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Performs additional sorting (ascending).",
										"returns": "Returns a new dataframe has been additionally sorted by the value returned by the selector.\n"
									},
									"typeParameter": [
										{
											"id": 1049,
											"name": "SortT",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										}
									],
									"parameters": [
										{
											"id": 1050,
											"name": "selector",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Selects the value to sort by.\n"
											},
											"type": {
												"type": "reference",
												"name": "SelectorWithIndexFn",
												"id": 3569,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "ValueT"
													},
													{
														"type": "typeParameter",
														"name": "SortT"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "IOrderedDataFrame",
										"id": 1043,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "IndexT"
											},
											{
												"type": "typeParameter",
												"name": "ValueT"
											},
											{
												"type": "typeParameter",
												"name": "SortT"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/dataframe.ts",
									"line": 1033,
									"character": 10
								}
							]
						},
						{
							"id": 1051,
							"name": "thenByDescending",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1052,
									"name": "thenByDescending",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Performs additional sorting (descending).",
										"returns": "Returns a new dataframe has been additionally sorted by the value returned by the selector.\n"
									},
									"typeParameter": [
										{
											"id": 1053,
											"name": "SortT",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										}
									],
									"parameters": [
										{
											"id": 1054,
											"name": "selector",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Selects the value to sort by.\n"
											},
											"type": {
												"type": "reference",
												"name": "SelectorWithIndexFn",
												"id": 3569,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "ValueT"
													},
													{
														"type": "typeParameter",
														"name": "SortT"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "IOrderedDataFrame",
										"id": 1043,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "IndexT"
											},
											{
												"type": "typeParameter",
												"name": "ValueT"
											},
											{
												"type": "typeParameter",
												"name": "SortT"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/dataframe.ts",
									"line": 1042,
									"character": 20
								}
							]
						},
						{
							"id": 1116,
							"name": "toArray",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1117,
									"name": "toArray",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Extract values from the dataframe as an array.\nThis forces lazy evaluation to complete.",
										"returns": "Returns an array of values contained within the dataframe.\n"
									},
									"type": {
										"type": "array",
										"elementType": {
											"type": "typeParameter",
											"name": "ValueT"
										}
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "IDataFrame.toArray",
										"id": 747
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/dataframe.ts",
									"line": 323,
									"character": 11
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "IDataFrame.toArray",
								"id": 747
							}
						},
						{
							"id": 1404,
							"name": "toCSV",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1405,
									"name": "toCSV",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Serialize the dataframe to CSV.",
										"text": " @returns Returns a CSV format string representing the dataframe.\n"
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "IDataFrame.toCSV",
										"id": 1035
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/dataframe.ts",
									"line": 997,
									"character": 9
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "IDataFrame.toCSV",
								"id": 1035
							}
						},
						{
							"id": 1410,
							"name": "toHTML",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1411,
									"name": "toHTML",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Serialize the data frame to HTML.",
										"text": " @returns Returns a HTML format string representing the dataframe.\n"
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "IDataFrame.toHTML",
										"id": 1041
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/dataframe.ts",
									"line": 1018,
									"character": 10
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "IDataFrame.toHTML",
								"id": 1041
							}
						},
						{
							"id": 1402,
							"name": "toJSON",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1403,
									"name": "toJSON",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Serialize the dataframe to JSON.",
										"text": " @returns Returns a JSON format string representing the dataframe.\n"
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "IDataFrame.toJSON",
										"id": 1033
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/dataframe.ts",
									"line": 990,
									"character": 10
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "IDataFrame.toJSON",
								"id": 1033
							}
						},
						{
							"id": 1120,
							"name": "toObject",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1121,
									"name": "toObject",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Convert the dataframe to a JavaScript object.",
										"returns": "Returns a JavaScript object generated from the input sequence by the key and value selector funtions.\n"
									},
									"typeParameter": [
										{
											"id": 1122,
											"name": "KeyT",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										},
										{
											"id": 1123,
											"name": "FieldT",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										},
										{
											"id": 1124,
											"name": "OutT",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										}
									],
									"parameters": [
										{
											"id": 1125,
											"name": "keySelector",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Function that selects keys for the resulting object."
											},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 1126,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"comment": {
														"text": "Function that selects values for the resulting object.\n"
													},
													"signatures": [
														{
															"id": 1127,
															"name": "__call",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {},
															"comment": {
																"text": "Function that selects values for the resulting object.\n"
															},
															"parameters": [
																{
																	"id": 1128,
																	"name": "value",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {},
																	"type": {
																		"type": "typeParameter",
																		"name": "ValueT"
																	}
																}
															],
															"type": {
																"type": "typeParameter",
																"name": "KeyT"
															}
														}
													],
													"sources": [
														{
															"fileName": "lib/dataframe.ts",
															"line": 341,
															"character": 64
														}
													]
												}
											}
										},
										{
											"id": 1129,
											"name": "valueSelector",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 1130,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"signatures": [
														{
															"id": 1131,
															"name": "__call",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {},
															"parameters": [
																{
																	"id": 1132,
																	"name": "value",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {},
																	"type": {
																		"type": "typeParameter",
																		"name": "ValueT"
																	}
																}
															],
															"type": {
																"type": "typeParameter",
																"name": "FieldT"
															}
														}
													],
													"sources": [
														{
															"fileName": "lib/dataframe.ts",
															"line": 341,
															"character": 104
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "typeParameter",
										"name": "OutT"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "IDataFrame.toObject",
										"id": 751
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/dataframe.ts",
									"line": 341,
									"character": 12
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "IDataFrame.toObject",
								"id": 751
							}
						},
						{
							"id": 1118,
							"name": "toPairs",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1119,
									"name": "toPairs",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Retreive the index and values from the DataFrame as an array of pairs.\nEach pairs is [index, value].",
										"returns": "Returns an array of pairs that contains the dataframe content. Each pair is a two element array that contains an index and a value.\n"
									},
									"type": {
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "Object"
										}
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "IDataFrame.toPairs",
										"id": 749
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/dataframe.ts",
									"line": 331,
									"character": 11
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "IDataFrame.toPairs",
								"id": 749
							}
						},
						{
							"id": 1133,
							"name": "toRows",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1134,
									"name": "toRows",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Bake the data frame to an array of rows.",
										"text": " @returns Returns an array of rows. Each row is an array of values in column order.\n"
									},
									"type": {
										"type": "array",
										"elementType": {
											"type": "array",
											"elementType": {
												"type": "intrinsic",
												"name": "any"
											}
										}
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "IDataFrame.toRows",
										"id": 764
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/dataframe.ts",
									"line": 348,
									"character": 10
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "IDataFrame.toRows",
								"id": 764
							}
						},
						{
							"id": 1242,
							"name": "toString",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1243,
									"name": "toString",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Format the dataframe for display as a string.\nThis forces lazy evaluation to complete.",
										"returns": "Generates and returns a string representation of the dataframe or dataframe.\n"
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "IDataFrame.toString",
										"id": 873
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/dataframe.ts",
									"line": 661,
									"character": 12
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "IDataFrame.toString",
								"id": 873
							}
						},
						{
							"id": 1254,
							"name": "toStrings",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1255,
									"name": "toStrings",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Convert a column of values of different types to a column of string values.",
										"returns": "Returns a new dataframe with a particular named column convert to strings.\n"
									},
									"parameters": [
										{
											"id": 1256,
											"name": "columnNameOrNames",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Specifies the column name or array of column names to convert to strings."
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "array",
														"elementType": {
															"type": "intrinsic",
															"name": "string"
														}
													}
												]
											}
										},
										{
											"id": 1257,
											"name": "formatString",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "undefined"
													},
													{
														"type": "intrinsic",
														"name": "string"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "IDataFrame",
										"id": 683,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "IndexT"
											},
											{
												"type": "typeParameter",
												"name": "ValueT"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "IDataFrame.toStrings",
										"id": 885
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/dataframe.ts",
									"line": 699,
									"character": 13
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "IDataFrame.toStrings",
								"id": 885
							}
						},
						{
							"id": 1143,
							"name": "transformSeries",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1144,
									"name": "transformSeries",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Transform one or more columns. This is equivalent to extracting a column, calling 'select' on it,\nthen plugging it back in as the same column.",
										"returns": "Returns a new dataframe with 1 or more columns transformed.\n"
									},
									"typeParameter": [
										{
											"id": 1145,
											"name": "NewValueT",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										}
									],
									"parameters": [
										{
											"id": 1146,
											"name": "columnSelectors",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Object with field names for each column to be transformed. Each field you be a selector that transforms that column.\n"
											},
											"type": {
												"type": "reference",
												"name": "IColumnTransformSpec",
												"id": 669
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "IDataFrame",
										"id": 683,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "IndexT"
											},
											{
												"type": "typeParameter",
												"name": "NewValueT"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "IDataFrame.transformSeries",
										"id": 774
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/dataframe.ts",
									"line": 376,
									"character": 19
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "IDataFrame.transformSeries",
								"id": 774
							}
						},
						{
							"id": 1258,
							"name": "truncateStrings",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1259,
									"name": "truncateStrings",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Produces a new data frame with all string values truncated to the requested maximum length.",
										"returns": "Returns a new dataframe with all strings truncated to the specified maximum length.\n"
									},
									"parameters": [
										{
											"id": 1260,
											"name": "maxLength",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The maximum length of the string values after truncation.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "IDataFrame",
										"id": 683,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "IndexT"
											},
											{
												"type": "typeParameter",
												"name": "ValueT"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "IDataFrame.truncateStrings",
										"id": 889
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/dataframe.ts",
									"line": 708,
									"character": 19
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "IDataFrame.truncateStrings",
								"id": 889
							}
						},
						{
							"id": 1319,
							"name": "union",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1320,
									"name": "union",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Returns the unique union of values between two dataframes.",
										"returns": "Returns the union of two dataframes.\n"
									},
									"typeParameter": [
										{
											"id": 1321,
											"name": "KeyT",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										}
									],
									"parameters": [
										{
											"id": 1322,
											"name": "other",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The other dataframe to combine."
											},
											"type": {
												"type": "reference",
												"name": "IDataFrame",
												"id": 683,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "IndexT"
													},
													{
														"type": "typeParameter",
														"name": "ValueT"
													}
												]
											}
										},
										{
											"id": 1323,
											"name": "selector",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "reference",
												"name": "SelectorFn",
												"id": 66,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "ValueT"
													},
													{
														"type": "typeParameter",
														"name": "KeyT"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "IDataFrame",
										"id": 683,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "IndexT"
											},
											{
												"type": "typeParameter",
												"name": "ValueT"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "IDataFrame.union",
										"id": 950
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/dataframe.ts",
									"line": 800,
									"character": 9
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "IDataFrame.union",
								"id": 950
							}
						},
						{
							"id": 1166,
							"name": "variableWindow",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1167,
									"name": "variableWindow",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Groups sequential values into variable length 'windows'.",
										"returns": "Returns a series of groups. Each group is itself a dataframe that contains the values in the 'window'.\n"
									},
									"parameters": [
										{
											"id": 1168,
											"name": "comparer",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Predicate that compares two values and returns true if they should be in the same window.\n"
											},
											"type": {
												"type": "reference",
												"name": "ComparerFn",
												"id": 371,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "ValueT"
													},
													{
														"type": "typeParameter",
														"name": "ValueT"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "ISeries",
										"id": 2287,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "number"
											},
											{
												"type": "reference",
												"name": "IDataFrame",
												"id": 683,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "IndexT"
													},
													{
														"type": "typeParameter",
														"name": "ValueT"
													}
												]
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "IDataFrame.variableWindow",
										"id": 797
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/dataframe.ts",
									"line": 432,
									"character": 18
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "IDataFrame.variableWindow",
								"id": 797
							}
						},
						{
							"id": 1211,
							"name": "where",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1212,
									"name": "where",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Filter a series by a predicate selector.",
										"returns": "Returns a new series containing only the values that match the predicate.\n"
									},
									"parameters": [
										{
											"id": 1213,
											"name": "predicate",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Predicte function to filter rows of the series.\n"
											},
											"type": {
												"type": "reference",
												"name": "PredicateFn",
												"id": 152,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "ValueT"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "IDataFrame",
										"id": 683,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "IndexT"
											},
											{
												"type": "typeParameter",
												"name": "ValueT"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "IDataFrame.where",
										"id": 842
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/dataframe.ts",
									"line": 561,
									"character": 9
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "IDataFrame.where",
								"id": 842
							}
						},
						{
							"id": 1160,
							"name": "window",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1161,
									"name": "window",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Segment a dataframe into 'windows'. Returns a new series. Each value in the new dataframe contains a 'window' (or segment) of the original dataframe.\nUse select or selectPairs to aggregate.",
										"returns": "Returns a new series, each value of which is a 'window' (or segment) of the original dataframe.\n"
									},
									"parameters": [
										{
											"id": 1162,
											"name": "period",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The number of values in the window.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "ISeries",
										"id": 2287,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "number"
											},
											{
												"type": "reference",
												"name": "IDataFrame",
												"id": 683,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "IndexT"
													},
													{
														"type": "typeParameter",
														"name": "ValueT"
													}
												]
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "IDataFrame.window",
										"id": 791
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/dataframe.ts",
									"line": 414,
									"character": 10
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "IDataFrame.window",
								"id": 791
							}
						},
						{
							"id": 1067,
							"name": "withIndex",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1068,
									"name": "withIndex",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Apply a new index to the dataframe.",
										"returns": "Returns a new dataframe with the specified index attached.\n"
									},
									"typeParameter": [
										{
											"id": 1069,
											"name": "NewIndexT",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										}
									],
									"parameters": [
										{
											"id": 1070,
											"name": "newIndex",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The new index to apply to the dataframe.\n"
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "reference",
														"name": "Iterable",
														"typeArguments": [
															{
																"type": "typeParameter",
																"name": "NewIndexT"
															}
														]
													},
													{
														"type": "reference",
														"name": "SelectorFn",
														"id": 66,
														"typeArguments": [
															{
																"type": "typeParameter",
																"name": "ValueT"
															},
															{
																"type": "typeParameter",
																"name": "NewIndexT"
															}
														]
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "IDataFrame",
										"id": 683,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "NewIndexT"
											},
											{
												"type": "typeParameter",
												"name": "ValueT"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "IDataFrame.withIndex",
										"id": 698
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/dataframe.ts",
									"line": 210,
									"character": 13
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "IDataFrame.withIndex",
								"id": 698
							}
						},
						{
							"id": 1084,
							"name": "withSeries",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1085,
									"name": "withSeries",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Create a new dataframe with an additional column specified by the passed-in series.",
										"returns": "Returns a new dataframe replacing or adding a particular named column.\n"
									},
									"typeParameter": [
										{
											"id": 1086,
											"name": "SeriesValueT",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										}
									],
									"parameters": [
										{
											"id": 1087,
											"name": "columnNameOrSpec",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The name of the column to add or replace."
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "reference",
														"name": "IColumnGenSpec",
														"id": 663
													}
												]
											}
										},
										{
											"id": 1088,
											"name": "series",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "reference",
														"name": "ISeries",
														"id": 2287,
														"typeArguments": [
															{
																"type": "typeParameter",
																"name": "IndexT"
															},
															{
																"type": "typeParameter",
																"name": "SeriesValueT"
															}
														]
													},
													{
														"type": "reference",
														"name": "SeriesSelectorFn",
														"id": 2261,
														"typeArguments": [
															{
																"type": "typeParameter",
																"name": "IndexT"
															},
															{
																"type": "typeParameter",
																"name": "ValueT"
															},
															{
																"type": "typeParameter",
																"name": "SeriesValueT"
															}
														]
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "IDataFrame",
										"id": 683,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "IndexT"
											},
											{
												"type": "typeParameter",
												"name": "ValueT"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "IDataFrame.withSeries",
										"id": 715
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/dataframe.ts",
									"line": 250,
									"character": 14
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "IDataFrame.withSeries",
								"id": 715
							}
						},
						{
							"id": 1280,
							"name": "zip",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1281,
									"name": "zip",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Zip together multiple dataframes to create a new dataframe.\nPreserves the index of the first dataframe.",
										"returns": "Returns a single dataframe concatenated from multiple input dataframes.\n"
									},
									"typeParameter": [
										{
											"id": 1282,
											"name": "Index2T",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										},
										{
											"id": 1283,
											"name": "Value2T",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										},
										{
											"id": 1284,
											"name": "ResultT",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										}
									],
									"parameters": [
										{
											"id": 1285,
											"name": "s2",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "IDataFrame",
												"id": 683,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "Index2T"
													},
													{
														"type": "typeParameter",
														"name": "Value2T"
													}
												]
											}
										},
										{
											"id": 1286,
											"name": "zipper",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Zipper function that produces a new dataframe based on the input dataframes.\n"
											},
											"type": {
												"type": "reference",
												"name": "Zip2Fn",
												"id": 3582,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "ValueT"
													},
													{
														"type": "typeParameter",
														"name": "Value2T"
													},
													{
														"type": "typeParameter",
														"name": "ResultT"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "IDataFrame",
										"id": 683,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "IndexT"
											},
											{
												"type": "typeParameter",
												"name": "ResultT"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "IDataFrame.zip",
										"id": 911
									}
								},
								{
									"id": 1287,
									"name": "zip",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"typeParameter": [
										{
											"id": 1288,
											"name": "Index2T",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										},
										{
											"id": 1289,
											"name": "Value2T",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										},
										{
											"id": 1290,
											"name": "Index3T",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										},
										{
											"id": 1291,
											"name": "Value3T",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										},
										{
											"id": 1292,
											"name": "ResultT",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										}
									],
									"parameters": [
										{
											"id": 1293,
											"name": "s2",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "IDataFrame",
												"id": 683,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "Index2T"
													},
													{
														"type": "typeParameter",
														"name": "Value2T"
													}
												]
											}
										},
										{
											"id": 1294,
											"name": "s3",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "IDataFrame",
												"id": 683,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "Index3T"
													},
													{
														"type": "typeParameter",
														"name": "Value3T"
													}
												]
											}
										},
										{
											"id": 1295,
											"name": "zipper",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Zip3Fn",
												"id": 3590,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "ValueT"
													},
													{
														"type": "typeParameter",
														"name": "Value2T"
													},
													{
														"type": "typeParameter",
														"name": "Value3T"
													},
													{
														"type": "typeParameter",
														"name": "ResultT"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "IDataFrame",
										"id": 683,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "IndexT"
											},
											{
												"type": "typeParameter",
												"name": "ResultT"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "IDataFrame.zip",
										"id": 911
									}
								},
								{
									"id": 1296,
									"name": "zip",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"typeParameter": [
										{
											"id": 1297,
											"name": "Index2T",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										},
										{
											"id": 1298,
											"name": "Value2T",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										},
										{
											"id": 1299,
											"name": "Index3T",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										},
										{
											"id": 1300,
											"name": "Value3T",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										},
										{
											"id": 1301,
											"name": "Index4T",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										},
										{
											"id": 1302,
											"name": "Value4T",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										},
										{
											"id": 1303,
											"name": "ResultT",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										}
									],
									"parameters": [
										{
											"id": 1304,
											"name": "s2",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "IDataFrame",
												"id": 683,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "Index2T"
													},
													{
														"type": "typeParameter",
														"name": "Value2T"
													}
												]
											}
										},
										{
											"id": 1305,
											"name": "s3",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "IDataFrame",
												"id": 683,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "Index3T"
													},
													{
														"type": "typeParameter",
														"name": "Value3T"
													}
												]
											}
										},
										{
											"id": 1306,
											"name": "s4",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "IDataFrame",
												"id": 683,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "Index4T"
													},
													{
														"type": "typeParameter",
														"name": "Value4T"
													}
												]
											}
										},
										{
											"id": 1307,
											"name": "zipper",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Zip3Fn",
												"id": 3590,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "ValueT"
													},
													{
														"type": "typeParameter",
														"name": "Value2T"
													},
													{
														"type": "typeParameter",
														"name": "Value3T"
													},
													{
														"type": "typeParameter",
														"name": "ResultT"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "IDataFrame",
										"id": 683,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "IndexT"
											},
											{
												"type": "typeParameter",
												"name": "ResultT"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "IDataFrame.zip",
										"id": 911
									}
								},
								{
									"id": 1308,
									"name": "zip",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"typeParameter": [
										{
											"id": 1309,
											"name": "ResultT",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										}
									],
									"parameters": [
										{
											"id": 1310,
											"name": "args",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isRest": true
											},
											"type": {
												"type": "array",
												"elementType": {
													"type": "intrinsic",
													"name": "any"
												}
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "IDataFrame",
										"id": 683,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "IndexT"
											},
											{
												"type": "typeParameter",
												"name": "ResultT"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "IDataFrame.zip",
										"id": 911
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/dataframe.ts",
									"line": 769,
									"character": 7
								},
								{
									"fileName": "lib/dataframe.ts",
									"line": 770,
									"character": 7
								},
								{
									"fileName": "lib/dataframe.ts",
									"line": 771,
									"character": 7
								},
								{
									"fileName": "lib/dataframe.ts",
									"line": 772,
									"character": 7
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "IDataFrame.zip",
								"id": 911
							}
						}
					],
					"groups": [
						{
							"title": "Methods",
							"kind": 2048,
							"children": [
								1055,
								1235,
								1173,
								1217,
								1220,
								1388,
								1406,
								1408,
								1202,
								1261,
								1232,
								1238,
								1109,
								1106,
								1277,
								1196,
								1395,
								1151,
								1398,
								1400,
								1265,
								1098,
								1229,
								1089,
								1332,
								1080,
								1391,
								1198,
								1214,
								1147,
								1057,
								1059,
								1061,
								1073,
								1269,
								1273,
								1077,
								1205,
								1155,
								1385,
								1324,
								1340,
								1350,
								1360,
								1370,
								1200,
								1223,
								1311,
								1315,
								1250,
								1247,
								1244,
								1380,
								1112,
								1102,
								1071,
								1263,
								1163,
								1135,
								1139,
								1169,
								1063,
								1178,
								1184,
								1181,
								1226,
								1094,
								1208,
								1187,
								1193,
								1190,
								1047,
								1051,
								1116,
								1404,
								1410,
								1402,
								1120,
								1118,
								1133,
								1242,
								1254,
								1143,
								1258,
								1319,
								1166,
								1211,
								1160,
								1067,
								1084,
								1280
							]
						}
					],
					"sources": [
						{
							"fileName": "lib/dataframe.ts",
							"line": 1024,
							"character": 34
						}
					],
					"extendedTypes": [
						{
							"type": "reference",
							"name": "IDataFrame",
							"id": 683,
							"typeArguments": [
								{
									"type": "typeParameter",
									"name": "IndexT"
								},
								{
									"type": "typeParameter",
									"name": "ValueT"
								}
							]
						}
					],
					"implementedBy": [
						{
							"type": "reference",
							"name": "OrderedDataFrame",
							"id": 1862
						}
					]
				},
				{
					"id": 675,
					"name": "ITypeFrequency",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "Represents the frequency of a type in a series or dataframe."
					},
					"children": [
						{
							"id": 676,
							"name": "Column",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "Name of the column containing the value."
							},
							"sources": [
								{
									"fileName": "lib/dataframe.ts",
									"line": 131,
									"character": 10
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 678,
							"name": "Frequency",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The frequency of the type's appearance in the series or dataframe."
							},
							"sources": [
								{
									"fileName": "lib/dataframe.ts",
									"line": 141,
									"character": 13
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						},
						{
							"id": 677,
							"name": "Type",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The name of the type."
							},
							"sources": [
								{
									"fileName": "lib/dataframe.ts",
									"line": 136,
									"character": 8
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								676,
								678,
								677
							]
						}
					],
					"sources": [
						{
							"fileName": "lib/dataframe.ts",
							"line": 126,
							"character": 31
						}
					]
				},
				{
					"id": 679,
					"name": "IValueFrequency",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "Represents the frequency of a value in a series or dataframe."
					},
					"children": [
						{
							"id": 680,
							"name": "Column",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "Name of the column containing the value."
							},
							"sources": [
								{
									"fileName": "lib/dataframe.ts",
									"line": 152,
									"character": 10
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 682,
							"name": "Frequency",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The frequency of the value's appearance in the series or dataframe."
							},
							"sources": [
								{
									"fileName": "lib/dataframe.ts",
									"line": 162,
									"character": 13
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						},
						{
							"id": 681,
							"name": "Value",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The value."
							},
							"sources": [
								{
									"fileName": "lib/dataframe.ts",
									"line": 157,
									"character": 9
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "any"
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								680,
								682,
								681
							]
						}
					],
					"sources": [
						{
							"fileName": "lib/dataframe.ts",
							"line": 147,
							"character": 32
						}
					]
				},
				{
					"id": 2268,
					"name": "DataFrameConfigFn",
					"kind": 4194304,
					"kindString": "Type alias",
					"flags": {
						"isExported": true
					},
					"typeParameter": [
						{
							"id": 2269,
							"name": "IndexT",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {}
						},
						{
							"id": 2270,
							"name": "ValueT",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {}
						}
					],
					"sources": [
						{
							"fileName": "lib/dataframe.ts",
							"line": 121,
							"character": 29
						}
					],
					"type": {
						"type": "reflection",
						"declaration": {
							"id": 2271,
							"name": "__type",
							"kind": 65536,
							"kindString": "Type literal",
							"flags": {},
							"signatures": [
								{
									"id": 2272,
									"name": "__call",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "IDataFrameConfig",
										"id": 649,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "IndexT"
											},
											{
												"type": "typeParameter",
												"name": "ValueT"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/dataframe.ts",
									"line": 121,
									"character": 47
								}
							]
						}
					}
				},
				{
					"id": 2261,
					"name": "SeriesSelectorFn",
					"kind": 4194304,
					"kindString": "Type alias",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "A selector function that can select a series from a dataframe."
					},
					"typeParameter": [
						{
							"id": 2262,
							"name": "IndexT",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {}
						},
						{
							"id": 2263,
							"name": "DataFrameValueT",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {}
						},
						{
							"id": 2264,
							"name": "SeriesValueT",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {}
						}
					],
					"sources": [
						{
							"fileName": "lib/dataframe.ts",
							"line": 115,
							"character": 28
						}
					],
					"type": {
						"type": "reflection",
						"declaration": {
							"id": 2265,
							"name": "__type",
							"kind": 65536,
							"kindString": "Type literal",
							"flags": {},
							"signatures": [
								{
									"id": 2266,
									"name": "__call",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 2267,
											"name": "dataFrame",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "IDataFrame",
												"id": 683,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "IndexT"
													},
													{
														"type": "typeParameter",
														"name": "DataFrameValueT"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "ISeries",
										"id": 2287,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "IndexT"
											},
											{
												"type": "typeParameter",
												"name": "SeriesValueT"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/dataframe.ts",
									"line": 115,
									"character": 69
								}
							]
						}
					}
				},
				{
					"id": 2260,
					"name": "Table",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isConst": true
					},
					"sources": [
						{
							"fileName": "lib/dataframe.ts",
							"line": 24,
							"character": 11
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "any"
					},
					"defaultValue": " require('easy-table')"
				}
			],
			"groups": [
				{
					"title": "Classes",
					"kind": 128,
					"children": [
						1829,
						1420,
						1849,
						1862
					]
				},
				{
					"title": "Interfaces",
					"kind": 256,
					"children": [
						660,
						672,
						646,
						663,
						666,
						643,
						669,
						1822,
						683,
						649,
						1412,
						1842,
						1043,
						675,
						679
					]
				},
				{
					"title": "Type aliases",
					"kind": 4194304,
					"children": [
						2268,
						2261
					]
				},
				{
					"title": "Variables",
					"kind": 32,
					"children": [
						2260
					]
				}
			],
			"sources": [
				{
					"fileName": "lib/dataframe.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 3670,
			"name": "\"lib/index\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "C:/projects/github/data-forge/data-forge-ts/src/lib/index.ts",
			"children": [
				{
					"id": 3965,
					"name": "Index",
					"kind": 128,
					"kindString": "Class",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "Class that represents an index for a Series."
					},
					"typeParameter": [
						{
							"id": 3966,
							"name": "IndexT",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {}
						}
					],
					"children": [
						{
							"id": 3968,
							"name": "constructor",
							"kind": 512,
							"kindString": "Constructor",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 3969,
									"name": "new Index",
									"kind": 16384,
									"kindString": "Constructor signature",
									"flags": {},
									"parameters": [
										{
											"id": 3970,
											"name": "config",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "any"
													},
													{
														"type": "reference",
														"name": "SeriesConfigFn",
														"id": 3658,
														"typeArguments": [
															{
																"type": "intrinsic",
																"name": "number"
															},
															{
																"type": "typeParameter",
																"name": "IndexT"
															}
														]
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Index",
										"id": 3965
									},
									"overwrites": {
										"type": "reference",
										"name": "Series.__constructor",
										"id": 2903
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/index.ts",
									"line": 53,
									"character": 27
								}
							],
							"overwrites": {
								"type": "reference",
								"name": "Series.__constructor",
								"id": 2903
							}
						},
						{
							"id": 3967,
							"name": "_type",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPrivate": true,
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "lib/index.ts",
									"line": 53,
									"character": 17
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							}
						},
						{
							"id": 3979,
							"name": "__@iterator",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 3980,
									"name": "__@iterator",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Get an iterator to enumerate the values of the series.\nEnumerating the iterator forces lazy evaluation to complete."
									},
									"type": {
										"type": "reference",
										"name": "Iterator",
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "IndexT"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Series.[Symbol.iterator]",
										"id": 2910
									},
									"implementationOf": {
										"type": "reference",
										"name": "IIndex.__@iterator",
										"id": 3682
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/series.ts",
									"line": 1017,
									"character": 21
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Series.[Symbol.iterator]",
								"id": 2910
							},
							"implementationOf": {
								"type": "reference",
								"name": "IIndex.__@iterator",
								"id": 3681
							}
						},
						{
							"id": 4091,
							"name": "after",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 4092,
									"name": "after",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Get a new series containing all values after the specified index value (exclusive).",
										"returns": "Returns a new series containing all values after the specified index value.\n"
									},
									"parameters": [
										{
											"id": 4093,
											"name": "indexValue",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The index value to search for.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "ISeries",
										"id": 2287,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "number"
											},
											{
												"type": "typeParameter",
												"name": "IndexT"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Series.after",
										"id": 3022
									},
									"implementationOf": {
										"type": "reference",
										"name": "IIndex.after",
										"id": 3794
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/series.ts",
									"line": 1670,
									"character": 9
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Series.after",
								"id": 3022
							},
							"implementationOf": {
								"type": "reference",
								"name": "IIndex.after",
								"id": 3793
							}
						},
						{
							"id": 4027,
							"name": "aggregate",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 4028,
									"name": "aggregate",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Aggregate the values in the series.",
										"returns": "Returns a new value that has been aggregated from the input sequence by the 'selector' function.\n"
									},
									"typeParameter": [
										{
											"id": 4029,
											"name": "ToT",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										}
									],
									"parameters": [
										{
											"id": 4030,
											"name": "seedOrSelector",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "reference",
														"name": "AggregateFn",
														"id": 3644,
														"typeArguments": [
															{
																"type": "typeParameter",
																"name": "IndexT"
															},
															{
																"type": "typeParameter",
																"name": "ToT"
															}
														]
													},
													{
														"type": "typeParameter",
														"name": "ToT"
													}
												]
											}
										},
										{
											"id": 4031,
											"name": "selector",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"text": "Function that takes the seed and then each value in the series and produces the aggregate value.\n"
											},
											"type": {
												"type": "reference",
												"name": "AggregateFn",
												"id": 3644,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "IndexT"
													},
													{
														"type": "typeParameter",
														"name": "ToT"
													}
												]
											}
										}
									],
									"type": {
										"type": "typeParameter",
										"name": "ToT"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Series.aggregate",
										"id": 2958
									},
									"implementationOf": {
										"type": "reference",
										"name": "IIndex.aggregate",
										"id": 3730
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/series.ts",
									"line": 1237,
									"character": 13
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Series.aggregate",
								"id": 2958
							},
							"implementationOf": {
								"type": "reference",
								"name": "IIndex.aggregate",
								"id": 3729
							}
						},
						{
							"id": 4073,
							"name": "all",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 4074,
									"name": "all",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Determine if the predicate returns truthy for all values in the series.\nReturns false as soon as the predicate evaluates to falsy.\nReturns true if the predicate returns truthy for all values in the series.\nReturns false if the series is empty.",
										"returns": "Returns true if the predicate has returned truthy for every value in the sequence, otherwise returns false.\n"
									},
									"parameters": [
										{
											"id": 4075,
											"name": "predicate",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Predicate function that receives each value in turn and returns truthy for a match, otherwise falsy.\n"
											},
											"type": {
												"type": "reference",
												"name": "PredicateFn",
												"id": 4289,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "IndexT"
													}
												]
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Series.all",
										"id": 3004
									},
									"implementationOf": {
										"type": "reference",
										"name": "IIndex.all",
										"id": 3776
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/series.ts",
									"line": 1524,
									"character": 7
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Series.all",
								"id": 3004
							},
							"implementationOf": {
								"type": "reference",
								"name": "IIndex.all",
								"id": 3775
							}
						},
						{
							"id": 4076,
							"name": "any",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 4077,
									"name": "any",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Determine if the predicate returns truthy for any of the values in the series.\nReturns true as soon as the predicate returns truthy.\nReturns false if the predicate never returns truthy.\nIf no predicate is specified the value itself is checked.",
										"returns": "Returns true if the predicate has returned truthy for any value in the sequence, otherwise returns false.\n"
									},
									"parameters": [
										{
											"id": 4078,
											"name": "predicate",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "reference",
												"name": "PredicateFn",
												"id": 4289,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "IndexT"
													}
												]
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Series.any",
										"id": 3007
									},
									"implementationOf": {
										"type": "reference",
										"name": "IIndex.any",
										"id": 3779
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/series.ts",
									"line": 1550,
									"character": 7
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Series.any",
								"id": 3007
							},
							"implementationOf": {
								"type": "reference",
								"name": "IIndex.any",
								"id": 3778
							}
						},
						{
							"id": 4275,
							"name": "appendPair",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 4276,
									"name": "appendPair",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Append a pair to the end of a Series.",
										"returns": "Returns a new series with the specified pair appended.\n"
									},
									"parameters": [
										{
											"id": 4277,
											"name": "pair",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The pair to append.\n"
											},
											"type": {
												"type": "tuple",
												"elements": [
													{
														"type": "intrinsic",
														"name": "number"
													},
													{
														"type": "typeParameter",
														"name": "IndexT"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "ISeries",
										"id": 2287,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "number"
											},
											{
												"type": "typeParameter",
												"name": "IndexT"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Series.appendPair",
										"id": 3206
									},
									"implementationOf": {
										"type": "reference",
										"name": "IIndex.appendPair",
										"id": 3952
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/series.ts",
									"line": 2493,
									"character": 14
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Series.appendPair",
								"id": 3206
							},
							"implementationOf": {
								"type": "reference",
								"name": "IIndex.appendPair",
								"id": 3951
							}
						},
						{
							"id": 4058,
							"name": "at",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 4059,
									"name": "at",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Get the value at a specified index.",
										"returns": "Returns the value from the specified index in the sequence or undefined if there is no such index in the series.\n"
									},
									"parameters": [
										{
											"id": 4060,
											"name": "index",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Index to for which to retreive the value.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "typeParameter",
												"name": "IndexT"
											},
											{
												"type": "intrinsic",
												"name": "undefined"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Series.at",
										"id": 2989
									},
									"implementationOf": {
										"type": "reference",
										"name": "IIndex.at",
										"id": 3761
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/series.ts",
									"line": 1419,
									"character": 6
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Series.at",
								"id": 2989
							},
							"implementationOf": {
								"type": "reference",
								"name": "IIndex.at",
								"id": 3760
							}
						},
						{
							"id": 4135,
							"name": "average",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 4136,
									"name": "average",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Average the values in a series.",
										"returns": "Returns the average of the number values in the series.\n"
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Series.average",
										"id": 3066
									},
									"implementationOf": {
										"type": "reference",
										"name": "IIndex.average",
										"id": 3821
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/series.ts",
									"line": 1905,
									"character": 11
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Series.average",
								"id": 3066
							},
							"implementationOf": {
								"type": "reference",
								"name": "IIndex.average",
								"id": 3820
							}
						},
						{
							"id": 4127,
							"name": "bake",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 4128,
									"name": "bake",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Forces lazy evaluation to complete and 'bakes' the series into memory.",
										"returns": "Returns a series that has been 'baked', all lazy evaluation has completed.\n"
									},
									"type": {
										"type": "reference",
										"name": "ISeries",
										"id": 2287,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "number"
											},
											{
												"type": "typeParameter",
												"name": "IndexT"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Series.bake",
										"id": 3058
									},
									"implementationOf": {
										"type": "reference",
										"name": "IIndex.bake",
										"id": 3813
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/series.ts",
									"line": 1844,
									"character": 8
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Series.bake",
								"id": 3058
							},
							"implementationOf": {
								"type": "reference",
								"name": "IIndex.bake",
								"id": 3812
							}
						},
						{
							"id": 4088,
							"name": "before",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 4089,
									"name": "before",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Get a new series containing all values up to the specified index value (exclusive).",
										"returns": "Returns a new series containing all values up to the specified inde value.\n"
									},
									"parameters": [
										{
											"id": 4090,
											"name": "indexValue",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The index value to search for before ending the new series.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "ISeries",
										"id": 2287,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "number"
											},
											{
												"type": "typeParameter",
												"name": "IndexT"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Series.before",
										"id": 3019
									},
									"implementationOf": {
										"type": "reference",
										"name": "IIndex.before",
										"id": 3791
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/series.ts",
									"line": 1653,
									"character": 10
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Series.before",
								"id": 3019
							},
							"implementationOf": {
								"type": "reference",
								"name": "IIndex.before",
								"id": 3790
							}
						},
						{
							"id": 4094,
							"name": "between",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 4095,
									"name": "between",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Get a new series containing all values between the specified index values (inclusive).",
										"returns": "Returns a new series containing all values between the specified index values (inclusive).\n"
									},
									"parameters": [
										{
											"id": 4096,
											"name": "startIndexValue",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The index where the new sequence starts."
											},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										},
										{
											"id": 4097,
											"name": "endIndexValue",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The index where the new sequence ends.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "ISeries",
										"id": 2287,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "number"
											},
											{
												"type": "typeParameter",
												"name": "IndexT"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Series.between",
										"id": 3025
									},
									"implementationOf": {
										"type": "reference",
										"name": "IIndex.between",
										"id": 3797
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/series.ts",
									"line": 1688,
									"character": 11
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Series.between",
								"id": 3025
							},
							"implementationOf": {
								"type": "reference",
								"name": "IIndex.between",
								"id": 3796
							}
						},
						{
							"id": 4162,
							"name": "concat",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 4163,
									"name": "concat",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Concatenate multiple other series onto this series.",
										"returns": "Returns a single series concatenated from multiple input series.\n"
									},
									"parameters": [
										{
											"id": 4164,
											"name": "series",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isRest": true
											},
											"comment": {
												"text": "Multiple arguments. Each can be either a series or an array of series.\n"
											},
											"type": {
												"type": "array",
												"elementType": {
													"type": "union",
													"types": [
														{
															"type": "reference",
															"name": "ISeries",
															"id": 2287,
															"typeArguments": [
																{
																	"type": "unknown",
																	"name": "IndexT"
																},
																{
																	"type": "unknown",
																	"name": "ValueT"
																}
															]
														},
														{
															"type": "array",
															"elementType": {
																"type": "reference",
																"name": "ISeries",
																"id": 2287,
																"typeArguments": [
																	{
																		"type": "unknown",
																		"name": "IndexT"
																	},
																	{
																		"type": "unknown",
																		"name": "ValueT"
																	}
																]
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "ISeries",
										"id": 2287,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "number"
											},
											{
												"type": "typeParameter",
												"name": "IndexT"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Series.concat",
										"id": 3093
									},
									"implementationOf": {
										"type": "reference",
										"name": "IIndex.concat",
										"id": 3843
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/series.ts",
									"line": 2080,
									"character": 10
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Series.concat",
								"id": 3093
							},
							"implementationOf": {
								"type": "reference",
								"name": "IIndex.concat",
								"id": 3842
							}
						},
						{
							"id": 4052,
							"name": "count",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 4053,
									"name": "count",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Count the number of values in the series.",
										"returns": "Returns the count of all values in the series.\n"
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Series.count",
										"id": 2983
									},
									"implementationOf": {
										"type": "reference",
										"name": "IIndex.count",
										"id": 3755
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/series.ts",
									"line": 1369,
									"character": 9
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Series.count",
								"id": 2983
							},
							"implementationOf": {
								"type": "reference",
								"name": "IIndex.count",
								"id": 3754
							}
						},
						{
							"id": 4282,
							"name": "defaultIfEmpty",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 4283,
									"name": "defaultIfEmpty",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Returns the specified default sequence if the series is empty.",
										"returns": "Returns 'defaultSequence' if the series is empty.\n"
									},
									"parameters": [
										{
											"id": 4284,
											"name": "defaultSequence",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Default sequence to return if the series is empty.\n"
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "array",
														"elementType": {
															"type": "typeParameter",
															"name": "IndexT"
														}
													},
													{
														"type": "reference",
														"name": "ISeries",
														"id": 2287,
														"typeArguments": [
															{
																"type": "intrinsic",
																"name": "number"
															},
															{
																"type": "typeParameter",
																"name": "IndexT"
															}
														]
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "ISeries",
										"id": 2287,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "number"
											},
											{
												"type": "typeParameter",
												"name": "IndexT"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Series.defaultIfEmpty",
										"id": 3213
									},
									"implementationOf": {
										"type": "reference",
										"name": "IIndex.defaultIfEmpty",
										"id": 3959
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/series.ts",
									"line": 2538,
									"character": 18
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Series.defaultIfEmpty",
								"id": 3213
							},
							"implementationOf": {
								"type": "reference",
								"name": "IIndex.defaultIfEmpty",
								"id": 3958
							}
						},
						{
							"id": 4285,
							"name": "detectTypes",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 4286,
									"name": "detectTypes",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Detect the types of the values in the sequence.",
										"returns": "Returns a dataframe that describes the data types contained in the input series or dataframe.\n"
									},
									"type": {
										"type": "reference",
										"name": "IDataFrame",
										"id": 683,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "number"
											},
											{
												"type": "reference",
												"name": "ITypeFrequency",
												"id": 2281
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Series.detectTypes",
										"id": 3216
									},
									"implementationOf": {
										"type": "reference",
										"name": "IIndex.detectTypes",
										"id": 3962
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/series.ts",
									"line": 2561,
									"character": 15
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Series.detectTypes",
								"id": 3216
							},
							"implementationOf": {
								"type": "reference",
								"name": "IIndex.detectTypes",
								"id": 3961
							}
						},
						{
							"id": 4287,
							"name": "detectValues",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 4288,
									"name": "detectValues",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Detect the frequency of values in the sequence.",
										"returns": "Returns a dataframe that describes the values contained in the input sequence.\n"
									},
									"type": {
										"type": "reference",
										"name": "IDataFrame",
										"id": 683,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "number"
											},
											{
												"type": "reference",
												"name": "IValueFrequency",
												"id": 2284
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Series.detectValues",
										"id": 3218
									},
									"implementationOf": {
										"type": "reference",
										"name": "IIndex.detectValues",
										"id": 3964
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/series.ts",
									"line": 2608,
									"character": 16
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Series.detectValues",
								"id": 3218
							},
							"implementationOf": {
								"type": "reference",
								"name": "IIndex.detectValues",
								"id": 3963
							}
						},
						{
							"id": 4145,
							"name": "distinct",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 4146,
									"name": "distinct",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Returns only values in the series that have distinct values.",
										"returns": "Returns a series containing only unique values as determined by the 'selector' function.\n"
									},
									"typeParameter": [
										{
											"id": 4147,
											"name": "ToT",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										}
									],
									"parameters": [
										{
											"id": 4148,
											"name": "selector",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"text": "Selects the value used to compare for duplicates.\n"
											},
											"type": {
												"type": "reference",
												"name": "SelectorFn",
												"id": 66,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "IndexT"
													},
													{
														"type": "typeParameter",
														"name": "ToT"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "ISeries",
										"id": 2287,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "number"
											},
											{
												"type": "typeParameter",
												"name": "IndexT"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Series.distinct",
										"id": 3076
									},
									"implementationOf": {
										"type": "reference",
										"name": "IIndex.distinct",
										"id": 3831
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/series.ts",
									"line": 1988,
									"character": 12
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Series.distinct",
								"id": 3076
							},
							"implementationOf": {
								"type": "reference",
								"name": "IIndex.distinct",
								"id": 3830
							}
						},
						{
							"id": 4085,
							"name": "endAt",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 4086,
									"name": "endAt",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Get a new series containing all values up until and including the specified index value (inclusive).",
										"returns": "Returns a new series containing all values up until and including the specified index value.\n"
									},
									"parameters": [
										{
											"id": 4087,
											"name": "indexValue",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The index value to search for before ending the new series.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "ISeries",
										"id": 2287,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "number"
											},
											{
												"type": "typeParameter",
												"name": "IndexT"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Series.endAt",
										"id": 3016
									},
									"implementationOf": {
										"type": "reference",
										"name": "IIndex.endAt",
										"id": 3788
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/series.ts",
									"line": 1636,
									"character": 9
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Series.endAt",
								"id": 3016
							},
							"implementationOf": {
								"type": "reference",
								"name": "IIndex.endAt",
								"id": 3787
							}
						},
						{
							"id": 4221,
							"name": "except",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 4222,
									"name": "except",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Returns the exception of values between two series.",
										"returns": "Returns the difference between the two series.\n"
									},
									"typeParameter": [
										{
											"id": 4223,
											"name": "InnerIndexT",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										},
										{
											"id": 4224,
											"name": "InnerValueT",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										},
										{
											"id": 4225,
											"name": "KeyT",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										}
									],
									"parameters": [
										{
											"id": 4226,
											"name": "inner",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The other series to combine."
											},
											"type": {
												"type": "reference",
												"name": "ISeries",
												"id": 2287,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "InnerIndexT"
													},
													{
														"type": "typeParameter",
														"name": "InnerValueT"
													}
												]
											}
										},
										{
											"id": 4227,
											"name": "outerSelector",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "reference",
												"name": "SelectorFn",
												"id": 66,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "IndexT"
													},
													{
														"type": "typeParameter",
														"name": "KeyT"
													}
												]
											}
										},
										{
											"id": 4228,
											"name": "innerSelector",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "reference",
												"name": "SelectorFn",
												"id": 66,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "InnerValueT"
													},
													{
														"type": "typeParameter",
														"name": "KeyT"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "ISeries",
										"id": 2287,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "number"
											},
											{
												"type": "typeParameter",
												"name": "IndexT"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Series.except",
										"id": 3152
									},
									"implementationOf": {
										"type": "reference",
										"name": "IIndex.except",
										"id": 3898
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/series.ts",
									"line": 2240,
									"character": 10
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Series.except",
								"id": 3152
							},
							"implementationOf": {
								"type": "reference",
								"name": "IIndex.except",
								"id": 3897
							}
						},
						{
							"id": 4278,
							"name": "fillGaps",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 4279,
									"name": "fillGaps",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Fill gaps in a series.",
										"returns": "Returns a new series with gaps filled in.\n"
									},
									"parameters": [
										{
											"id": 4280,
											"name": "comparer",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Comparer that is passed pairA and pairB, two consecutive rows, return truthy if there is a gap between the rows, or falsey if there is no gap."
											},
											"type": {
												"type": "reference",
												"name": "ComparerFn",
												"id": 371,
												"typeArguments": [
													{
														"type": "tuple",
														"elements": [
															{
																"type": "intrinsic",
																"name": "number"
															},
															{
																"type": "typeParameter",
																"name": "IndexT"
															}
														]
													},
													{
														"type": "tuple",
														"elements": [
															{
																"type": "intrinsic",
																"name": "number"
															},
															{
																"type": "typeParameter",
																"name": "IndexT"
															}
														]
													}
												]
											}
										},
										{
											"id": 4281,
											"name": "generator",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Generator that is passed pairA and pairB, two consecutive rows, returns an array of pairs that fills the gap between the rows.\n"
											},
											"type": {
												"type": "reference",
												"name": "GapFillFn",
												"id": 3663,
												"typeArguments": [
													{
														"type": "tuple",
														"elements": [
															{
																"type": "intrinsic",
																"name": "number"
															},
															{
																"type": "typeParameter",
																"name": "IndexT"
															}
														]
													},
													{
														"type": "tuple",
														"elements": [
															{
																"type": "intrinsic",
																"name": "number"
															},
															{
																"type": "typeParameter",
																"name": "IndexT"
															}
														]
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "ISeries",
										"id": 2287,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "number"
											},
											{
												"type": "typeParameter",
												"name": "IndexT"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Series.fillGaps",
										"id": 3209
									},
									"implementationOf": {
										"type": "reference",
										"name": "IIndex.fillGaps",
										"id": 3955
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/series.ts",
									"line": 2508,
									"character": 12
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Series.fillGaps",
								"id": 3209
							},
							"implementationOf": {
								"type": "reference",
								"name": "IIndex.fillGaps",
								"id": 3954
							}
						},
						{
							"id": 4054,
							"name": "first",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 4055,
									"name": "first",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Get the first value of the series.",
										"returns": "Returns the first value of the series.\n"
									},
									"type": {
										"type": "typeParameter",
										"name": "IndexT"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Series.first",
										"id": 2985
									},
									"implementationOf": {
										"type": "reference",
										"name": "IIndex.first",
										"id": 3757
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/series.ts",
									"line": 1383,
									"character": 9
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Series.first",
								"id": 2985
							},
							"implementationOf": {
								"type": "reference",
								"name": "IIndex.first",
								"id": 3756
							}
						},
						{
							"id": 4070,
							"name": "forEach",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 4071,
									"name": "forEach",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Invoke a callback function for each value in the series.",
										"returns": "Returns the input series with no modifications.\n"
									},
									"parameters": [
										{
											"id": 4072,
											"name": "callback",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The calback to invoke for each value.\n"
											},
											"type": {
												"type": "reference",
												"name": "CallbackFn",
												"id": 3563,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "IndexT"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "ISeries",
										"id": 2287,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "number"
											},
											{
												"type": "typeParameter",
												"name": "IndexT"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Series.forEach",
										"id": 3001
									},
									"implementationOf": {
										"type": "reference",
										"name": "IIndex.forEach",
										"id": 3773
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/series.ts",
									"line": 1503,
									"character": 11
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Series.forEach",
								"id": 3001
							},
							"implementationOf": {
								"type": "reference",
								"name": "IIndex.forEach",
								"id": 3772
							}
						},
						{
							"id": 3977,
							"name": "getGreaterThan",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 3978,
									"name": "getGreaterThan",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Get the greater than operation for the index.",
										"returns": "Returns a function that can be used to compare a value against an index value.\n"
									},
									"type": {
										"type": "reference",
										"name": "PredicateFn",
										"id": 4289
									},
									"implementationOf": {
										"type": "reference",
										"name": "IIndex.getGreaterThan",
										"id": 3680
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/index.ts",
									"line": 130,
									"character": 18
								}
							],
							"implementationOf": {
								"type": "reference",
								"name": "IIndex.getGreaterThan",
								"id": 3679
							}
						},
						{
							"id": 3981,
							"name": "getIndex",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 3982,
									"name": "getIndex",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Get the index for the series."
									},
									"type": {
										"type": "reference",
										"name": "IIndex",
										"id": 3671,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "number"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Series.getIndex",
										"id": 2912
									},
									"implementationOf": {
										"type": "reference",
										"name": "IIndex.getIndex",
										"id": 3684
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/series.ts",
									"line": 1024,
									"character": 12
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Series.getIndex",
								"id": 2912
							},
							"implementationOf": {
								"type": "reference",
								"name": "IIndex.getIndex",
								"id": 3683
							}
						},
						{
							"id": 3973,
							"name": "getLessThan",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 3974,
									"name": "getLessThan",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Get the less than operation for the index.",
										"returns": "Returns a function that can be used to compare a value against an index value.\n"
									},
									"type": {
										"type": "reference",
										"name": "PredicateFn",
										"id": 4289
									},
									"implementationOf": {
										"type": "reference",
										"name": "IIndex.getLessThan",
										"id": 3676
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/index.ts",
									"line": 98,
									"character": 15
								}
							],
							"implementationOf": {
								"type": "reference",
								"name": "IIndex.getLessThan",
								"id": 3675
							}
						},
						{
							"id": 3975,
							"name": "getLessThanOrEqualTo",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 3976,
									"name": "getLessThanOrEqualTo",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Get the less than or equal to operation for the index.",
										"returns": "Returns a function that can be used to compare a value against an index value.\n"
									},
									"type": {
										"type": "reference",
										"name": "PredicateFn",
										"id": 4289
									},
									"implementationOf": {
										"type": "reference",
										"name": "IIndex.getLessThanOrEqualTo",
										"id": 3678
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/index.ts",
									"line": 121,
									"character": 24
								}
							],
							"implementationOf": {
								"type": "reference",
								"name": "IIndex.getLessThanOrEqualTo",
								"id": 3677
							}
						},
						{
							"id": 3971,
							"name": "getType",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 3972,
									"name": "getType",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Get the type of the index.",
										"returns": "Returns a string that specifies the type of the index.\n"
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									},
									"implementationOf": {
										"type": "reference",
										"name": "IIndex.getType",
										"id": 3674
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/index.ts",
									"line": 64,
									"character": 11
								}
							],
							"implementationOf": {
								"type": "reference",
								"name": "IIndex.getType",
								"id": 3673
							}
						},
						{
							"id": 4149,
							"name": "groupBy",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 4150,
									"name": "groupBy",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Group the series according to the selector.",
										"returns": "Returns a series of groups. Each group is a series with values that have been grouped by the 'selector' function.\n"
									},
									"typeParameter": [
										{
											"id": 4151,
											"name": "GroupT",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										}
									],
									"parameters": [
										{
											"id": 4152,
											"name": "selector",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Selector that defines the value to group by.\n"
											},
											"type": {
												"type": "reference",
												"name": "SelectorWithIndexFn",
												"id": 3569,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "IndexT"
													},
													{
														"type": "typeParameter",
														"name": "GroupT"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "ISeries",
										"id": 2287,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "number"
											},
											{
												"type": "reference",
												"name": "ISeries",
												"id": 2287,
												"typeArguments": [
													{
														"type": "intrinsic",
														"name": "number"
													},
													{
														"type": "typeParameter",
														"name": "IndexT"
													}
												]
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Series.groupBy",
										"id": 3080
									},
									"implementationOf": {
										"type": "reference",
										"name": "IIndex.groupBy",
										"id": 3835
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/series.ts",
									"line": 2003,
									"character": 11
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Series.groupBy",
								"id": 3080
							},
							"implementationOf": {
								"type": "reference",
								"name": "IIndex.groupBy",
								"id": 3834
							}
						},
						{
							"id": 4153,
							"name": "groupSequentialBy",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 4154,
									"name": "groupSequentialBy",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Group sequential values into a Series of windows.",
										"returns": "Returns a series of groups. Each group is a series with values that have been grouped by the 'selector' function.\n"
									},
									"typeParameter": [
										{
											"id": 4155,
											"name": "GroupT",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										}
									],
									"parameters": [
										{
											"id": 4156,
											"name": "selector",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"text": "Optional selector that defines the value to group by.\n"
											},
											"type": {
												"type": "reference",
												"name": "SelectorFn",
												"id": 66,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "IndexT"
													},
													{
														"type": "typeParameter",
														"name": "GroupT"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "ISeries",
										"id": 2287,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "number"
											},
											{
												"type": "reference",
												"name": "ISeries",
												"id": 2287,
												"typeArguments": [
													{
														"type": "intrinsic",
														"name": "number"
													},
													{
														"type": "typeParameter",
														"name": "IndexT"
													}
												]
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Series.groupSequentialBy",
										"id": 3084
									},
									"implementationOf": {
										"type": "reference",
										"name": "IIndex.groupSequentialBy",
										"id": 3839
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/series.ts",
									"line": 2041,
									"character": 21
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Series.groupSequentialBy",
								"id": 3084
							},
							"implementationOf": {
								"type": "reference",
								"name": "IIndex.groupSequentialBy",
								"id": 3838
							}
						},
						{
							"id": 4061,
							"name": "head",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 4062,
									"name": "head",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Get X values from the start of the series.\nPass in a negative value to get all items at the head except X values at the tail.",
										"returns": "Returns a new series that has only the specified number of values taken from the start of the input sequence.\n"
									},
									"parameters": [
										{
											"id": 4063,
											"name": "numValues",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Number of values to take.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "ISeries",
										"id": 2287,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "number"
											},
											{
												"type": "typeParameter",
												"name": "IndexT"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Series.head",
										"id": 2992
									},
									"implementationOf": {
										"type": "reference",
										"name": "IIndex.head",
										"id": 3764
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/series.ts",
									"line": 1447,
									"character": 8
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Series.head",
								"id": 2992
							},
							"implementationOf": {
								"type": "reference",
								"name": "IIndex.head",
								"id": 3763
							}
						},
						{
							"id": 4129,
							"name": "inflate",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 4130,
									"name": "inflate",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Inflate the series to a dataframe.",
										"returns": "Returns a new dataframe that has been created from the input series via the 'selector' function.\n"
									},
									"typeParameter": [
										{
											"id": 4131,
											"name": "ToT",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										}
									],
									"parameters": [
										{
											"id": 4132,
											"name": "selector",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "reference",
												"name": "SelectorWithIndexFn",
												"id": 3569,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "IndexT"
													},
													{
														"type": "typeParameter",
														"name": "ToT"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "IDataFrame",
										"id": 683,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "number"
											},
											{
												"type": "typeParameter",
												"name": "ToT"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Series.inflate",
										"id": 3060
									},
									"implementationOf": {
										"type": "reference",
										"name": "IIndex.inflate",
										"id": 3815
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/series.ts",
									"line": 1865,
									"character": 11
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Series.inflate",
								"id": 3060
							},
							"implementationOf": {
								"type": "reference",
								"name": "IIndex.inflate",
								"id": 3814
							}
						},
						{
							"id": 4272,
							"name": "insertPair",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 4273,
									"name": "insertPair",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Insert a pair at the start of the series.",
										"returns": "Returns a new series with the specified pair inserted.\n"
									},
									"parameters": [
										{
											"id": 4274,
											"name": "pair",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The pair to insert.\n"
											},
											"type": {
												"type": "tuple",
												"elements": [
													{
														"type": "intrinsic",
														"name": "number"
													},
													{
														"type": "typeParameter",
														"name": "IndexT"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "ISeries",
										"id": 2287,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "number"
											},
											{
												"type": "typeParameter",
												"name": "IndexT"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Series.insertPair",
										"id": 3203
									},
									"implementationOf": {
										"type": "reference",
										"name": "IIndex.insertPair",
										"id": 3949
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/series.ts",
									"line": 2479,
									"character": 14
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Series.insertPair",
								"id": 3203
							},
							"implementationOf": {
								"type": "reference",
								"name": "IIndex.insertPair",
								"id": 3948
							}
						},
						{
							"id": 4213,
							"name": "intersection",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 4214,
									"name": "intersection",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Returns the intersection of values between two series.",
										"returns": "Returns the intersection of two series.\n"
									},
									"typeParameter": [
										{
											"id": 4215,
											"name": "InnerIndexT",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										},
										{
											"id": 4216,
											"name": "InnerValueT",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										},
										{
											"id": 4217,
											"name": "KeyT",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										}
									],
									"parameters": [
										{
											"id": 4218,
											"name": "inner",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The other series to combine."
											},
											"type": {
												"type": "reference",
												"name": "ISeries",
												"id": 2287,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "InnerIndexT"
													},
													{
														"type": "typeParameter",
														"name": "InnerValueT"
													}
												]
											}
										},
										{
											"id": 4219,
											"name": "outerSelector",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "reference",
												"name": "SelectorFn",
												"id": 66,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "IndexT"
													},
													{
														"type": "typeParameter",
														"name": "KeyT"
													}
												]
											}
										},
										{
											"id": 4220,
											"name": "innerSelector",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "reference",
												"name": "SelectorFn",
												"id": 66,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "InnerValueT"
													},
													{
														"type": "typeParameter",
														"name": "KeyT"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "ISeries",
										"id": 2287,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "number"
											},
											{
												"type": "typeParameter",
												"name": "IndexT"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Series.intersection",
										"id": 3144
									},
									"implementationOf": {
										"type": "reference",
										"name": "IIndex.intersection",
										"id": 3890
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/series.ts",
									"line": 2202,
									"character": 16
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Series.intersection",
								"id": 3144
							},
							"implementationOf": {
								"type": "reference",
								"name": "IIndex.intersection",
								"id": 3889
							}
						},
						{
							"id": 4229,
							"name": "join",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 4230,
									"name": "join",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Correlates the elements of two series on matching keys.",
										"returns": "Returns the joined series.\n"
									},
									"typeParameter": [
										{
											"id": 4231,
											"name": "KeyT",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										},
										{
											"id": 4232,
											"name": "InnerIndexT",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										},
										{
											"id": 4233,
											"name": "InnerValueT",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										},
										{
											"id": 4234,
											"name": "ResultValueT",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										}
									],
									"parameters": [
										{
											"id": 4235,
											"name": "inner",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The inner series to join."
											},
											"type": {
												"type": "reference",
												"name": "ISeries",
												"id": 2287,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "InnerIndexT"
													},
													{
														"type": "typeParameter",
														"name": "InnerValueT"
													}
												]
											}
										},
										{
											"id": 4236,
											"name": "outerKeySelector",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Selector that chooses the join key from the outer sequence."
											},
											"type": {
												"type": "reference",
												"name": "SelectorFn",
												"id": 66,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "IndexT"
													},
													{
														"type": "typeParameter",
														"name": "KeyT"
													}
												]
											}
										},
										{
											"id": 4237,
											"name": "innerKeySelector",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Selector that chooses the join key from the inner sequence."
											},
											"type": {
												"type": "reference",
												"name": "SelectorFn",
												"id": 66,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "InnerValueT"
													},
													{
														"type": "typeParameter",
														"name": "KeyT"
													}
												]
											}
										},
										{
											"id": 4238,
											"name": "resultSelector",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Selector that defines how to merge outer and inner values.\n"
											},
											"type": {
												"type": "reference",
												"name": "JoinFn",
												"id": 3631,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "IndexT"
													},
													{
														"type": "typeParameter",
														"name": "InnerValueT"
													},
													{
														"type": "typeParameter",
														"name": "ResultValueT"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "ISeries",
										"id": 2287,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "number"
											},
											{
												"type": "typeParameter",
												"name": "ResultValueT"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Series.join",
										"id": 3160
									},
									"implementationOf": {
										"type": "reference",
										"name": "IIndex.join",
										"id": 3906
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/series.ts",
									"line": 2280,
									"character": 8
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Series.join",
								"id": 3160
							},
							"implementationOf": {
								"type": "reference",
								"name": "IIndex.join",
								"id": 3905
							}
						},
						{
							"id": 4239,
							"name": "joinOuter",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 4240,
									"name": "joinOuter",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Performs an outer join on two series. Correlates the elements based on matching keys.\nIncludes elements from both series that have no correlation in the other series.",
										"returns": "Returns the joined series.\n"
									},
									"typeParameter": [
										{
											"id": 4241,
											"name": "KeyT",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										},
										{
											"id": 4242,
											"name": "InnerIndexT",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										},
										{
											"id": 4243,
											"name": "InnerValueT",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										},
										{
											"id": 4244,
											"name": "ResultValueT",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										}
									],
									"parameters": [
										{
											"id": 4245,
											"name": "inner",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The inner series to join."
											},
											"type": {
												"type": "reference",
												"name": "ISeries",
												"id": 2287,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "InnerIndexT"
													},
													{
														"type": "typeParameter",
														"name": "InnerValueT"
													}
												]
											}
										},
										{
											"id": 4246,
											"name": "outerKeySelector",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Selector that chooses the join key from the outer sequence."
											},
											"type": {
												"type": "reference",
												"name": "SelectorFn",
												"id": 66,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "IndexT"
													},
													{
														"type": "typeParameter",
														"name": "KeyT"
													}
												]
											}
										},
										{
											"id": 4247,
											"name": "innerKeySelector",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Selector that chooses the join key from the inner sequence."
											},
											"type": {
												"type": "reference",
												"name": "SelectorFn",
												"id": 66,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "InnerValueT"
													},
													{
														"type": "typeParameter",
														"name": "KeyT"
													}
												]
											}
										},
										{
											"id": 4248,
											"name": "resultSelector",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Selector that defines how to merge outer and inner values.\n\nImplementation from here:\n\n\thttp://blogs.geniuscode.net/RyanDHatch/?p=116\n"
											},
											"type": {
												"type": "reference",
												"name": "JoinFn",
												"id": 3631,
												"typeArguments": [
													{
														"type": "union",
														"types": [
															{
																"type": "typeParameter",
																"name": "IndexT"
															},
															{
																"type": "intrinsic",
																"name": "null"
															}
														]
													},
													{
														"type": "union",
														"types": [
															{
																"type": "typeParameter",
																"name": "InnerValueT"
															},
															{
																"type": "intrinsic",
																"name": "null"
															}
														]
													},
													{
														"type": "typeParameter",
														"name": "ResultValueT"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "ISeries",
										"id": 2287,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "number"
											},
											{
												"type": "typeParameter",
												"name": "ResultValueT"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Series.joinOuter",
										"id": 3170
									},
									"implementationOf": {
										"type": "reference",
										"name": "IIndex.joinOuter",
										"id": 3916
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/series.ts",
									"line": 2337,
									"character": 13
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Series.joinOuter",
								"id": 3170
							},
							"implementationOf": {
								"type": "reference",
								"name": "IIndex.joinOuter",
								"id": 3915
							}
						},
						{
							"id": 4249,
							"name": "joinOuterLeft",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 4250,
									"name": "joinOuterLeft",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Performs a left outer join on two series. Correlates the elements based on matching keys.\nIncludes left elements that have no correlation.",
										"returns": "Returns the joined series.\n"
									},
									"typeParameter": [
										{
											"id": 4251,
											"name": "KeyT",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										},
										{
											"id": 4252,
											"name": "InnerIndexT",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										},
										{
											"id": 4253,
											"name": "InnerValueT",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										},
										{
											"id": 4254,
											"name": "ResultValueT",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										}
									],
									"parameters": [
										{
											"id": 4255,
											"name": "inner",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The inner series to join."
											},
											"type": {
												"type": "reference",
												"name": "ISeries",
												"id": 2287,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "InnerIndexT"
													},
													{
														"type": "typeParameter",
														"name": "InnerValueT"
													}
												]
											}
										},
										{
											"id": 4256,
											"name": "outerKeySelector",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Selector that chooses the join key from the outer sequence."
											},
											"type": {
												"type": "reference",
												"name": "SelectorFn",
												"id": 66,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "IndexT"
													},
													{
														"type": "typeParameter",
														"name": "KeyT"
													}
												]
											}
										},
										{
											"id": 4257,
											"name": "innerKeySelector",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Selector that chooses the join key from the inner sequence."
											},
											"type": {
												"type": "reference",
												"name": "SelectorFn",
												"id": 66,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "InnerValueT"
													},
													{
														"type": "typeParameter",
														"name": "KeyT"
													}
												]
											}
										},
										{
											"id": 4258,
											"name": "resultSelector",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Selector that defines how to merge outer and inner values.\n\nImplementation from here:\n\n\thttp://blogs.geniuscode.net/RyanDHatch/?p=116\n"
											},
											"type": {
												"type": "reference",
												"name": "JoinFn",
												"id": 3631,
												"typeArguments": [
													{
														"type": "union",
														"types": [
															{
																"type": "typeParameter",
																"name": "IndexT"
															},
															{
																"type": "intrinsic",
																"name": "null"
															}
														]
													},
													{
														"type": "union",
														"types": [
															{
																"type": "typeParameter",
																"name": "InnerValueT"
															},
															{
																"type": "intrinsic",
																"name": "null"
															}
														]
													},
													{
														"type": "typeParameter",
														"name": "ResultValueT"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "ISeries",
										"id": 2287,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "number"
											},
											{
												"type": "typeParameter",
												"name": "ResultValueT"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Series.joinOuterLeft",
										"id": 3180
									},
									"implementationOf": {
										"type": "reference",
										"name": "IIndex.joinOuterLeft",
										"id": 3926
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/series.ts",
									"line": 2384,
									"character": 17
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Series.joinOuterLeft",
								"id": 3180
							},
							"implementationOf": {
								"type": "reference",
								"name": "IIndex.joinOuterLeft",
								"id": 3925
							}
						},
						{
							"id": 4259,
							"name": "joinOuterRight",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 4260,
									"name": "joinOuterRight",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Performs a right outer join on two series. Correlates the elements based on matching keys.\nIncludes right elements that have no correlation.",
										"returns": "Returns the joined series.\n"
									},
									"typeParameter": [
										{
											"id": 4261,
											"name": "KeyT",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										},
										{
											"id": 4262,
											"name": "InnerIndexT",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										},
										{
											"id": 4263,
											"name": "InnerValueT",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										},
										{
											"id": 4264,
											"name": "ResultValueT",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										}
									],
									"parameters": [
										{
											"id": 4265,
											"name": "inner",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The inner series to join."
											},
											"type": {
												"type": "reference",
												"name": "ISeries",
												"id": 2287,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "InnerIndexT"
													},
													{
														"type": "typeParameter",
														"name": "InnerValueT"
													}
												]
											}
										},
										{
											"id": 4266,
											"name": "outerKeySelector",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Selector that chooses the join key from the outer sequence."
											},
											"type": {
												"type": "reference",
												"name": "SelectorFn",
												"id": 66,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "IndexT"
													},
													{
														"type": "typeParameter",
														"name": "KeyT"
													}
												]
											}
										},
										{
											"id": 4267,
											"name": "innerKeySelector",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Selector that chooses the join key from the inner sequence."
											},
											"type": {
												"type": "reference",
												"name": "SelectorFn",
												"id": 66,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "InnerValueT"
													},
													{
														"type": "typeParameter",
														"name": "KeyT"
													}
												]
											}
										},
										{
											"id": 4268,
											"name": "resultSelector",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Selector that defines how to merge outer and inner values.\n\nImplementation from here:\n\n\thttp://blogs.geniuscode.net/RyanDHatch/?p=116\n"
											},
											"type": {
												"type": "reference",
												"name": "JoinFn",
												"id": 3631,
												"typeArguments": [
													{
														"type": "union",
														"types": [
															{
																"type": "typeParameter",
																"name": "IndexT"
															},
															{
																"type": "intrinsic",
																"name": "null"
															}
														]
													},
													{
														"type": "union",
														"types": [
															{
																"type": "typeParameter",
																"name": "InnerValueT"
															},
															{
																"type": "intrinsic",
																"name": "null"
															}
														]
													},
													{
														"type": "typeParameter",
														"name": "ResultValueT"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "ISeries",
										"id": 2287,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "number"
											},
											{
												"type": "typeParameter",
												"name": "ResultValueT"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Series.joinOuterRight",
										"id": 3190
									},
									"implementationOf": {
										"type": "reference",
										"name": "IIndex.joinOuterRight",
										"id": 3936
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/series.ts",
									"line": 2425,
									"character": 18
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Series.joinOuterRight",
								"id": 3190
							},
							"implementationOf": {
								"type": "reference",
								"name": "IIndex.joinOuterRight",
								"id": 3935
							}
						},
						{
							"id": 4056,
							"name": "last",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 4057,
									"name": "last",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Get the last value of the series.",
										"returns": "Returns the last value of the series.\n"
									},
									"type": {
										"type": "typeParameter",
										"name": "IndexT"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Series.last",
										"id": 2987
									},
									"implementationOf": {
										"type": "reference",
										"name": "IIndex.last",
										"id": 3759
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/series.ts",
									"line": 1397,
									"character": 8
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Series.last",
								"id": 2987
							},
							"implementationOf": {
								"type": "reference",
								"name": "IIndex.last",
								"id": 3758
							}
						},
						{
							"id": 4141,
							"name": "max",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 4142,
									"name": "max",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Get the max value in the series.",
										"returns": "Returns the maximum of the number values in the series.\n"
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Series.max",
										"id": 3072
									},
									"implementationOf": {
										"type": "reference",
										"name": "IIndex.max",
										"id": 3827
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/series.ts",
									"line": 1961,
									"character": 7
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Series.max",
								"id": 3072
							},
							"implementationOf": {
								"type": "reference",
								"name": "IIndex.max",
								"id": 3826
							}
						},
						{
							"id": 4137,
							"name": "median",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 4138,
									"name": "median",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Get the median value in the series. Not this sorts the series, so can be expensive.",
										"returns": "Returns the median of the values in the series.\n"
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Series.median",
										"id": 3068
									},
									"implementationOf": {
										"type": "reference",
										"name": "IIndex.median",
										"id": 3823
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/series.ts",
									"line": 1921,
									"character": 10
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Series.median",
								"id": 3068
							},
							"implementationOf": {
								"type": "reference",
								"name": "IIndex.median",
								"id": 3822
							}
						},
						{
							"id": 4139,
							"name": "min",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 4140,
									"name": "min",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Get the min value in the series.",
										"returns": "Returns the minimum of the number values in the series.\n"
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Series.min",
										"id": 3070
									},
									"implementationOf": {
										"type": "reference",
										"name": "IIndex.min",
										"id": 3825
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/series.ts",
									"line": 1950,
									"character": 7
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Series.min",
								"id": 3070
							},
							"implementationOf": {
								"type": "reference",
								"name": "IIndex.min",
								"id": 3824
							}
						},
						{
							"id": 4079,
							"name": "none",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 4080,
									"name": "none",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Determine if the predicate returns truthy for none of the values in the series.\nReturns true for an empty series.\nReturns true if the predicate always returns falsy.\nOtherwise returns false.\nIf no predicate is specified the value itself is checked.",
										"returns": "Returns true if the predicate has returned truthy for no values in the series, otherwise returns false.\n"
									},
									"parameters": [
										{
											"id": 4081,
											"name": "predicate",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "reference",
												"name": "PredicateFn",
												"id": 4289,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "IndexT"
													}
												]
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Series.none",
										"id": 3010
									},
									"implementationOf": {
										"type": "reference",
										"name": "IIndex.none",
										"id": 3782
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/series.ts",
									"line": 1586,
									"character": 8
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Series.none",
								"id": 3010
							},
							"implementationOf": {
								"type": "reference",
								"name": "IIndex.none",
								"id": 3781
							}
						},
						{
							"id": 4200,
							"name": "orderBy",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 4201,
									"name": "orderBy",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Sorts the series by a value defined by the selector (ascending).",
										"returns": "Returns a new ordered series that has been sorted by the value returned by the selector.\n"
									},
									"typeParameter": [
										{
											"id": 4202,
											"name": "SortT",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										}
									],
									"parameters": [
										{
											"id": 4203,
											"name": "selector",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Selects the value to sort by.\n"
											},
											"type": {
												"type": "reference",
												"name": "SelectorWithIndexFn",
												"id": 3569,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "IndexT"
													},
													{
														"type": "typeParameter",
														"name": "SortT"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "IOrderedSeries",
										"id": 2574,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "number"
											},
											{
												"type": "typeParameter",
												"name": "IndexT"
											},
											{
												"type": "typeParameter",
												"name": "SortT"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Series.orderBy",
										"id": 3131
									},
									"implementationOf": {
										"type": "reference",
										"name": "IIndex.orderBy",
										"id": 3877
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/series.ts",
									"line": 2156,
									"character": 11
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Series.orderBy",
								"id": 3131
							},
							"implementationOf": {
								"type": "reference",
								"name": "IIndex.orderBy",
								"id": 3876
							}
						},
						{
							"id": 4204,
							"name": "orderByDescending",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 4205,
									"name": "orderByDescending",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Sorts the series by a value defined by the selector (descending).",
										"returns": "Returns a new ordered series that has been sorted by the value returned by the selector.\n"
									},
									"typeParameter": [
										{
											"id": 4206,
											"name": "SortT",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										}
									],
									"parameters": [
										{
											"id": 4207,
											"name": "selector",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Selects the value to sort by.\n"
											},
											"type": {
												"type": "reference",
												"name": "SelectorWithIndexFn",
												"id": 3569,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "IndexT"
													},
													{
														"type": "typeParameter",
														"name": "SortT"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "IOrderedSeries",
										"id": 2574,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "number"
											},
											{
												"type": "typeParameter",
												"name": "IndexT"
											},
											{
												"type": "typeParameter",
												"name": "SortT"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Series.orderByDescending",
										"id": 3135
									},
									"implementationOf": {
										"type": "reference",
										"name": "IIndex.orderByDescending",
										"id": 3881
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/series.ts",
									"line": 2168,
									"character": 21
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Series.orderByDescending",
								"id": 3135
							},
							"implementationOf": {
								"type": "reference",
								"name": "IIndex.orderByDescending",
								"id": 3880
							}
						},
						{
							"id": 4117,
							"name": "parseDates",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 4118,
									"name": "parseDates",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Parse a series with string values to a series with date values.",
										"returns": "Returns a new series where string values from the original series have been parsed to Date values.\n"
									},
									"parameters": [
										{
											"id": 4119,
											"name": "formatString",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "undefined"
													},
													{
														"type": "intrinsic",
														"name": "string"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "ISeries",
										"id": 2287,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "number"
											},
											{
												"type": "reference",
												"name": "Date"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Series.parseDates",
										"id": 3048
									},
									"implementationOf": {
										"type": "reference",
										"name": "IIndex.parseDates",
										"id": 3807
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/series.ts",
									"line": 1793,
									"character": 14
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Series.parseDates",
								"id": 3048
							},
							"implementationOf": {
								"type": "reference",
								"name": "IIndex.parseDates",
								"id": 3806
							}
						},
						{
							"id": 4110,
							"name": "parseFloats",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 4111,
									"name": "parseFloats",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Parse a series with string values to a series with float values.",
										"returns": "Returns a new series where string values from the original series have been parsed to floating-point values.\n"
									},
									"type": {
										"type": "reference",
										"name": "ISeries",
										"id": 2287,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "number"
											},
											{
												"type": "intrinsic",
												"name": "number"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Series.parseFloats",
										"id": 3041
									},
									"implementationOf": {
										"type": "reference",
										"name": "IIndex.parseFloats",
										"id": 3805
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/series.ts",
									"line": 1764,
									"character": 15
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Series.parseFloats",
								"id": 3041
							},
							"implementationOf": {
								"type": "reference",
								"name": "IIndex.parseFloats",
								"id": 3804
							}
						},
						{
							"id": 4104,
							"name": "parseInts",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 4105,
									"name": "parseInts",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Parse a series with string values to a series with int values.",
										"returns": "Returns a new series where string values from the original series have been parsed to integer values.\n"
									},
									"type": {
										"type": "reference",
										"name": "ISeries",
										"id": 2287,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "number"
											},
											{
												"type": "intrinsic",
												"name": "number"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Series.parseInts",
										"id": 3035
									},
									"implementationOf": {
										"type": "reference",
										"name": "IIndex.parseInts",
										"id": 3803
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/series.ts",
									"line": 1737,
									"character": 13
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Series.parseInts",
								"id": 3035
							},
							"implementationOf": {
								"type": "reference",
								"name": "IIndex.parseInts",
								"id": 3802
							}
						},
						{
							"id": 4032,
							"name": "percentChange",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 4033,
									"name": "percentChange",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Compute the percent change between each pair of values.\nPercentages are expressed as 0-1 values.",
										"returns": "Returns a new series where each value indicates the percent change from the previous number value in the original series.\n"
									},
									"type": {
										"type": "reference",
										"name": "ISeries",
										"id": 2287,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "number"
											},
											{
												"type": "intrinsic",
												"name": "number"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Series.percentChange",
										"id": 2963
									},
									"implementationOf": {
										"type": "reference",
										"name": "IIndex.percentChange",
										"id": 3735
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/series.ts",
									"line": 1261,
									"character": 17
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Series.percentChange",
								"id": 2963
							},
							"implementationOf": {
								"type": "reference",
								"name": "IIndex.percentChange",
								"id": 3734
							}
						},
						{
							"id": 3987,
							"name": "resetIndex",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 3988,
									"name": "resetIndex",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Resets the index of the series back to the default zero-based sequential integer index.",
										"returns": "Returns a new series with the index reset to the default zero-based index.\n"
									},
									"type": {
										"type": "reference",
										"name": "ISeries",
										"id": 2287,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "number"
											},
											{
												"type": "typeParameter",
												"name": "IndexT"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Series.resetIndex",
										"id": 2918
									},
									"implementationOf": {
										"type": "reference",
										"name": "IIndex.resetIndex",
										"id": 3690
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/series.ts",
									"line": 1058,
									"character": 14
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Series.resetIndex",
								"id": 2918
							},
							"implementationOf": {
								"type": "reference",
								"name": "IIndex.resetIndex",
								"id": 3689
							}
						},
						{
							"id": 4143,
							"name": "reverse",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 4144,
									"name": "reverse",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Reverse the series.",
										"returns": "Returns a new series that is the reverse of the input.\n"
									},
									"type": {
										"type": "reference",
										"name": "ISeries",
										"id": 2287,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "number"
											},
											{
												"type": "typeParameter",
												"name": "IndexT"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Series.reverse",
										"id": 3074
									},
									"implementationOf": {
										"type": "reference",
										"name": "IIndex.reverse",
										"id": 3829
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/series.ts",
									"line": 1972,
									"character": 11
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Series.reverse",
								"id": 3074
							},
							"implementationOf": {
								"type": "reference",
								"name": "IIndex.reverse",
								"id": 3828
							}
						},
						{
							"id": 4017,
							"name": "rollingWindow",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 4018,
									"name": "rollingWindow",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Segment a series into 'rolling windows'. Returns a new series. Each value in the new series contains a 'window' (or segment) of the original series.",
										"returns": "Returns a new series, each value of which is a 'window' (or segment) of the original series.\n"
									},
									"parameters": [
										{
											"id": 4019,
											"name": "period",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The number of values in the window.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "ISeries",
										"id": 2287,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "number"
											},
											{
												"type": "reference",
												"name": "ISeries",
												"id": 2287,
												"typeArguments": [
													{
														"type": "intrinsic",
														"name": "number"
													},
													{
														"type": "typeParameter",
														"name": "IndexT"
													}
												]
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Series.rollingWindow",
										"id": 2948
									},
									"implementationOf": {
										"type": "reference",
										"name": "IIndex.rollingWindow",
										"id": 3720
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/series.ts",
									"line": 1180,
									"character": 17
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Series.rollingWindow",
								"id": 2948
							},
							"implementationOf": {
								"type": "reference",
								"name": "IIndex.rollingWindow",
								"id": 3719
							}
						},
						{
							"id": 4006,
							"name": "select",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 4007,
									"name": "select",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Generate a new series based by calling the selector function on each value.",
										"returns": "Returns a new series that has been transformed by the selector function.\n"
									},
									"typeParameter": [
										{
											"id": 4008,
											"name": "ToT",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										}
									],
									"parameters": [
										{
											"id": 4009,
											"name": "selector",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Selector function that transforms each value to create a new series.\n"
											},
											"type": {
												"type": "reference",
												"name": "SelectorWithIndexFn",
												"id": 3569,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "IndexT"
													},
													{
														"type": "typeParameter",
														"name": "ToT"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "ISeries",
										"id": 2287,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "number"
											},
											{
												"type": "typeParameter",
												"name": "ToT"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Series.select",
										"id": 2937
									},
									"implementationOf": {
										"type": "reference",
										"name": "IIndex.select",
										"id": 3709
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/series.ts",
									"line": 1120,
									"character": 10
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Series.select",
								"id": 2937
							},
							"implementationOf": {
								"type": "reference",
								"name": "IIndex.select",
								"id": 3708
							}
						},
						{
							"id": 4010,
							"name": "selectMany",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 4011,
									"name": "selectMany",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Generate a new series based on the results of the selector function.",
										"returns": "Returns a new series with values that have been produced by the selector function.\n"
									},
									"typeParameter": [
										{
											"id": 4012,
											"name": "ToT",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										}
									],
									"parameters": [
										{
											"id": 4013,
											"name": "selector",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Selector function that transforms each value into a list of values.\n"
											},
											"type": {
												"type": "reference",
												"name": "SelectorWithIndexFn",
												"id": 3569,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "IndexT"
													},
													{
														"type": "reference",
														"name": "Iterable",
														"typeArguments": [
															{
																"type": "typeParameter",
																"name": "ToT"
															}
														]
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "ISeries",
										"id": 2287,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "number"
											},
											{
												"type": "typeParameter",
												"name": "ToT"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Series.selectMany",
										"id": 2941
									},
									"implementationOf": {
										"type": "reference",
										"name": "IIndex.selectMany",
										"id": 3713
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/series.ts",
									"line": 1136,
									"character": 14
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Series.selectMany",
								"id": 2941
							},
							"implementationOf": {
								"type": "reference",
								"name": "IIndex.selectMany",
								"id": 3712
							}
						},
						{
							"id": 4023,
							"name": "sequentialDistinct",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 4024,
									"name": "sequentialDistinct",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Collapase distinct values that happen to be sequential.",
										"returns": "Returns a new series with duplicate values that are sequential removed.\n"
									},
									"typeParameter": [
										{
											"id": 4025,
											"name": "ToT",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										}
									],
									"parameters": [
										{
											"id": 4026,
											"name": "selector",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "reference",
												"name": "SelectorFn",
												"id": 66,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "IndexT"
													},
													{
														"type": "typeParameter",
														"name": "ToT"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "ISeries",
										"id": 2287,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "number"
											},
											{
												"type": "typeParameter",
												"name": "IndexT"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Series.sequentialDistinct",
										"id": 2954
									},
									"implementationOf": {
										"type": "reference",
										"name": "IIndex.sequentialDistinct",
										"id": 3726
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/series.ts",
									"line": 1212,
									"character": 22
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Series.sequentialDistinct",
								"id": 2954
							},
							"implementationOf": {
								"type": "reference",
								"name": "IIndex.sequentialDistinct",
								"id": 3725
							}
						},
						{
							"id": 4034,
							"name": "skip",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 4035,
									"name": "skip",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Skip a number of values in the series.",
										"returns": "Returns a new series or dataframe with the specified number of values skipped.\n"
									},
									"parameters": [
										{
											"id": 4036,
											"name": "numValues",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Number of values to skip.     *"
											},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "ISeries",
										"id": 2287,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "number"
											},
											{
												"type": "typeParameter",
												"name": "IndexT"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Series.skip",
										"id": 2965
									},
									"implementationOf": {
										"type": "reference",
										"name": "IIndex.skip",
										"id": 3737
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/series.ts",
									"line": 1281,
									"character": 8
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Series.skip",
								"id": 2965
							},
							"implementationOf": {
								"type": "reference",
								"name": "IIndex.skip",
								"id": 3736
							}
						},
						{
							"id": 4040,
							"name": "skipUntil",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 4041,
									"name": "skipUntil",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Skips values in the series until a condition is met.",
										"returns": "Returns a new series with all initial sequential values removed that don't match the predicate.\n"
									},
									"parameters": [
										{
											"id": 4042,
											"name": "predicate",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Return true to indicate the condition met.\n"
											},
											"type": {
												"type": "reference",
												"name": "PredicateFn",
												"id": 4289,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "IndexT"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "ISeries",
										"id": 2287,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "number"
											},
											{
												"type": "typeParameter",
												"name": "IndexT"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Series.skipUntil",
										"id": 2971
									},
									"implementationOf": {
										"type": "reference",
										"name": "IIndex.skipUntil",
										"id": 3743
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/series.ts",
									"line": 1312,
									"character": 13
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Series.skipUntil",
								"id": 2971
							},
							"implementationOf": {
								"type": "reference",
								"name": "IIndex.skipUntil",
								"id": 3742
							}
						},
						{
							"id": 4037,
							"name": "skipWhile",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 4038,
									"name": "skipWhile",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Skips values in the series while a condition is met.",
										"returns": "Returns a new series with all initial sequential values removed that match the predicate.\n"
									},
									"parameters": [
										{
											"id": 4039,
											"name": "predicate",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Return true to indicate the condition met.\n"
											},
											"type": {
												"type": "reference",
												"name": "PredicateFn",
												"id": 4289,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "IndexT"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "ISeries",
										"id": 2287,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "number"
											},
											{
												"type": "typeParameter",
												"name": "IndexT"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Series.skipWhile",
										"id": 2968
									},
									"implementationOf": {
										"type": "reference",
										"name": "IIndex.skipWhile",
										"id": 3740
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/series.ts",
									"line": 1296,
									"character": 13
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Series.skipWhile",
								"id": 2968
							},
							"implementationOf": {
								"type": "reference",
								"name": "IIndex.skipWhile",
								"id": 3739
							}
						},
						{
							"id": 4082,
							"name": "startAt",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 4083,
									"name": "startAt",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Get a new series containing all values starting at and after the specified index value.",
										"returns": "Returns a new series containing all values starting at and after the specified index value.\n"
									},
									"parameters": [
										{
											"id": 4084,
											"name": "indexValue",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The index value to search for before starting the new series.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "ISeries",
										"id": 2287,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "number"
											},
											{
												"type": "typeParameter",
												"name": "IndexT"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Series.startAt",
										"id": 3013
									},
									"implementationOf": {
										"type": "reference",
										"name": "IIndex.startAt",
										"id": 3785
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/series.ts",
									"line": 1619,
									"character": 11
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Series.startAt",
								"id": 3013
							},
							"implementationOf": {
								"type": "reference",
								"name": "IIndex.startAt",
								"id": 3784
							}
						},
						{
							"id": 4133,
							"name": "sum",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 4134,
									"name": "sum",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Sum the values in a series.",
										"returns": "Returns the sum of the number values in the series.\n"
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Series.sum",
										"id": 3064
									},
									"implementationOf": {
										"type": "reference",
										"name": "IIndex.sum",
										"id": 3819
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/series.ts",
									"line": 1890,
									"character": 7
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Series.sum",
								"id": 3064
							},
							"implementationOf": {
								"type": "reference",
								"name": "IIndex.sum",
								"id": 3818
							}
						},
						{
							"id": 4064,
							"name": "tail",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 4065,
									"name": "tail",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Get X values from the end of the series.\nPass in a negative value to get all items at the tail except X values at the head.",
										"returns": "Returns a new series that has only the specified number of values taken from the end of the input sequence.\n"
									},
									"parameters": [
										{
											"id": 4066,
											"name": "numValues",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Number of values to take.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "ISeries",
										"id": 2287,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "number"
											},
											{
												"type": "typeParameter",
												"name": "IndexT"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Series.tail",
										"id": 2995
									},
									"implementationOf": {
										"type": "reference",
										"name": "IIndex.tail",
										"id": 3767
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/series.ts",
									"line": 1467,
									"character": 8
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Series.tail",
								"id": 2995
							},
							"implementationOf": {
								"type": "reference",
								"name": "IIndex.tail",
								"id": 3766
							}
						},
						{
							"id": 4043,
							"name": "take",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 4044,
									"name": "take",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Take a number of rows in the series.",
										"returns": "Returns a new series with up to the specified number of values included.\n"
									},
									"parameters": [
										{
											"id": 4045,
											"name": "numRows",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Number of rows to take.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "ISeries",
										"id": 2287,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "number"
											},
											{
												"type": "typeParameter",
												"name": "IndexT"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Series.take",
										"id": 2974
									},
									"implementationOf": {
										"type": "reference",
										"name": "IIndex.take",
										"id": 3746
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/series.ts",
									"line": 1325,
									"character": 8
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Series.take",
								"id": 2974
							},
							"implementationOf": {
								"type": "reference",
								"name": "IIndex.take",
								"id": 3745
							}
						},
						{
							"id": 4049,
							"name": "takeUntil",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 4050,
									"name": "takeUntil",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Take values from the series until a condition is met.",
										"returns": "Returns a new series or dataframe that only includes the initial sequential values that have not matched the predicate.\n"
									},
									"parameters": [
										{
											"id": 4051,
											"name": "predicate",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Return true to indicate the condition met.\n"
											},
											"type": {
												"type": "reference",
												"name": "PredicateFn",
												"id": 4289,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "IndexT"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "ISeries",
										"id": 2287,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "number"
											},
											{
												"type": "typeParameter",
												"name": "IndexT"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Series.takeUntil",
										"id": 2980
									},
									"implementationOf": {
										"type": "reference",
										"name": "IIndex.takeUntil",
										"id": 3752
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/series.ts",
									"line": 1358,
									"character": 13
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Series.takeUntil",
								"id": 2980
							},
							"implementationOf": {
								"type": "reference",
								"name": "IIndex.takeUntil",
								"id": 3751
							}
						},
						{
							"id": 4046,
							"name": "takeWhile",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 4047,
									"name": "takeWhile",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Take values from the series while a condition is met.",
										"returns": "Returns a new series that only includes the initial sequential values that have matched the predicate.\n"
									},
									"parameters": [
										{
											"id": 4048,
											"name": "predicate",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Return true to indicate the condition met.\n"
											},
											"type": {
												"type": "reference",
												"name": "PredicateFn",
												"id": 4289,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "IndexT"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "ISeries",
										"id": 2287,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "number"
											},
											{
												"type": "typeParameter",
												"name": "IndexT"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Series.takeWhile",
										"id": 2977
									},
									"implementationOf": {
										"type": "reference",
										"name": "IIndex.takeWhile",
										"id": 3749
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/series.ts",
									"line": 1342,
									"character": 13
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Series.takeWhile",
								"id": 2977
							},
							"implementationOf": {
								"type": "reference",
								"name": "IIndex.takeWhile",
								"id": 3748
							}
						},
						{
							"id": 3989,
							"name": "toArray",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 3990,
									"name": "toArray",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Extract values from the series as an array.\nThis forces lazy evaluation to complete.",
										"returns": "Returns an array of values contained within the series.\n"
									},
									"type": {
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "any"
										}
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Series.toArray",
										"id": 2920
									},
									"implementationOf": {
										"type": "reference",
										"name": "IIndex.toArray",
										"id": 3692
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/series.ts",
									"line": 1070,
									"character": 11
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Series.toArray",
								"id": 2920
							},
							"implementationOf": {
								"type": "reference",
								"name": "IIndex.toArray",
								"id": 3691
							}
						},
						{
							"id": 3993,
							"name": "toObject",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 3994,
									"name": "toObject",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Convert the series to a JavaScript object.",
										"returns": "Returns a JavaScript object generated from the input sequence by the key and value selector funtions.\n"
									},
									"typeParameter": [
										{
											"id": 3995,
											"name": "KeyT",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										},
										{
											"id": 3996,
											"name": "FieldT",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										},
										{
											"id": 3997,
											"name": "OutT",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										}
									],
									"parameters": [
										{
											"id": 3998,
											"name": "keySelector",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Function that selects keys for the resulting object."
											},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 3999,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"signatures": [
														{
															"id": 4000,
															"name": "__call",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {},
															"parameters": [
																{
																	"id": 4001,
																	"name": "value",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {},
																	"type": {
																		"type": "typeParameter",
																		"name": "IndexT"
																	}
																}
															],
															"type": {
																"type": "typeParameter",
																"name": "KeyT"
															}
														}
													],
													"sources": [
														{
															"fileName": "lib/series.ts",
															"line": 1105,
															"character": 64
														}
													]
												}
											}
										},
										{
											"id": 4002,
											"name": "valueSelector",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Function that selects values for the resulting object.\n"
											},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 4003,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"signatures": [
														{
															"id": 4004,
															"name": "__call",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {},
															"parameters": [
																{
																	"id": 4005,
																	"name": "value",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {},
																	"type": {
																		"type": "typeParameter",
																		"name": "IndexT"
																	}
																}
															],
															"type": {
																"type": "typeParameter",
																"name": "FieldT"
															}
														}
													],
													"sources": [
														{
															"fileName": "lib/series.ts",
															"line": 1105,
															"character": 104
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "typeParameter",
										"name": "OutT"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Series.toObject",
										"id": 2924
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/series.ts",
									"line": 1105,
									"character": 12
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Series.toObject",
								"id": 2924
							},
							"implementationOf": {
								"type": "reference",
								"name": "IIndex.toObject",
								"id": 3695
							}
						},
						{
							"id": 3991,
							"name": "toPairs",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 3992,
									"name": "toPairs",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Retreive the index and values from the Series as an array of pairs.\nEach pair is [index, value].\nThis forces lazy evaluation to complete.",
										"returns": "Returns an array of pairs that contains the series content. Each pair is a two element array that contains an index and a value.\n"
									},
									"type": {
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "Object"
										}
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Series.toPairs",
										"id": 2922
									},
									"implementationOf": {
										"type": "reference",
										"name": "IIndex.toPairs",
										"id": 3694
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/series.ts",
									"line": 1087,
									"character": 11
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Series.toPairs",
								"id": 2922
							},
							"implementationOf": {
								"type": "reference",
								"name": "IIndex.toPairs",
								"id": 3693
							}
						},
						{
							"id": 4098,
							"name": "toString",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 4099,
									"name": "toString",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Format the series for display as a string.\nThis forces lazy evaluation to complete.",
										"returns": "Generates and returns a string representation of the series or dataframe.\n"
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Series.toString",
										"id": 3029
									},
									"implementationOf": {
										"type": "reference",
										"name": "IIndex.toString",
										"id": 3801
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/series.ts",
									"line": 1698,
									"character": 12
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Series.toString",
								"id": 3029
							},
							"implementationOf": {
								"type": "reference",
								"name": "IIndex.toString",
								"id": 3800
							}
						},
						{
							"id": 4124,
							"name": "toStrings",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 4125,
									"name": "toStrings",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Convert a series of values of different types to a series of string values.",
										"returns": "Returns a new series where the values from the original series have been stringified.\n"
									},
									"parameters": [
										{
											"id": 4126,
											"name": "formatString",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "undefined"
													},
													{
														"type": "intrinsic",
														"name": "string"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "ISeries",
										"id": 2287,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "number"
											},
											{
												"type": "intrinsic",
												"name": "string"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Series.toStrings",
										"id": 3055
									},
									"implementationOf": {
										"type": "reference",
										"name": "IIndex.toStrings",
										"id": 3810
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/series.ts",
									"line": 1830,
									"character": 13
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Series.toStrings",
								"id": 3055
							},
							"implementationOf": {
								"type": "reference",
								"name": "IIndex.toStrings",
								"id": 3809
							}
						},
						{
							"id": 4269,
							"name": "truncateStrings",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 4270,
									"name": "truncateStrings",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Produces a new series with all string values truncated to the requested maximum length.",
										"returns": "Returns a new series with strings that are truncated to the specified maximum length.\n"
									},
									"parameters": [
										{
											"id": 4271,
											"name": "maxLength",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The maximum length of the string values after truncation.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "ISeries",
										"id": 2287,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "number"
											},
											{
												"type": "typeParameter",
												"name": "IndexT"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Series.truncateStrings",
										"id": 3200
									},
									"implementationOf": {
										"type": "reference",
										"name": "IIndex.truncateStrings",
										"id": 3946
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/series.ts",
									"line": 2457,
									"character": 19
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Series.truncateStrings",
								"id": 3200
							},
							"implementationOf": {
								"type": "reference",
								"name": "IIndex.truncateStrings",
								"id": 3945
							}
						},
						{
							"id": 4208,
							"name": "union",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 4209,
									"name": "union",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Returns the unique union of values between two series.",
										"returns": "Returns the union of two series.\n"
									},
									"typeParameter": [
										{
											"id": 4210,
											"name": "KeyT",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										}
									],
									"parameters": [
										{
											"id": 4211,
											"name": "other",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The other series to combine."
											},
											"type": {
												"type": "reference",
												"name": "ISeries",
												"id": 2287,
												"typeArguments": [
													{
														"type": "intrinsic",
														"name": "number"
													},
													{
														"type": "typeParameter",
														"name": "IndexT"
													}
												]
											}
										},
										{
											"id": 4212,
											"name": "selector",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "reference",
												"name": "SelectorFn",
												"id": 66,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "IndexT"
													},
													{
														"type": "typeParameter",
														"name": "KeyT"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "ISeries",
										"id": 2287,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "number"
											},
											{
												"type": "typeParameter",
												"name": "IndexT"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Series.union",
										"id": 3139
									},
									"implementationOf": {
										"type": "reference",
										"name": "IIndex.union",
										"id": 3885
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/series.ts",
									"line": 2181,
									"character": 9
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Series.union",
								"id": 3139
							},
							"implementationOf": {
								"type": "reference",
								"name": "IIndex.union",
								"id": 3884
							}
						},
						{
							"id": 4020,
							"name": "variableWindow",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 4021,
									"name": "variableWindow",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Groups sequential values into variable length 'windows'.",
										"returns": "Returns a series of groups. Each group is itself a series that contains the values in the 'window'.\n"
									},
									"parameters": [
										{
											"id": 4022,
											"name": "comparer",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Predicate that compares two values and returns true if they should be in the same window.\n"
											},
											"type": {
												"type": "reference",
												"name": "ComparerFn",
												"id": 371,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "IndexT"
													},
													{
														"type": "typeParameter",
														"name": "IndexT"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "ISeries",
										"id": 2287,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "number"
											},
											{
												"type": "reference",
												"name": "ISeries",
												"id": 2287,
												"typeArguments": [
													{
														"type": "intrinsic",
														"name": "number"
													},
													{
														"type": "typeParameter",
														"name": "IndexT"
													}
												]
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Series.variableWindow",
										"id": 2951
									},
									"implementationOf": {
										"type": "reference",
										"name": "IIndex.variableWindow",
										"id": 3723
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/series.ts",
									"line": 1196,
									"character": 18
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Series.variableWindow",
								"id": 2951
							},
							"implementationOf": {
								"type": "reference",
								"name": "IIndex.variableWindow",
								"id": 3722
							}
						},
						{
							"id": 4067,
							"name": "where",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 4068,
									"name": "where",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Filter a series by a predicate selector.",
										"returns": "Returns a new series containing only the values that match the predicate.\n"
									},
									"parameters": [
										{
											"id": 4069,
											"name": "predicate",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Predicte function to filter rows of the series.\n"
											},
											"type": {
												"type": "reference",
												"name": "PredicateFn",
												"id": 4289,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "IndexT"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "ISeries",
										"id": 2287,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "number"
											},
											{
												"type": "typeParameter",
												"name": "IndexT"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Series.where",
										"id": 2998
									},
									"implementationOf": {
										"type": "reference",
										"name": "IIndex.where",
										"id": 3770
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/series.ts",
									"line": 1486,
									"character": 9
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Series.where",
								"id": 2998
							},
							"implementationOf": {
								"type": "reference",
								"name": "IIndex.where",
								"id": 3769
							}
						},
						{
							"id": 4014,
							"name": "window",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 4015,
									"name": "window",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Segment a series into 'windows'. Returns a new series. Each value in the new series contains a 'window' (or segment) of the original series.\nUse select or selectPairs to aggregate.",
										"returns": "Returns a new series, each value of which is a 'window' (or segment) of the original series.\n"
									},
									"parameters": [
										{
											"id": 4016,
											"name": "period",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The number of values in the window.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "ISeries",
										"id": 2287,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "number"
											},
											{
												"type": "reference",
												"name": "ISeries",
												"id": 2287,
												"typeArguments": [
													{
														"type": "intrinsic",
														"name": "number"
													},
													{
														"type": "typeParameter",
														"name": "IndexT"
													}
												]
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Series.window",
										"id": 2945
									},
									"implementationOf": {
										"type": "reference",
										"name": "IIndex.window",
										"id": 3717
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/series.ts",
									"line": 1164,
									"character": 10
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Series.window",
								"id": 2945
							},
							"implementationOf": {
								"type": "reference",
								"name": "IIndex.window",
								"id": 3716
							}
						},
						{
							"id": 3983,
							"name": "withIndex",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 3984,
									"name": "withIndex",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Apply a new index to the Series.",
										"returns": "Returns a new series with the specified index attached.\n"
									},
									"typeParameter": [
										{
											"id": 3985,
											"name": "NewIndexT",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										}
									],
									"parameters": [
										{
											"id": 3986,
											"name": "newIndex",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The new array or iterable to apply to the dataframe. Can also be a selector to choose the index for each row in the dataframe.\n"
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "reference",
														"name": "Iterable",
														"typeArguments": [
															{
																"type": "typeParameter",
																"name": "NewIndexT"
															}
														]
													},
													{
														"type": "reference",
														"name": "SelectorFn",
														"id": 66,
														"typeArguments": [
															{
																"type": "typeParameter",
																"name": "IndexT"
															},
															{
																"type": "typeParameter",
																"name": "NewIndexT"
															}
														]
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "ISeries",
										"id": 2287,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "NewIndexT"
											},
											{
												"type": "typeParameter",
												"name": "IndexT"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Series.withIndex",
										"id": 2914
									},
									"implementationOf": {
										"type": "reference",
										"name": "IIndex.withIndex",
										"id": 3686
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/series.ts",
									"line": 1035,
									"character": 13
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Series.withIndex",
								"id": 2914
							},
							"implementationOf": {
								"type": "reference",
								"name": "IIndex.withIndex",
								"id": 3685
							}
						},
						{
							"id": 4172,
							"name": "zip",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 4173,
									"name": "zip",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Zip together multiple series to create a new series.\nPreserves the index of the first series.",
										"returns": "Returns a single series concatenated from multiple input series.\n"
									},
									"typeParameter": [
										{
											"id": 4174,
											"name": "Index2T",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										},
										{
											"id": 4175,
											"name": "Value2T",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										},
										{
											"id": 4176,
											"name": "ResultT",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										}
									],
									"parameters": [
										{
											"id": 4177,
											"name": "s2",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "ISeries",
												"id": 2287,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "Index2T"
													},
													{
														"type": "typeParameter",
														"name": "Value2T"
													}
												]
											}
										},
										{
											"id": 4178,
											"name": "zipper",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Zipper function that produces a new series based on the input series.\n"
											},
											"type": {
												"type": "reference",
												"name": "Zip2Fn",
												"id": 3582,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "IndexT"
													},
													{
														"type": "typeParameter",
														"name": "Value2T"
													},
													{
														"type": "typeParameter",
														"name": "ResultT"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "ISeries",
										"id": 2287,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "number"
											},
											{
												"type": "typeParameter",
												"name": "ResultT"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Series.zip",
										"id": 3103
									},
									"implementationOf": {
										"type": "reference",
										"name": "IIndex.zip",
										"id": 3846
									}
								},
								{
									"id": 4179,
									"name": "zip",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"typeParameter": [
										{
											"id": 4180,
											"name": "Index2T",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										},
										{
											"id": 4181,
											"name": "Value2T",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										},
										{
											"id": 4182,
											"name": "Index3T",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										},
										{
											"id": 4183,
											"name": "Value3T",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										},
										{
											"id": 4184,
											"name": "ResultT",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										}
									],
									"parameters": [
										{
											"id": 4185,
											"name": "s2",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "ISeries",
												"id": 2287,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "Index2T"
													},
													{
														"type": "typeParameter",
														"name": "Value2T"
													}
												]
											}
										},
										{
											"id": 4186,
											"name": "s3",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "ISeries",
												"id": 2287,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "Index3T"
													},
													{
														"type": "typeParameter",
														"name": "Value3T"
													}
												]
											}
										},
										{
											"id": 4187,
											"name": "zipper",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Zip3Fn",
												"id": 3590,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "IndexT"
													},
													{
														"type": "typeParameter",
														"name": "Value2T"
													},
													{
														"type": "typeParameter",
														"name": "Value3T"
													},
													{
														"type": "typeParameter",
														"name": "ResultT"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "ISeries",
										"id": 2287,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "number"
											},
											{
												"type": "typeParameter",
												"name": "ResultT"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Series.zip",
										"id": 3103
									},
									"implementationOf": {
										"type": "reference",
										"name": "IIndex.zip",
										"id": 3852
									}
								},
								{
									"id": 4188,
									"name": "zip",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"typeParameter": [
										{
											"id": 4189,
											"name": "Index2T",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										},
										{
											"id": 4190,
											"name": "Value2T",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										},
										{
											"id": 4191,
											"name": "Index3T",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										},
										{
											"id": 4192,
											"name": "Value3T",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										},
										{
											"id": 4193,
											"name": "Index4T",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										},
										{
											"id": 4194,
											"name": "Value4T",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										},
										{
											"id": 4195,
											"name": "ResultT",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										}
									],
									"parameters": [
										{
											"id": 4196,
											"name": "s2",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "ISeries",
												"id": 2287,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "Index2T"
													},
													{
														"type": "typeParameter",
														"name": "Value2T"
													}
												]
											}
										},
										{
											"id": 4197,
											"name": "s3",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "ISeries",
												"id": 2287,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "Index3T"
													},
													{
														"type": "typeParameter",
														"name": "Value3T"
													}
												]
											}
										},
										{
											"id": 4198,
											"name": "s4",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "ISeries",
												"id": 2287,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "Index4T"
													},
													{
														"type": "typeParameter",
														"name": "Value4T"
													}
												]
											}
										},
										{
											"id": 4199,
											"name": "zipper",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Zip3Fn",
												"id": 3590,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "IndexT"
													},
													{
														"type": "typeParameter",
														"name": "Value2T"
													},
													{
														"type": "typeParameter",
														"name": "Value3T"
													},
													{
														"type": "typeParameter",
														"name": "ResultT"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "ISeries",
										"id": 2287,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "number"
											},
											{
												"type": "typeParameter",
												"name": "ResultT"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Series.zip",
										"id": 3103
									},
									"implementationOf": {
										"type": "reference",
										"name": "IIndex.zip",
										"id": 3861
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/series.ts",
									"line": 2139,
									"character": 7
								},
								{
									"fileName": "lib/series.ts",
									"line": 2140,
									"character": 7
								},
								{
									"fileName": "lib/series.ts",
									"line": 2141,
									"character": 7
								},
								{
									"fileName": "lib/series.ts",
									"line": 2142,
									"character": 7
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Series.zip",
								"id": 3103
							},
							"implementationOf": {
								"type": "reference",
								"name": "IIndex.zip",
								"id": 3845
							}
						},
						{
							"id": 4157,
							"name": "concat",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isStatic": true,
								"isExported": true
							},
							"signatures": [
								{
									"id": 4158,
									"name": "concat",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Concatenate multiple series into a single series.",
										"returns": "Returns a single series concatenated from multiple input series.\n"
									},
									"typeParameter": [
										{
											"id": 4159,
											"name": "IndexT",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										},
										{
											"id": 4160,
											"name": "ValueT",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										}
									],
									"parameters": [
										{
											"id": 4161,
											"name": "series",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Array of series to concatenate.\n"
											},
											"type": {
												"type": "array",
												"elementType": {
													"type": "reference",
													"name": "ISeries",
													"id": 2287,
													"typeArguments": [
														{
															"type": "typeParameter",
															"name": "IndexT"
														},
														{
															"type": "typeParameter",
															"name": "ValueT"
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "ISeries",
										"id": 2287,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "IndexT"
											},
											{
												"type": "typeParameter",
												"name": "ValueT"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Series.concat",
										"id": 3088
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/series.ts",
									"line": 2060,
									"character": 17
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Series.concat",
								"id": 3088
							}
						},
						{
							"id": 4112,
							"name": "parseDate",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isStatic": true,
								"isExported": true
							},
							"signatures": [
								{
									"id": 4113,
									"name": "parseDate",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 4114,
											"name": "value",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "any"
													},
													{
														"type": "intrinsic",
														"name": "undefined"
													}
												]
											}
										},
										{
											"id": 4115,
											"name": "valueIndex",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										},
										{
											"id": 4116,
											"name": "formatString",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "undefined"
													},
													{
														"type": "intrinsic",
														"name": "string"
													}
												]
											}
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"name": "Date"
											},
											{
												"type": "intrinsic",
												"name": "undefined"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Series.parseDate",
										"id": 3043
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/series.ts",
									"line": 1771,
									"character": 20
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Series.parseDate",
								"id": 3043
							}
						},
						{
							"id": 4106,
							"name": "parseFloat",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isStatic": true,
								"isExported": true
							},
							"signatures": [
								{
									"id": 4107,
									"name": "parseFloat",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 4108,
											"name": "value",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "any"
													},
													{
														"type": "intrinsic",
														"name": "undefined"
													}
												]
											}
										},
										{
											"id": 4109,
											"name": "valueIndex",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "number"
											},
											{
												"type": "intrinsic",
												"name": "undefined"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Series.parseFloat",
										"id": 3037
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/series.ts",
									"line": 1744,
									"character": 21
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Series.parseFloat",
								"id": 3037
							}
						},
						{
							"id": 4100,
							"name": "parseInt",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isStatic": true,
								"isExported": true
							},
							"signatures": [
								{
									"id": 4101,
									"name": "parseInt",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 4102,
											"name": "value",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "any"
													},
													{
														"type": "intrinsic",
														"name": "undefined"
													}
												]
											}
										},
										{
											"id": 4103,
											"name": "valueIndex",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "number"
											},
											{
												"type": "intrinsic",
												"name": "undefined"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Series.parseInt",
										"id": 3031
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/series.ts",
									"line": 1717,
									"character": 19
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Series.parseInt",
								"id": 3031
							}
						},
						{
							"id": 4120,
							"name": "toString",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isStatic": true,
								"isExported": true
							},
							"signatures": [
								{
									"id": 4121,
									"name": "toString",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 4122,
											"name": "value",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "any"
													},
													{
														"type": "intrinsic",
														"name": "undefined"
													}
												]
											}
										},
										{
											"id": 4123,
											"name": "formatString",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "undefined"
													},
													{
														"type": "intrinsic",
														"name": "string"
													}
												]
											}
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "undefined"
											},
											{
												"type": "intrinsic",
												"name": "null"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Series.toString",
										"id": 3051
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/series.ts",
									"line": 1805,
									"character": 19
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Series.toString",
								"id": 3051
							}
						},
						{
							"id": 4165,
							"name": "zip",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isStatic": true,
								"isExported": true
							},
							"signatures": [
								{
									"id": 4166,
									"name": "zip",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Zip together multiple series to create a new series.\nPreserves the index of the first series.",
										"returns": "Returns a single series zipped from multiple input series.\n"
									},
									"typeParameter": [
										{
											"id": 4167,
											"name": "IndexT",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										},
										{
											"id": 4168,
											"name": "ValueT",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										},
										{
											"id": 4169,
											"name": "ResultT",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										}
									],
									"parameters": [
										{
											"id": 4170,
											"name": "series",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Multiple arguments. Each can be either a series or an array of series."
											},
											"type": {
												"type": "array",
												"elementType": {
													"type": "reference",
													"name": "ISeries",
													"id": 2287,
													"typeArguments": [
														{
															"type": "typeParameter",
															"name": "IndexT"
														},
														{
															"type": "typeParameter",
															"name": "ValueT"
														}
													]
												}
											}
										},
										{
											"id": 4171,
											"name": "zipper",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Selector function that produces a new series based on the input series.\n"
											},
											"type": {
												"type": "reference",
												"name": "ZipNFn",
												"id": 3576,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "ValueT"
													},
													{
														"type": "typeParameter",
														"name": "ResultT"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "ISeries",
										"id": 2287,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "IndexT"
											},
											{
												"type": "typeParameter",
												"name": "ResultT"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Series.zip",
										"id": 3096
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/series.ts",
									"line": 2106,
									"character": 14
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Series.zip",
								"id": 3096
							}
						}
					],
					"groups": [
						{
							"title": "Constructors",
							"kind": 512,
							"children": [
								3968
							]
						},
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								3967
							]
						},
						{
							"title": "Methods",
							"kind": 2048,
							"children": [
								3979,
								4091,
								4027,
								4073,
								4076,
								4275,
								4058,
								4135,
								4127,
								4088,
								4094,
								4162,
								4052,
								4282,
								4285,
								4287,
								4145,
								4085,
								4221,
								4278,
								4054,
								4070,
								3977,
								3981,
								3973,
								3975,
								3971,
								4149,
								4153,
								4061,
								4129,
								4272,
								4213,
								4229,
								4239,
								4249,
								4259,
								4056,
								4141,
								4137,
								4139,
								4079,
								4200,
								4204,
								4117,
								4110,
								4104,
								4032,
								3987,
								4143,
								4017,
								4006,
								4010,
								4023,
								4034,
								4040,
								4037,
								4082,
								4133,
								4064,
								4043,
								4049,
								4046,
								3989,
								3993,
								3991,
								4098,
								4124,
								4269,
								4208,
								4020,
								4067,
								4014,
								3983,
								4172,
								4157,
								4112,
								4106,
								4100,
								4120,
								4165
							]
						}
					],
					"sources": [
						{
							"fileName": "lib/index.ts",
							"line": 48,
							"character": 18
						}
					],
					"extendedTypes": [
						{
							"type": "reference",
							"name": "Series",
							"id": 2877,
							"typeArguments": [
								{
									"type": "intrinsic",
									"name": "number"
								},
								{
									"type": "typeParameter",
									"name": "IndexT"
								}
							]
						}
					],
					"implementedTypes": [
						{
							"type": "reference",
							"name": "ISeries",
							"id": 2287,
							"typeArguments": [
								{
									"type": "intrinsic",
									"name": "number"
								},
								{
									"type": "typeParameter",
									"name": "IndexT"
								}
							]
						},
						{
							"type": "reference",
							"name": "IIndex",
							"id": 3671,
							"typeArguments": [
								{
									"type": "typeParameter",
									"name": "IndexT"
								}
							]
						}
					]
				},
				{
					"id": 3671,
					"name": "IIndex",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "Interface that represents an index for a Series."
					},
					"typeParameter": [
						{
							"id": 3672,
							"name": "IndexT",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {}
						}
					],
					"children": [
						{
							"id": 3681,
							"name": "__@iterator",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 3682,
									"name": "__@iterator",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Get an iterator to enumerate the values of the series."
									},
									"type": {
										"type": "reference",
										"name": "Iterator",
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "IndexT"
											}
										]
									},
									"overwrites": {
										"type": "reference",
										"name": "Iterable.[Symbol.iterator]"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "ISeries.[Symbol.iterator]",
										"id": 2290
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/series.ts",
									"line": 134,
									"character": 21
								}
							],
							"overwrites": {
								"type": "reference",
								"name": "Iterable.[Symbol.iterator]"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "ISeries.[Symbol.iterator]",
								"id": 2290
							}
						},
						{
							"id": 3793,
							"name": "after",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 3794,
									"name": "after",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Get a new series containing all values after the specified index value (exclusive).",
										"returns": "Returns a new series containing all values after the specified index value.\n"
									},
									"parameters": [
										{
											"id": 3795,
											"name": "indexValue",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The index value to search for.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "ISeries",
										"id": 2287,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "number"
											},
											{
												"type": "typeParameter",
												"name": "IndexT"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "ISeries.after",
										"id": 2402
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/series.ts",
									"line": 448,
									"character": 9
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "ISeries.after",
								"id": 2402
							}
						},
						{
							"id": 3729,
							"name": "aggregate",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 3730,
									"name": "aggregate",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Aggregate the values in the series.",
										"returns": "Returns a new value that has been aggregated from the input sequence by the 'selector' function.\n"
									},
									"typeParameter": [
										{
											"id": 3731,
											"name": "ToT",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										}
									],
									"parameters": [
										{
											"id": 3732,
											"name": "seedOrSelector",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "reference",
														"name": "AggregateFn",
														"id": 3644,
														"typeArguments": [
															{
																"type": "typeParameter",
																"name": "IndexT"
															},
															{
																"type": "typeParameter",
																"name": "ToT"
															}
														]
													},
													{
														"type": "typeParameter",
														"name": "ToT"
													}
												]
											}
										},
										{
											"id": 3733,
											"name": "selector",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"text": "Function that takes the seed and then each value in the series and produces the aggregate value.\n"
											},
											"type": {
												"type": "reference",
												"name": "AggregateFn",
												"id": 3644,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "IndexT"
													},
													{
														"type": "typeParameter",
														"name": "ToT"
													}
												]
											}
										}
									],
									"type": {
										"type": "typeParameter",
										"name": "ToT"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "ISeries.aggregate",
										"id": 2338
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/series.ts",
									"line": 246,
									"character": 13
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "ISeries.aggregate",
								"id": 2338
							}
						},
						{
							"id": 3775,
							"name": "all",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 3776,
									"name": "all",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Determine if the predicate returns truthy for all values in the series.\nReturns false as soon as the predicate evaluates to falsy.\nReturns true if the predicate returns truthy for all values in the series.\nReturns false if the series is empty.",
										"text": "TODO: Should predicate here by optional  as well same as in any and none?\n",
										"returns": "Returns true if the predicate has returned truthy for every value in the sequence, otherwise returns false.\n"
									},
									"parameters": [
										{
											"id": 3777,
											"name": "predicate",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Predicate function that receives each value in turn and returns truthy for a match, otherwise falsy.\n"
											},
											"type": {
												"type": "reference",
												"name": "PredicateFn",
												"id": 4289,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "IndexT"
													}
												]
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "ISeries.all",
										"id": 2384
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/series.ts",
									"line": 387,
									"character": 7
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "ISeries.all",
								"id": 2384
							}
						},
						{
							"id": 3778,
							"name": "any",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 3779,
									"name": "any",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Determine if the predicate returns truthy for any of the values in the series.\nReturns true as soon as the predicate returns truthy.\nReturns false if the predicate never returns truthy.\nIf no predicate is specified the value itself is checked.",
										"returns": "Returns true if the predicate has returned truthy for any value in the sequence, otherwise returns false.\n"
									},
									"parameters": [
										{
											"id": 3780,
											"name": "predicate",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "reference",
												"name": "PredicateFn",
												"id": 4289,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "IndexT"
													}
												]
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "ISeries.any",
										"id": 2387
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/series.ts",
									"line": 399,
									"character": 7
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "ISeries.any",
								"id": 2387
							}
						},
						{
							"id": 3951,
							"name": "appendPair",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 3952,
									"name": "appendPair",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Append a pair to the end of a Series.",
										"returns": "Returns a new series with the specified pair appended.\n"
									},
									"parameters": [
										{
											"id": 3953,
											"name": "pair",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The pair to append.\n"
											},
											"type": {
												"type": "tuple",
												"elements": [
													{
														"type": "intrinsic",
														"name": "number"
													},
													{
														"type": "typeParameter",
														"name": "IndexT"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "ISeries",
										"id": 2287,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "number"
											},
											{
												"type": "typeParameter",
												"name": "IndexT"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "ISeries.appendPair",
										"id": 2560
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/series.ts",
									"line": 781,
									"character": 14
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "ISeries.appendPair",
								"id": 2560
							}
						},
						{
							"id": 3760,
							"name": "at",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 3761,
									"name": "at",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Get the value at a specified index.",
										"returns": "Returns the value from the specified index in the sequence or undefined if there is no such index in the series.\n"
									},
									"parameters": [
										{
											"id": 3762,
											"name": "index",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Index to for which to retreive the value.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "typeParameter",
												"name": "IndexT"
											},
											{
												"type": "intrinsic",
												"name": "undefined"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "ISeries.at",
										"id": 2369
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/series.ts",
									"line": 337,
									"character": 6
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "ISeries.at",
								"id": 2369
							}
						},
						{
							"id": 3820,
							"name": "average",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 3821,
									"name": "average",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Average the values in a series.",
										"returns": "Returns the average of the number values in the series.\n"
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "ISeries.average",
										"id": 2429
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/series.ts",
									"line": 528,
									"character": 11
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "ISeries.average",
								"id": 2429
							}
						},
						{
							"id": 3812,
							"name": "bake",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 3813,
									"name": "bake",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Forces lazy evaluation to complete and 'bakes' the series into memory.",
										"returns": "Returns a series that has been 'baked', all lazy evaluation has completed.\n"
									},
									"type": {
										"type": "reference",
										"name": "ISeries",
										"id": 2287,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "number"
											},
											{
												"type": "typeParameter",
												"name": "IndexT"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "ISeries.bake",
										"id": 2421
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/series.ts",
									"line": 505,
									"character": 8
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "ISeries.bake",
								"id": 2421
							}
						},
						{
							"id": 3790,
							"name": "before",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 3791,
									"name": "before",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Get a new series containing all values up to the specified index value (exclusive).",
										"returns": "Returns a new series containing all values up to the specified inde value.\n"
									},
									"parameters": [
										{
											"id": 3792,
											"name": "indexValue",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The index value to search for before ending the new series.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "ISeries",
										"id": 2287,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "number"
											},
											{
												"type": "typeParameter",
												"name": "IndexT"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "ISeries.before",
										"id": 2399
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/series.ts",
									"line": 439,
									"character": 10
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "ISeries.before",
								"id": 2399
							}
						},
						{
							"id": 3796,
							"name": "between",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 3797,
									"name": "between",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Get a new series containing all values between the specified index values (inclusive).",
										"returns": "Returns a new series containing all values between the specified index values (inclusive).\n"
									},
									"parameters": [
										{
											"id": 3798,
											"name": "startIndexValue",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The index where the new sequence starts."
											},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										},
										{
											"id": 3799,
											"name": "endIndexValue",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The index where the new sequence ends.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "ISeries",
										"id": 2287,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "number"
											},
											{
												"type": "typeParameter",
												"name": "IndexT"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "ISeries.between",
										"id": 2405
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/series.ts",
									"line": 458,
									"character": 11
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "ISeries.between",
								"id": 2405
							}
						},
						{
							"id": 3842,
							"name": "concat",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 3843,
									"name": "concat",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Concatenate multiple other series onto this series.",
										"returns": "Returns a single series concatenated from multiple input series.\n"
									},
									"parameters": [
										{
											"id": 3844,
											"name": "series",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isRest": true
											},
											"comment": {
												"text": "Multiple arguments. Each can be either a series or an array of series.\n"
											},
											"type": {
												"type": "array",
												"elementType": {
													"type": "union",
													"types": [
														{
															"type": "reference",
															"name": "ISeries",
															"id": 2287,
															"typeArguments": [
																{
																	"type": "unknown",
																	"name": "IndexT"
																},
																{
																	"type": "unknown",
																	"name": "ValueT"
																}
															]
														},
														{
															"type": "array",
															"elementType": {
																"type": "reference",
																"name": "ISeries",
																"id": 2287,
																"typeArguments": [
																	{
																		"type": "unknown",
																		"name": "IndexT"
																	},
																	{
																		"type": "unknown",
																		"name": "ValueT"
																	}
																]
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "ISeries",
										"id": 2287,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "number"
											},
											{
												"type": "typeParameter",
												"name": "IndexT"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "ISeries.concat",
										"id": 2451
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/series.ts",
									"line": 592,
									"character": 10
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "ISeries.concat",
								"id": 2451
							}
						},
						{
							"id": 3754,
							"name": "count",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 3755,
									"name": "count",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Count the number of values in the series.",
										"returns": "Returns the count of all values in the series.\n"
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "ISeries.count",
										"id": 2363
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/series.ts",
									"line": 314,
									"character": 9
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "ISeries.count",
								"id": 2363
							}
						},
						{
							"id": 3958,
							"name": "defaultIfEmpty",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 3959,
									"name": "defaultIfEmpty",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Returns the specified default sequence if the series is empty.",
										"returns": "Returns 'defaultSequence' if the series is empty.\n"
									},
									"parameters": [
										{
											"id": 3960,
											"name": "defaultSequence",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Default sequence to return if the series is empty.\n"
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "array",
														"elementType": {
															"type": "typeParameter",
															"name": "IndexT"
														}
													},
													{
														"type": "reference",
														"name": "ISeries",
														"id": 2287,
														"typeArguments": [
															{
																"type": "intrinsic",
																"name": "number"
															},
															{
																"type": "typeParameter",
																"name": "IndexT"
															}
														]
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "ISeries",
										"id": 2287,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "number"
											},
											{
												"type": "typeParameter",
												"name": "IndexT"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "ISeries.defaultIfEmpty",
										"id": 2567
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/series.ts",
									"line": 800,
									"character": 18
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "ISeries.defaultIfEmpty",
								"id": 2567
							}
						},
						{
							"id": 3961,
							"name": "detectTypes",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 3962,
									"name": "detectTypes",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Detect the types of the values in the sequence.",
										"returns": "Returns a dataframe that describes the data types contained in the input series or dataframe.\n"
									},
									"type": {
										"type": "reference",
										"name": "IDataFrame",
										"id": 683,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "number"
											},
											{
												"type": "reference",
												"name": "ITypeFrequency",
												"id": 2281
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "ISeries.detectTypes",
										"id": 2570
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/series.ts",
									"line": 807,
									"character": 15
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "ISeries.detectTypes",
								"id": 2570
							}
						},
						{
							"id": 3963,
							"name": "detectValues",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 3964,
									"name": "detectValues",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Detect the frequency of values in the sequence.",
										"returns": "Returns a dataframe that describes the values contained in the input sequence.\n"
									},
									"type": {
										"type": "reference",
										"name": "IDataFrame",
										"id": 683,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "number"
											},
											{
												"type": "reference",
												"name": "IValueFrequency",
												"id": 2284
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "ISeries.detectValues",
										"id": 2572
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/series.ts",
									"line": 814,
									"character": 16
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "ISeries.detectValues",
								"id": 2572
							}
						},
						{
							"id": 3830,
							"name": "distinct",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 3831,
									"name": "distinct",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Returns only values in the series that have distinct values.",
										"returns": "Returns a series containing only unique values as determined by the 'selector' function.\n"
									},
									"typeParameter": [
										{
											"id": 3832,
											"name": "ToT",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										}
									],
									"parameters": [
										{
											"id": 3833,
											"name": "selector",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"text": "Selects the value used to compare for duplicates.\n"
											},
											"type": {
												"type": "reference",
												"name": "SelectorFn",
												"id": 66,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "IndexT"
													},
													{
														"type": "typeParameter",
														"name": "ToT"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "ISeries",
										"id": 2287,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "number"
											},
											{
												"type": "typeParameter",
												"name": "IndexT"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "ISeries.distinct",
										"id": 2439
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/series.ts",
									"line": 565,
									"character": 12
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "ISeries.distinct",
								"id": 2439
							}
						},
						{
							"id": 3787,
							"name": "endAt",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 3788,
									"name": "endAt",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Get a new series containing all values up until and including the specified index value (inclusive).",
										"returns": "Returns a new series containing all values up until and including the specified index value.\n"
									},
									"parameters": [
										{
											"id": 3789,
											"name": "indexValue",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The index value to search for before ending the new series.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "ISeries",
										"id": 2287,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "number"
											},
											{
												"type": "typeParameter",
												"name": "IndexT"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "ISeries.endAt",
										"id": 2396
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/series.ts",
									"line": 430,
									"character": 9
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "ISeries.endAt",
								"id": 2396
							}
						},
						{
							"id": 3897,
							"name": "except",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 3898,
									"name": "except",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Returns the exception of values between two series.",
										"returns": "Returns the difference between the two series.\n"
									},
									"typeParameter": [
										{
											"id": 3899,
											"name": "InnerIndexT",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										},
										{
											"id": 3900,
											"name": "InnerValueT",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										},
										{
											"id": 3901,
											"name": "KeyT",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										}
									],
									"parameters": [
										{
											"id": 3902,
											"name": "inner",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The other series to combine."
											},
											"type": {
												"type": "reference",
												"name": "ISeries",
												"id": 2287,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "InnerIndexT"
													},
													{
														"type": "typeParameter",
														"name": "InnerValueT"
													}
												]
											}
										},
										{
											"id": 3903,
											"name": "outerSelector",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "reference",
												"name": "SelectorFn",
												"id": 66,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "IndexT"
													},
													{
														"type": "typeParameter",
														"name": "KeyT"
													}
												]
											}
										},
										{
											"id": 3904,
											"name": "innerSelector",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "reference",
												"name": "SelectorFn",
												"id": 66,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "InnerValueT"
													},
													{
														"type": "typeParameter",
														"name": "KeyT"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "ISeries",
										"id": 2287,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "number"
											},
											{
												"type": "typeParameter",
												"name": "IndexT"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "ISeries.except",
										"id": 2506
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/series.ts",
									"line": 663,
									"character": 10
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "ISeries.except",
								"id": 2506
							}
						},
						{
							"id": 3954,
							"name": "fillGaps",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 3955,
									"name": "fillGaps",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Fill gaps in a series or dataframe.",
										"returns": "Returns a new series with gaps filled in.\n"
									},
									"parameters": [
										{
											"id": 3956,
											"name": "comparer",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Comparer that is passed pairA and pairB, two consecutive rows, return truthy if there is a gap between the rows, or falsey if there is no gap."
											},
											"type": {
												"type": "reference",
												"name": "ComparerFn",
												"id": 371,
												"typeArguments": [
													{
														"type": "tuple",
														"elements": [
															{
																"type": "intrinsic",
																"name": "number"
															},
															{
																"type": "typeParameter",
																"name": "IndexT"
															}
														]
													},
													{
														"type": "tuple",
														"elements": [
															{
																"type": "intrinsic",
																"name": "number"
															},
															{
																"type": "typeParameter",
																"name": "IndexT"
															}
														]
													}
												]
											}
										},
										{
											"id": 3957,
											"name": "generator",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Generator that is passed pairA and pairB, two consecutive rows, returns an array of pairs that fills the gap between the rows.\n"
											},
											"type": {
												"type": "reference",
												"name": "GapFillFn",
												"id": 3663,
												"typeArguments": [
													{
														"type": "tuple",
														"elements": [
															{
																"type": "intrinsic",
																"name": "number"
															},
															{
																"type": "typeParameter",
																"name": "IndexT"
															}
														]
													},
													{
														"type": "tuple",
														"elements": [
															{
																"type": "intrinsic",
																"name": "number"
															},
															{
																"type": "typeParameter",
																"name": "IndexT"
															}
														]
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "ISeries",
										"id": 2287,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "number"
											},
											{
												"type": "typeParameter",
												"name": "IndexT"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "ISeries.fillGaps",
										"id": 2563
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/series.ts",
									"line": 791,
									"character": 12
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "ISeries.fillGaps",
								"id": 2563
							}
						},
						{
							"id": 3756,
							"name": "first",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 3757,
									"name": "first",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Get the first value of the series.",
										"returns": "Returns the first value of the series.\n"
									},
									"type": {
										"type": "typeParameter",
										"name": "IndexT"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "ISeries.first",
										"id": 2365
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/series.ts",
									"line": 321,
									"character": 9
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "ISeries.first",
								"id": 2365
							}
						},
						{
							"id": 3772,
							"name": "forEach",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 3773,
									"name": "forEach",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Invoke a callback function for each value in the series.",
										"returns": "Returns the input series with no modifications.\n"
									},
									"parameters": [
										{
											"id": 3774,
											"name": "callback",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The calback to invoke for each value.\n"
											},
											"type": {
												"type": "reference",
												"name": "CallbackFn",
												"id": 3563,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "IndexT"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "ISeries",
										"id": 2287,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "number"
											},
											{
												"type": "typeParameter",
												"name": "IndexT"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "ISeries.forEach",
										"id": 2381
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/series.ts",
									"line": 373,
									"character": 11
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "ISeries.forEach",
								"id": 2381
							}
						},
						{
							"id": 3679,
							"name": "getGreaterThan",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 3680,
									"name": "getGreaterThan",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Get the greater than operation for the index.",
										"returns": "Returns a function that can be used to compare a value against an index value.\n"
									},
									"type": {
										"type": "reference",
										"name": "PredicateFn",
										"id": 4289
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/index.ts",
									"line": 41,
									"character": 18
								}
							]
						},
						{
							"id": 3683,
							"name": "getIndex",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 3684,
									"name": "getIndex",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Get the index for the series."
									},
									"type": {
										"type": "reference",
										"name": "IIndex",
										"id": 3671,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "number"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "ISeries.getIndex",
										"id": 2292
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/series.ts",
									"line": 139,
									"character": 12
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "ISeries.getIndex",
								"id": 2292
							}
						},
						{
							"id": 3675,
							"name": "getLessThan",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 3676,
									"name": "getLessThan",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Get the less than operation for the index.",
										"returns": "Returns a function that can be used to compare a value against an index value.\n"
									},
									"type": {
										"type": "reference",
										"name": "PredicateFn",
										"id": 4289
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/index.ts",
									"line": 27,
									"character": 15
								}
							]
						},
						{
							"id": 3677,
							"name": "getLessThanOrEqualTo",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 3678,
									"name": "getLessThanOrEqualTo",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Get the less than or equal to operation for the index.",
										"returns": "Returns a function that can be used to compare a value against an index value.\n"
									},
									"type": {
										"type": "reference",
										"name": "PredicateFn",
										"id": 4289
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/index.ts",
									"line": 34,
									"character": 24
								}
							]
						},
						{
							"id": 3673,
							"name": "getType",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 3674,
									"name": "getType",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Get the type of the index.",
										"returns": "Returns a string that specifies the type of the index.\n"
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/index.ts",
									"line": 20,
									"character": 11
								}
							]
						},
						{
							"id": 3834,
							"name": "groupBy",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 3835,
									"name": "groupBy",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Group the series according to the selector.",
										"returns": "Returns a series of groups. Each group is a series with values that have been grouped by the 'selector' function.\n"
									},
									"typeParameter": [
										{
											"id": 3836,
											"name": "GroupT",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										}
									],
									"parameters": [
										{
											"id": 3837,
											"name": "selector",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Selector that defines the value to group by.\n"
											},
											"type": {
												"type": "reference",
												"name": "SelectorFn",
												"id": 66,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "IndexT"
													},
													{
														"type": "typeParameter",
														"name": "GroupT"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "ISeries",
										"id": 2287,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "number"
											},
											{
												"type": "reference",
												"name": "ISeries",
												"id": 2287,
												"typeArguments": [
													{
														"type": "intrinsic",
														"name": "number"
													},
													{
														"type": "typeParameter",
														"name": "IndexT"
													}
												]
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "ISeries.groupBy",
										"id": 2443
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/series.ts",
									"line": 574,
									"character": 11
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "ISeries.groupBy",
								"id": 2443
							}
						},
						{
							"id": 3838,
							"name": "groupSequentialBy",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 3839,
									"name": "groupSequentialBy",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Group sequential values into a Series of windows.",
										"returns": "Returns a series of groups. Each group is a series with values that have been grouped by the 'selector' function.\n"
									},
									"typeParameter": [
										{
											"id": 3840,
											"name": "GroupT",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										}
									],
									"parameters": [
										{
											"id": 3841,
											"name": "selector",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"text": "Optional selector that defines the value to group by.\n"
											},
											"type": {
												"type": "reference",
												"name": "SelectorFn",
												"id": 66,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "IndexT"
													},
													{
														"type": "typeParameter",
														"name": "GroupT"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "ISeries",
										"id": 2287,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "number"
											},
											{
												"type": "reference",
												"name": "ISeries",
												"id": 2287,
												"typeArguments": [
													{
														"type": "intrinsic",
														"name": "number"
													},
													{
														"type": "typeParameter",
														"name": "IndexT"
													}
												]
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "ISeries.groupSequentialBy",
										"id": 2447
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/series.ts",
									"line": 583,
									"character": 21
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "ISeries.groupSequentialBy",
								"id": 2447
							}
						},
						{
							"id": 3763,
							"name": "head",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 3764,
									"name": "head",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Get X values from the start of the series.",
										"returns": "Returns a new series that has only the specified number of values taken from the start of the input sequence.\n"
									},
									"parameters": [
										{
											"id": 3765,
											"name": "numValues",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Number of values to take.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "ISeries",
										"id": 2287,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "number"
											},
											{
												"type": "typeParameter",
												"name": "IndexT"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "ISeries.head",
										"id": 2372
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/series.ts",
									"line": 346,
									"character": 8
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "ISeries.head",
								"id": 2372
							}
						},
						{
							"id": 3814,
							"name": "inflate",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 3815,
									"name": "inflate",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Inflate the series to a dataframe.",
										"returns": "Returns a new dataframe that has been created from the input series via the 'selector' function.\n"
									},
									"typeParameter": [
										{
											"id": 3816,
											"name": "ToT",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										}
									],
									"parameters": [
										{
											"id": 3817,
											"name": "selector",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "reference",
												"name": "SelectorWithIndexFn",
												"id": 3569,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "IndexT"
													},
													{
														"type": "typeParameter",
														"name": "ToT"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "IDataFrame",
										"id": 683,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "number"
											},
											{
												"type": "typeParameter",
												"name": "ToT"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "ISeries.inflate",
										"id": 2423
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/series.ts",
									"line": 514,
									"character": 11
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "ISeries.inflate",
								"id": 2423
							}
						},
						{
							"id": 3948,
							"name": "insertPair",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 3949,
									"name": "insertPair",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Insert a pair at the start of the series.",
										"returns": "Returns a new series with the specified pair inserted.\n"
									},
									"parameters": [
										{
											"id": 3950,
											"name": "pair",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The pair to insert.\n"
											},
											"type": {
												"type": "tuple",
												"elements": [
													{
														"type": "intrinsic",
														"name": "number"
													},
													{
														"type": "typeParameter",
														"name": "IndexT"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "ISeries",
										"id": 2287,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "number"
											},
											{
												"type": "typeParameter",
												"name": "IndexT"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "ISeries.insertPair",
										"id": 2557
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/series.ts",
									"line": 772,
									"character": 14
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "ISeries.insertPair",
								"id": 2557
							}
						},
						{
							"id": 3889,
							"name": "intersection",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 3890,
									"name": "intersection",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Returns the intersection of values between two series.",
										"returns": "Returns the intersection of two series.\n"
									},
									"typeParameter": [
										{
											"id": 3891,
											"name": "InnerIndexT",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										},
										{
											"id": 3892,
											"name": "InnerValueT",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										},
										{
											"id": 3893,
											"name": "KeyT",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										}
									],
									"parameters": [
										{
											"id": 3894,
											"name": "inner",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The other series to combine."
											},
											"type": {
												"type": "reference",
												"name": "ISeries",
												"id": 2287,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "InnerIndexT"
													},
													{
														"type": "typeParameter",
														"name": "InnerValueT"
													}
												]
											}
										},
										{
											"id": 3895,
											"name": "outerSelector",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "reference",
												"name": "SelectorFn",
												"id": 66,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "IndexT"
													},
													{
														"type": "typeParameter",
														"name": "KeyT"
													}
												]
											}
										},
										{
											"id": 3896,
											"name": "innerSelector",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "reference",
												"name": "SelectorFn",
												"id": 66,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "InnerValueT"
													},
													{
														"type": "typeParameter",
														"name": "KeyT"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "ISeries",
										"id": 2287,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "number"
											},
											{
												"type": "typeParameter",
												"name": "IndexT"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "ISeries.intersection",
										"id": 2498
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/series.ts",
									"line": 648,
									"character": 16
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "ISeries.intersection",
								"id": 2498
							}
						},
						{
							"id": 3905,
							"name": "join",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 3906,
									"name": "join",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Correlates the elements of two series on matching keys.",
										"returns": "Returns the joined series.\n"
									},
									"typeParameter": [
										{
											"id": 3907,
											"name": "KeyT",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										},
										{
											"id": 3908,
											"name": "InnerIndexT",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										},
										{
											"id": 3909,
											"name": "InnerValueT",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										},
										{
											"id": 3910,
											"name": "ResultValueT",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										}
									],
									"parameters": [
										{
											"id": 3911,
											"name": "inner",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The inner Series or DataFrame to join."
											},
											"type": {
												"type": "reference",
												"name": "ISeries",
												"id": 2287,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "InnerIndexT"
													},
													{
														"type": "typeParameter",
														"name": "InnerValueT"
													}
												]
											}
										},
										{
											"id": 3912,
											"name": "outerKeySelector",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Selector that chooses the join key from the outer sequence."
											},
											"type": {
												"type": "reference",
												"name": "SelectorFn",
												"id": 66,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "IndexT"
													},
													{
														"type": "typeParameter",
														"name": "KeyT"
													}
												]
											}
										},
										{
											"id": 3913,
											"name": "innerKeySelector",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Selector that chooses the join key from the inner sequence."
											},
											"type": {
												"type": "reference",
												"name": "SelectorFn",
												"id": 66,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "InnerValueT"
													},
													{
														"type": "typeParameter",
														"name": "KeyT"
													}
												]
											}
										},
										{
											"id": 3914,
											"name": "resultSelector",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Selector that defines how to merge outer and inner values.\n"
											},
											"type": {
												"type": "reference",
												"name": "JoinFn",
												"id": 3631,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "IndexT"
													},
													{
														"type": "typeParameter",
														"name": "InnerValueT"
													},
													{
														"type": "typeParameter",
														"name": "ResultValueT"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "ISeries",
										"id": 2287,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "number"
											},
											{
												"type": "typeParameter",
												"name": "ResultValueT"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "ISeries.join",
										"id": 2514
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/series.ts",
									"line": 680,
									"character": 8
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "ISeries.join",
								"id": 2514
							}
						},
						{
							"id": 3915,
							"name": "joinOuter",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 3916,
									"name": "joinOuter",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Performs an outer join on two series. Correlates the elements based on matching keys.\nIncludes elements from both series that have no correlation in the other series.",
										"returns": "Returns the joined series.\n"
									},
									"typeParameter": [
										{
											"id": 3917,
											"name": "KeyT",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										},
										{
											"id": 3918,
											"name": "InnerIndexT",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										},
										{
											"id": 3919,
											"name": "InnerValueT",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										},
										{
											"id": 3920,
											"name": "ResultValueT",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										}
									],
									"parameters": [
										{
											"id": 3921,
											"name": "inner",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The inner series to join."
											},
											"type": {
												"type": "reference",
												"name": "ISeries",
												"id": 2287,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "InnerIndexT"
													},
													{
														"type": "typeParameter",
														"name": "InnerValueT"
													}
												]
											}
										},
										{
											"id": 3922,
											"name": "outerKeySelector",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Selector that chooses the join key from the outer sequence."
											},
											"type": {
												"type": "reference",
												"name": "SelectorFn",
												"id": 66,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "IndexT"
													},
													{
														"type": "typeParameter",
														"name": "KeyT"
													}
												]
											}
										},
										{
											"id": 3923,
											"name": "innerKeySelector",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Selector that chooses the join key from the inner sequence."
											},
											"type": {
												"type": "reference",
												"name": "SelectorFn",
												"id": 66,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "InnerValueT"
													},
													{
														"type": "typeParameter",
														"name": "KeyT"
													}
												]
											}
										},
										{
											"id": 3924,
											"name": "resultSelector",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Selector that defines how to merge outer and inner values.\n\nImplementation from here:\n\n\thttp://blogs.geniuscode.net/RyanDHatch/?p=116\n"
											},
											"type": {
												"type": "reference",
												"name": "JoinFn",
												"id": 3631,
												"typeArguments": [
													{
														"type": "union",
														"types": [
															{
																"type": "typeParameter",
																"name": "IndexT"
															},
															{
																"type": "intrinsic",
																"name": "null"
															}
														]
													},
													{
														"type": "union",
														"types": [
															{
																"type": "typeParameter",
																"name": "InnerValueT"
															},
															{
																"type": "intrinsic",
																"name": "null"
															}
														]
													},
													{
														"type": "typeParameter",
														"name": "ResultValueT"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "ISeries",
										"id": 2287,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "number"
											},
											{
												"type": "typeParameter",
												"name": "ResultValueT"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "ISeries.joinOuter",
										"id": 2524
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/series.ts",
									"line": 703,
									"character": 13
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "ISeries.joinOuter",
								"id": 2524
							}
						},
						{
							"id": 3925,
							"name": "joinOuterLeft",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 3926,
									"name": "joinOuterLeft",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Performs a left outer join on two series. Correlates the elements based on matching keys.\nIncludes left elements that have no correlation.",
										"returns": "Returns the joined series or dataframe.\n"
									},
									"typeParameter": [
										{
											"id": 3927,
											"name": "KeyT",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										},
										{
											"id": 3928,
											"name": "InnerIndexT",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										},
										{
											"id": 3929,
											"name": "InnerValueT",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										},
										{
											"id": 3930,
											"name": "ResultValueT",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										}
									],
									"parameters": [
										{
											"id": 3931,
											"name": "inner",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The inner Series or DataFrame to join."
											},
											"type": {
												"type": "reference",
												"name": "ISeries",
												"id": 2287,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "InnerIndexT"
													},
													{
														"type": "typeParameter",
														"name": "InnerValueT"
													}
												]
											}
										},
										{
											"id": 3932,
											"name": "outerKeySelector",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Selector that chooses the join key from the outer sequence."
											},
											"type": {
												"type": "reference",
												"name": "SelectorFn",
												"id": 66,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "IndexT"
													},
													{
														"type": "typeParameter",
														"name": "KeyT"
													}
												]
											}
										},
										{
											"id": 3933,
											"name": "innerKeySelector",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Selector that chooses the join key from the inner sequence."
											},
											"type": {
												"type": "reference",
												"name": "SelectorFn",
												"id": 66,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "InnerValueT"
													},
													{
														"type": "typeParameter",
														"name": "KeyT"
													}
												]
											}
										},
										{
											"id": 3934,
											"name": "resultSelector",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Selector that defines how to merge outer and inner values.\n\nImplementation from here:\n\n\thttp://blogs.geniuscode.net/RyanDHatch/?p=116\n"
											},
											"type": {
												"type": "reference",
												"name": "JoinFn",
												"id": 3631,
												"typeArguments": [
													{
														"type": "union",
														"types": [
															{
																"type": "typeParameter",
																"name": "IndexT"
															},
															{
																"type": "intrinsic",
																"name": "null"
															}
														]
													},
													{
														"type": "union",
														"types": [
															{
																"type": "typeParameter",
																"name": "InnerValueT"
															},
															{
																"type": "intrinsic",
																"name": "null"
															}
														]
													},
													{
														"type": "typeParameter",
														"name": "ResultValueT"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "ISeries",
										"id": 2287,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "number"
											},
											{
												"type": "typeParameter",
												"name": "ResultValueT"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "ISeries.joinOuterLeft",
										"id": 2534
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/series.ts",
									"line": 726,
									"character": 17
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "ISeries.joinOuterLeft",
								"id": 2534
							}
						},
						{
							"id": 3935,
							"name": "joinOuterRight",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 3936,
									"name": "joinOuterRight",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Performs a right outer join on two series. Correlates the elements based on matching keys.\nIncludes right elements that have no correlation.",
										"returns": "Returns the joined series or dataframe.\n"
									},
									"typeParameter": [
										{
											"id": 3937,
											"name": "KeyT",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										},
										{
											"id": 3938,
											"name": "InnerIndexT",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										},
										{
											"id": 3939,
											"name": "InnerValueT",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										},
										{
											"id": 3940,
											"name": "ResultValueT",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										}
									],
									"parameters": [
										{
											"id": 3941,
											"name": "inner",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The inner Series or DataFrame to join."
											},
											"type": {
												"type": "reference",
												"name": "ISeries",
												"id": 2287,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "InnerIndexT"
													},
													{
														"type": "typeParameter",
														"name": "InnerValueT"
													}
												]
											}
										},
										{
											"id": 3942,
											"name": "outerKeySelector",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Selector that chooses the join key from the outer sequence."
											},
											"type": {
												"type": "reference",
												"name": "SelectorFn",
												"id": 66,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "IndexT"
													},
													{
														"type": "typeParameter",
														"name": "KeyT"
													}
												]
											}
										},
										{
											"id": 3943,
											"name": "innerKeySelector",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Selector that chooses the join key from the inner sequence."
											},
											"type": {
												"type": "reference",
												"name": "SelectorFn",
												"id": 66,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "InnerValueT"
													},
													{
														"type": "typeParameter",
														"name": "KeyT"
													}
												]
											}
										},
										{
											"id": 3944,
											"name": "resultSelector",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Selector that defines how to merge outer and inner values.\n\nImplementation from here:\n\n\thttp://blogs.geniuscode.net/RyanDHatch/?p=116\n"
											},
											"type": {
												"type": "reference",
												"name": "JoinFn",
												"id": 3631,
												"typeArguments": [
													{
														"type": "union",
														"types": [
															{
																"type": "typeParameter",
																"name": "IndexT"
															},
															{
																"type": "intrinsic",
																"name": "null"
															}
														]
													},
													{
														"type": "union",
														"types": [
															{
																"type": "typeParameter",
																"name": "InnerValueT"
															},
															{
																"type": "intrinsic",
																"name": "null"
															}
														]
													},
													{
														"type": "typeParameter",
														"name": "ResultValueT"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "ISeries",
										"id": 2287,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "number"
											},
											{
												"type": "typeParameter",
												"name": "ResultValueT"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "ISeries.joinOuterRight",
										"id": 2544
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/series.ts",
									"line": 749,
									"character": 18
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "ISeries.joinOuterRight",
								"id": 2544
							}
						},
						{
							"id": 3758,
							"name": "last",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 3759,
									"name": "last",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Get the last value of the series.",
										"returns": "Returns the last value of the series.\n"
									},
									"type": {
										"type": "typeParameter",
										"name": "IndexT"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "ISeries.last",
										"id": 2367
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/series.ts",
									"line": 328,
									"character": 8
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "ISeries.last",
								"id": 2367
							}
						},
						{
							"id": 3826,
							"name": "max",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 3827,
									"name": "max",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Get the max value in the series.",
										"returns": "Returns the maximum of the number values in the series.\n"
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "ISeries.max",
										"id": 2435
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/series.ts",
									"line": 549,
									"character": 7
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "ISeries.max",
								"id": 2435
							}
						},
						{
							"id": 3822,
							"name": "median",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 3823,
									"name": "median",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Get the median value in the series. Not this sorts the series, so can be expensive.",
										"returns": "Returns the median of the values in the series.\n"
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "ISeries.median",
										"id": 2431
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/series.ts",
									"line": 535,
									"character": 10
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "ISeries.median",
								"id": 2431
							}
						},
						{
							"id": 3824,
							"name": "min",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 3825,
									"name": "min",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Get the min value in the series.",
										"returns": "Returns the minimum of the number values in the series.\n"
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "ISeries.min",
										"id": 2433
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/series.ts",
									"line": 542,
									"character": 7
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "ISeries.min",
								"id": 2433
							}
						},
						{
							"id": 3781,
							"name": "none",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 3782,
									"name": "none",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Determine if the predicate returns truthy for none of the values in the series.\nReturns true for an empty series.\nReturns true if the predicate always returns falsy.\nOtherwise returns false.\nIf no predicate is specified the value itself is checked.",
										"returns": "Returns true if the predicate has returned truthy for no values in the series, otherwise returns false.\n"
									},
									"parameters": [
										{
											"id": 3783,
											"name": "predicate",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "reference",
												"name": "PredicateFn",
												"id": 4289,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "IndexT"
													}
												]
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "ISeries.none",
										"id": 2390
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/series.ts",
									"line": 412,
									"character": 8
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "ISeries.none",
								"id": 2390
							}
						},
						{
							"id": 3876,
							"name": "orderBy",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 3877,
									"name": "orderBy",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Sorts the series by a value defined by the selector (ascending).",
										"returns": "Returns a new ordered series that has been sorted by the value returned by the selector.\n"
									},
									"typeParameter": [
										{
											"id": 3878,
											"name": "SortT",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										}
									],
									"parameters": [
										{
											"id": 3879,
											"name": "selector",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Selects the value to sort by.\n"
											},
											"type": {
												"type": "reference",
												"name": "SelectorWithIndexFn",
												"id": 3569,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "IndexT"
													},
													{
														"type": "typeParameter",
														"name": "SortT"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "IOrderedSeries",
										"id": 2574,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "number"
											},
											{
												"type": "typeParameter",
												"name": "IndexT"
											},
											{
												"type": "typeParameter",
												"name": "SortT"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "ISeries.orderBy",
										"id": 2485
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/series.ts",
									"line": 615,
									"character": 11
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "ISeries.orderBy",
								"id": 2485
							}
						},
						{
							"id": 3880,
							"name": "orderByDescending",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 3881,
									"name": "orderByDescending",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Sorts the series by a value defined by the selector (descending).",
										"returns": "Returns a new ordered series that has been sorted by the value returned by the selector.\n"
									},
									"typeParameter": [
										{
											"id": 3882,
											"name": "SortT",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										}
									],
									"parameters": [
										{
											"id": 3883,
											"name": "selector",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Selects the value to sort by.\n"
											},
											"type": {
												"type": "reference",
												"name": "SelectorWithIndexFn",
												"id": 3569,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "IndexT"
													},
													{
														"type": "typeParameter",
														"name": "SortT"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "IOrderedSeries",
										"id": 2574,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "number"
											},
											{
												"type": "typeParameter",
												"name": "IndexT"
											},
											{
												"type": "typeParameter",
												"name": "SortT"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "ISeries.orderByDescending",
										"id": 2489
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/series.ts",
									"line": 624,
									"character": 21
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "ISeries.orderByDescending",
								"id": 2489
							}
						},
						{
							"id": 3806,
							"name": "parseDates",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 3807,
									"name": "parseDates",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Parse a series with string values to a series with date values.",
										"returns": "Returns a new series where string values from the original series have been parsed to Date values.\n"
									},
									"parameters": [
										{
											"id": 3808,
											"name": "formatString",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "undefined"
													},
													{
														"type": "intrinsic",
														"name": "string"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "ISeries",
										"id": 2287,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "number"
											},
											{
												"type": "reference",
												"name": "Date"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "ISeries.parseDates",
										"id": 2415
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/series.ts",
									"line": 489,
									"character": 14
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "ISeries.parseDates",
								"id": 2415
							}
						},
						{
							"id": 3804,
							"name": "parseFloats",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 3805,
									"name": "parseFloats",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Parse a series with string values to a series with float values.",
										"returns": "Returns a new series where string values from the original series have been parsed to floating-point values.\n"
									},
									"type": {
										"type": "reference",
										"name": "ISeries",
										"id": 2287,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "number"
											},
											{
												"type": "intrinsic",
												"name": "number"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "ISeries.parseFloats",
										"id": 2413
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/series.ts",
									"line": 480,
									"character": 15
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "ISeries.parseFloats",
								"id": 2413
							}
						},
						{
							"id": 3802,
							"name": "parseInts",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 3803,
									"name": "parseInts",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Parse a series with string values to a series with int values.",
										"returns": "Returns a new series where string values from the original series have been parsed to integer values.\n"
									},
									"type": {
										"type": "reference",
										"name": "ISeries",
										"id": 2287,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "number"
											},
											{
												"type": "intrinsic",
												"name": "number"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "ISeries.parseInts",
										"id": 2411
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/series.ts",
									"line": 473,
									"character": 13
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "ISeries.parseInts",
								"id": 2411
							}
						},
						{
							"id": 3734,
							"name": "percentChange",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 3735,
									"name": "percentChange",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Compute the percent change between each pair of values.\nPercentages are expressed as 0-1 values.",
										"returns": "Returns a new series where each value indicates the percent change from the previous number value in the original series.\n"
									},
									"type": {
										"type": "reference",
										"name": "ISeries",
										"id": 2287,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "number"
											},
											{
												"type": "intrinsic",
												"name": "number"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "ISeries.percentChange",
										"id": 2343
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/series.ts",
									"line": 254,
									"character": 17
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "ISeries.percentChange",
								"id": 2343
							}
						},
						{
							"id": 3689,
							"name": "resetIndex",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 3690,
									"name": "resetIndex",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Resets the index of the series back to the default zero-based sequential integer index.",
										"returns": "Returns a new series with the index reset to the default zero-based index.\n"
									},
									"type": {
										"type": "reference",
										"name": "ISeries",
										"id": 2287,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "number"
											},
											{
												"type": "typeParameter",
												"name": "IndexT"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "ISeries.resetIndex",
										"id": 2298
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/series.ts",
									"line": 155,
									"character": 14
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "ISeries.resetIndex",
								"id": 2298
							}
						},
						{
							"id": 3828,
							"name": "reverse",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 3829,
									"name": "reverse",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Reverse the series.",
										"returns": "Returns a new series that is the reverse of the input.\n"
									},
									"type": {
										"type": "reference",
										"name": "ISeries",
										"id": 2287,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "number"
											},
											{
												"type": "typeParameter",
												"name": "IndexT"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "ISeries.reverse",
										"id": 2437
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/series.ts",
									"line": 556,
									"character": 11
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "ISeries.reverse",
								"id": 2437
							}
						},
						{
							"id": 3719,
							"name": "rollingWindow",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 3720,
									"name": "rollingWindow",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Segment a Series into 'rolling windows'. Returns a new Series. Each value in the new Series contains a 'window' (or segment) of the original series.",
										"returns": "Returns a new series, each value of which is a 'window' (or segment) of the original series.\n"
									},
									"parameters": [
										{
											"id": 3721,
											"name": "period",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The number of values in the window.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "ISeries",
										"id": 2287,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "number"
											},
											{
												"type": "reference",
												"name": "ISeries",
												"id": 2287,
												"typeArguments": [
													{
														"type": "intrinsic",
														"name": "number"
													},
													{
														"type": "typeParameter",
														"name": "IndexT"
													}
												]
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "ISeries.rollingWindow",
										"id": 2328
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/series.ts",
									"line": 218,
									"character": 17
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "ISeries.rollingWindow",
								"id": 2328
							}
						},
						{
							"id": 3708,
							"name": "select",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 3709,
									"name": "select",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Generate a new series based by calling the selector function on each value.",
										"returns": "Returns a new series that has been transformed by the selector function.\n"
									},
									"typeParameter": [
										{
											"id": 3710,
											"name": "ToT",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										}
									],
									"parameters": [
										{
											"id": 3711,
											"name": "selector",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Selector function that transforms each value to create a new series or dataframe.\n"
											},
											"type": {
												"type": "reference",
												"name": "SelectorWithIndexFn",
												"id": 3569,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "IndexT"
													},
													{
														"type": "typeParameter",
														"name": "ToT"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "ISeries",
										"id": 2287,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "number"
											},
											{
												"type": "typeParameter",
												"name": "ToT"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "ISeries.select",
										"id": 2317
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/series.ts",
									"line": 190,
									"character": 10
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "ISeries.select",
								"id": 2317
							}
						},
						{
							"id": 3712,
							"name": "selectMany",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 3713,
									"name": "selectMany",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Generate a new series based on the results of the selector function.",
										"returns": "Returns a new series with values that have been produced by the selector function.\n"
									},
									"typeParameter": [
										{
											"id": 3714,
											"name": "ToT",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										}
									],
									"parameters": [
										{
											"id": 3715,
											"name": "selector",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Selector function that transforms each value into a list of values.\n"
											},
											"type": {
												"type": "reference",
												"name": "SelectorWithIndexFn",
												"id": 3569,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "IndexT"
													},
													{
														"type": "reference",
														"name": "Iterable",
														"typeArguments": [
															{
																"type": "typeParameter",
																"name": "ToT"
															}
														]
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "ISeries",
										"id": 2287,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "number"
											},
											{
												"type": "typeParameter",
												"name": "ToT"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "ISeries.selectMany",
										"id": 2321
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/series.ts",
									"line": 199,
									"character": 14
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "ISeries.selectMany",
								"id": 2321
							}
						},
						{
							"id": 3725,
							"name": "sequentialDistinct",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 3726,
									"name": "sequentialDistinct",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Group sequential duplicate values into a Series of windows.",
										"returns": "Returns a series of groups. Each group is itself a series.\n"
									},
									"typeParameter": [
										{
											"id": 3727,
											"name": "ToT",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										}
									],
									"parameters": [
										{
											"id": 3728,
											"name": "selector",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Selects the value used to compare for duplicates.\n"
											},
											"type": {
												"type": "reference",
												"name": "SelectorFn",
												"id": 66,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "IndexT"
													},
													{
														"type": "typeParameter",
														"name": "ToT"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "ISeries",
										"id": 2287,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "number"
											},
											{
												"type": "typeParameter",
												"name": "IndexT"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "ISeries.sequentialDistinct",
										"id": 2334
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/series.ts",
									"line": 236,
									"character": 22
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "ISeries.sequentialDistinct",
								"id": 2334
							}
						},
						{
							"id": 3736,
							"name": "skip",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 3737,
									"name": "skip",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Skip a number of values in the series.",
										"returns": "Returns a new series with the specified number of values skipped.\n"
									},
									"parameters": [
										{
											"id": 3738,
											"name": "numValues",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Number of values to skip."
											},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "ISeries",
										"id": 2287,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "number"
											},
											{
												"type": "typeParameter",
												"name": "IndexT"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "ISeries.skip",
										"id": 2345
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/series.ts",
									"line": 262,
									"character": 8
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "ISeries.skip",
								"id": 2345
							}
						},
						{
							"id": 3742,
							"name": "skipUntil",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 3743,
									"name": "skipUntil",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Skips values in the series until a condition is met.",
										"returns": "Returns a new series with all initial sequential values removed that don't match the predicate.\n"
									},
									"parameters": [
										{
											"id": 3744,
											"name": "predicate",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Return true to indicate the condition met.\n"
											},
											"type": {
												"type": "reference",
												"name": "PredicateFn",
												"id": 4289,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "IndexT"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "ISeries",
										"id": 2287,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "number"
											},
											{
												"type": "typeParameter",
												"name": "IndexT"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "ISeries.skipUntil",
										"id": 2351
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/series.ts",
									"line": 280,
									"character": 13
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "ISeries.skipUntil",
								"id": 2351
							}
						},
						{
							"id": 3739,
							"name": "skipWhile",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 3740,
									"name": "skipWhile",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Skips values in the series while a condition is met.",
										"returns": "Returns a new series with all initial sequential values removed that match the predicate.\n"
									},
									"parameters": [
										{
											"id": 3741,
											"name": "predicate",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Return true to indicate the condition met.\n"
											},
											"type": {
												"type": "reference",
												"name": "PredicateFn",
												"id": 4289,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "IndexT"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "ISeries",
										"id": 2287,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "number"
											},
											{
												"type": "typeParameter",
												"name": "IndexT"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "ISeries.skipWhile",
										"id": 2348
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/series.ts",
									"line": 271,
									"character": 13
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "ISeries.skipWhile",
								"id": 2348
							}
						},
						{
							"id": 3784,
							"name": "startAt",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 3785,
									"name": "startAt",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Get a new series containing all values starting at and after the specified index value.",
										"returns": "Returns a new series containing all values starting at and after the specified index value.\n"
									},
									"parameters": [
										{
											"id": 3786,
											"name": "indexValue",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The index value to search for before starting the new series.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "ISeries",
										"id": 2287,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "number"
											},
											{
												"type": "typeParameter",
												"name": "IndexT"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "ISeries.startAt",
										"id": 2393
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/series.ts",
									"line": 421,
									"character": 11
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "ISeries.startAt",
								"id": 2393
							}
						},
						{
							"id": 3818,
							"name": "sum",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 3819,
									"name": "sum",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Sum the values in a series.",
										"returns": "Returns the sum of the number values in the series.\n"
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "ISeries.sum",
										"id": 2427
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/series.ts",
									"line": 521,
									"character": 7
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "ISeries.sum",
								"id": 2427
							}
						},
						{
							"id": 3766,
							"name": "tail",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 3767,
									"name": "tail",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Get X values from the end of the series.",
										"returns": "Returns a new series that has only the specified number of values taken from the end of the input sequence.\n"
									},
									"parameters": [
										{
											"id": 3768,
											"name": "numValues",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Number of values to take.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "ISeries",
										"id": 2287,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "number"
											},
											{
												"type": "typeParameter",
												"name": "IndexT"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "ISeries.tail",
										"id": 2375
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/series.ts",
									"line": 355,
									"character": 8
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "ISeries.tail",
								"id": 2375
							}
						},
						{
							"id": 3745,
							"name": "take",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 3746,
									"name": "take",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Take a number of rows in the series.",
										"returns": "Returns a new series with up to the specified number of values included.\n"
									},
									"parameters": [
										{
											"id": 3747,
											"name": "numRows",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Number of rows to take.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "ISeries",
										"id": 2287,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "number"
											},
											{
												"type": "typeParameter",
												"name": "IndexT"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "ISeries.take",
										"id": 2354
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/series.ts",
									"line": 289,
									"character": 8
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "ISeries.take",
								"id": 2354
							}
						},
						{
							"id": 3751,
							"name": "takeUntil",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 3752,
									"name": "takeUntil",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Take values from the series until a condition is met.",
										"returns": "Returns a new series or dataframe that only includes the initial sequential values that have not matched the predicate.\n"
									},
									"parameters": [
										{
											"id": 3753,
											"name": "predicate",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Return true to indicate the condition met.\n"
											},
											"type": {
												"type": "reference",
												"name": "PredicateFn",
												"id": 4289,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "IndexT"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "ISeries",
										"id": 2287,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "number"
											},
											{
												"type": "typeParameter",
												"name": "IndexT"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "ISeries.takeUntil",
										"id": 2360
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/series.ts",
									"line": 307,
									"character": 13
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "ISeries.takeUntil",
								"id": 2360
							}
						},
						{
							"id": 3748,
							"name": "takeWhile",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 3749,
									"name": "takeWhile",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Take values from the series while a condition is met.",
										"returns": "Returns a new series that only includes the initial sequential values that have matched the predicate.\n"
									},
									"parameters": [
										{
											"id": 3750,
											"name": "predicate",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Return true to indicate the condition met.\n"
											},
											"type": {
												"type": "reference",
												"name": "PredicateFn",
												"id": 4289,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "IndexT"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "ISeries",
										"id": 2287,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "number"
											},
											{
												"type": "typeParameter",
												"name": "IndexT"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "ISeries.takeWhile",
										"id": 2357
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/series.ts",
									"line": 298,
									"character": 13
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "ISeries.takeWhile",
								"id": 2357
							}
						},
						{
							"id": 3691,
							"name": "toArray",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 3692,
									"name": "toArray",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Extract values from the series as an array.\nThis forces lazy evaluation to complete.",
										"returns": "Returns an array of values contained within the series.\n"
									},
									"type": {
										"type": "array",
										"elementType": {
											"type": "typeParameter",
											"name": "IndexT"
										}
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "ISeries.toArray",
										"id": 2300
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/series.ts",
									"line": 163,
									"character": 11
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "ISeries.toArray",
								"id": 2300
							}
						},
						{
							"id": 3695,
							"name": "toObject",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 3696,
									"name": "toObject",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Convert the series to a JavaScript object.",
										"returns": "Returns a JavaScript object generated from the input sequence by the key and value selector funtions.\n"
									},
									"typeParameter": [
										{
											"id": 3697,
											"name": "KeyT",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										},
										{
											"id": 3698,
											"name": "FieldT",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										},
										{
											"id": 3699,
											"name": "OutT",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										}
									],
									"parameters": [
										{
											"id": 3700,
											"name": "keySelector",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Function that selects keys for the resulting object."
											},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 3701,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"signatures": [
														{
															"id": 3702,
															"name": "__call",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {},
															"parameters": [
																{
																	"id": 3703,
																	"name": "value",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {},
																	"type": {
																		"type": "typeParameter",
																		"name": "IndexT"
																	}
																}
															],
															"type": {
																"type": "typeParameter",
																"name": "KeyT"
															}
														}
													],
													"sources": [
														{
															"fileName": "lib/series.ts",
															"line": 181,
															"character": 64
														}
													]
												}
											}
										},
										{
											"id": 3704,
											"name": "valueSelector",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Function that selects values for the resulting object.\n"
											},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 3705,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"signatures": [
														{
															"id": 3706,
															"name": "__call",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {},
															"parameters": [
																{
																	"id": 3707,
																	"name": "value",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {},
																	"type": {
																		"type": "typeParameter",
																		"name": "IndexT"
																	}
																}
															],
															"type": {
																"type": "typeParameter",
																"name": "FieldT"
															}
														}
													],
													"sources": [
														{
															"fileName": "lib/series.ts",
															"line": 181,
															"character": 104
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "typeParameter",
										"name": "OutT"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "ISeries.toObject",
										"id": 2304
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/series.ts",
									"line": 181,
									"character": 12
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "ISeries.toObject",
								"id": 2304
							}
						},
						{
							"id": 3693,
							"name": "toPairs",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 3694,
									"name": "toPairs",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Retreive the index and values from the Series as an array of pairs.\nEach pairs is [index, value].",
										"returns": "Returns an array of pairs that contains the series content. Each pair is a two element array that contains an index and a value.\n"
									},
									"type": {
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "Object"
										}
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "ISeries.toPairs",
										"id": 2302
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/series.ts",
									"line": 171,
									"character": 11
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "ISeries.toPairs",
								"id": 2302
							}
						},
						{
							"id": 3800,
							"name": "toString",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 3801,
									"name": "toString",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Format the series for display as a string.\nThis forces lazy evaluation to complete.",
										"returns": "Generates and returns a string representation of the series or dataframe.\n"
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "ISeries.toString",
										"id": 2409
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/series.ts",
									"line": 466,
									"character": 12
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "ISeries.toString",
								"id": 2409
							}
						},
						{
							"id": 3809,
							"name": "toStrings",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 3810,
									"name": "toStrings",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Convert a series of values of different types to a series of string values.",
										"returns": "Returns a new series where the values from the original series have been stringified.\n"
									},
									"parameters": [
										{
											"id": 3811,
											"name": "formatString",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "undefined"
													},
													{
														"type": "intrinsic",
														"name": "string"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "ISeries",
										"id": 2287,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "number"
											},
											{
												"type": "intrinsic",
												"name": "string"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "ISeries.toStrings",
										"id": 2418
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/series.ts",
									"line": 498,
									"character": 13
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "ISeries.toStrings",
								"id": 2418
							}
						},
						{
							"id": 3945,
							"name": "truncateStrings",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 3946,
									"name": "truncateStrings",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Produces a new series with all string values truncated to the requested maximum length.",
										"returns": "Returns a new series with strings that are truncated to the specified maximum length.\n"
									},
									"parameters": [
										{
											"id": 3947,
											"name": "maxLength",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The maximum length of the string values after truncation.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "ISeries",
										"id": 2287,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "number"
											},
											{
												"type": "typeParameter",
												"name": "IndexT"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "ISeries.truncateStrings",
										"id": 2554
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/series.ts",
									"line": 763,
									"character": 19
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "ISeries.truncateStrings",
								"id": 2554
							}
						},
						{
							"id": 3884,
							"name": "union",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 3885,
									"name": "union",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Returns the unique union of values between two series.",
										"returns": "Returns the union of two series.\n"
									},
									"typeParameter": [
										{
											"id": 3886,
											"name": "KeyT",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										}
									],
									"parameters": [
										{
											"id": 3887,
											"name": "other",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The other Series or DataFrame to combine."
											},
											"type": {
												"type": "reference",
												"name": "ISeries",
												"id": 2287,
												"typeArguments": [
													{
														"type": "intrinsic",
														"name": "number"
													},
													{
														"type": "typeParameter",
														"name": "IndexT"
													}
												]
											}
										},
										{
											"id": 3888,
											"name": "selector",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "reference",
												"name": "SelectorFn",
												"id": 66,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "IndexT"
													},
													{
														"type": "typeParameter",
														"name": "KeyT"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "ISeries",
										"id": 2287,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "number"
											},
											{
												"type": "typeParameter",
												"name": "IndexT"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "ISeries.union",
										"id": 2493
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/series.ts",
									"line": 634,
									"character": 9
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "ISeries.union",
								"id": 2493
							}
						},
						{
							"id": 3722,
							"name": "variableWindow",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 3723,
									"name": "variableWindow",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Groups sequential values into variable length 'windows'.",
										"returns": "Returns a series of groups. Each group is itself a series that contains the values in the 'window'.\n"
									},
									"parameters": [
										{
											"id": 3724,
											"name": "comparer",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Predicate that compares two values and returns true if they should be in the same window.\n"
											},
											"type": {
												"type": "reference",
												"name": "ComparerFn",
												"id": 371,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "IndexT"
													},
													{
														"type": "typeParameter",
														"name": "IndexT"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "ISeries",
										"id": 2287,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "number"
											},
											{
												"type": "reference",
												"name": "ISeries",
												"id": 2287,
												"typeArguments": [
													{
														"type": "intrinsic",
														"name": "number"
													},
													{
														"type": "typeParameter",
														"name": "IndexT"
													}
												]
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "ISeries.variableWindow",
										"id": 2331
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/series.ts",
									"line": 227,
									"character": 18
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "ISeries.variableWindow",
								"id": 2331
							}
						},
						{
							"id": 3769,
							"name": "where",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 3770,
									"name": "where",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Filter a series by a predicate selector.",
										"returns": "Returns a new series containing only the values that match the predicate.\n"
									},
									"parameters": [
										{
											"id": 3771,
											"name": "predicate",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Predicte function to filter rows of the series.\n"
											},
											"type": {
												"type": "reference",
												"name": "PredicateFn",
												"id": 4289,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "IndexT"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "ISeries",
										"id": 2287,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "number"
											},
											{
												"type": "typeParameter",
												"name": "IndexT"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "ISeries.where",
										"id": 2378
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/series.ts",
									"line": 364,
									"character": 9
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "ISeries.where",
								"id": 2378
							}
						},
						{
							"id": 3716,
							"name": "window",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 3717,
									"name": "window",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Segment a Series into 'windows'. Returns a new Series. Each value in the new Series contains a 'window' (or segment) of the original series.\nUse select or selectPairs to aggregate.",
										"returns": "Returns a new series, each value of which is a 'window' (or segment) of the original series.\n"
									},
									"parameters": [
										{
											"id": 3718,
											"name": "period",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The number of values in the window.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "ISeries",
										"id": 2287,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "number"
											},
											{
												"type": "reference",
												"name": "ISeries",
												"id": 2287,
												"typeArguments": [
													{
														"type": "intrinsic",
														"name": "number"
													},
													{
														"type": "typeParameter",
														"name": "IndexT"
													}
												]
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "ISeries.window",
										"id": 2325
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/series.ts",
									"line": 209,
									"character": 10
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "ISeries.window",
								"id": 2325
							}
						},
						{
							"id": 3685,
							"name": "withIndex",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 3686,
									"name": "withIndex",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Apply a new index to the series.",
										"returns": "Returns a new series with the specified index attached.\n"
									},
									"typeParameter": [
										{
											"id": 3687,
											"name": "NewIndexT",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										}
									],
									"parameters": [
										{
											"id": 3688,
											"name": "newIndex",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The new array or iterable to apply to the dataframe. Can also be a selector to choose the index for each row in the dataframe.\n"
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "reference",
														"name": "Iterable",
														"typeArguments": [
															{
																"type": "typeParameter",
																"name": "NewIndexT"
															}
														]
													},
													{
														"type": "reference",
														"name": "SelectorFn",
														"id": 66,
														"typeArguments": [
															{
																"type": "typeParameter",
																"name": "IndexT"
															},
															{
																"type": "typeParameter",
																"name": "NewIndexT"
															}
														]
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "ISeries",
										"id": 2287,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "NewIndexT"
											},
											{
												"type": "typeParameter",
												"name": "IndexT"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "ISeries.withIndex",
										"id": 2294
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/series.ts",
									"line": 148,
									"character": 13
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "ISeries.withIndex",
								"id": 2294
							}
						},
						{
							"id": 3845,
							"name": "zip",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 3846,
									"name": "zip",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Zip together multiple series to create a new series.\nPreserves the index of the first series.",
										"returns": "Returns a single series concatenated from multiple input series.\n"
									},
									"typeParameter": [
										{
											"id": 3847,
											"name": "Index2T",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										},
										{
											"id": 3848,
											"name": "Value2T",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										},
										{
											"id": 3849,
											"name": "ResultT",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										}
									],
									"parameters": [
										{
											"id": 3850,
											"name": "s2",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "ISeries",
												"id": 2287,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "Index2T"
													},
													{
														"type": "typeParameter",
														"name": "Value2T"
													}
												]
											}
										},
										{
											"id": 3851,
											"name": "zipper",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Zipper function that produces a new series based on the input series.\n"
											},
											"type": {
												"type": "reference",
												"name": "Zip2Fn",
												"id": 3582,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "IndexT"
													},
													{
														"type": "typeParameter",
														"name": "Value2T"
													},
													{
														"type": "typeParameter",
														"name": "ResultT"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "ISeries",
										"id": 2287,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "number"
											},
											{
												"type": "typeParameter",
												"name": "ResultT"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "ISeries.zip",
										"id": 2454
									}
								},
								{
									"id": 3852,
									"name": "zip",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"typeParameter": [
										{
											"id": 3853,
											"name": "Index2T",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										},
										{
											"id": 3854,
											"name": "Value2T",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										},
										{
											"id": 3855,
											"name": "Index3T",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										},
										{
											"id": 3856,
											"name": "Value3T",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										},
										{
											"id": 3857,
											"name": "ResultT",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										}
									],
									"parameters": [
										{
											"id": 3858,
											"name": "s2",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "ISeries",
												"id": 2287,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "Index2T"
													},
													{
														"type": "typeParameter",
														"name": "Value2T"
													}
												]
											}
										},
										{
											"id": 3859,
											"name": "s3",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "ISeries",
												"id": 2287,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "Index3T"
													},
													{
														"type": "typeParameter",
														"name": "Value3T"
													}
												]
											}
										},
										{
											"id": 3860,
											"name": "zipper",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Zip3Fn",
												"id": 3590,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "IndexT"
													},
													{
														"type": "typeParameter",
														"name": "Value2T"
													},
													{
														"type": "typeParameter",
														"name": "Value3T"
													},
													{
														"type": "typeParameter",
														"name": "ResultT"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "ISeries",
										"id": 2287,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "number"
											},
											{
												"type": "typeParameter",
												"name": "ResultT"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "ISeries.zip",
										"id": 2454
									}
								},
								{
									"id": 3861,
									"name": "zip",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"typeParameter": [
										{
											"id": 3862,
											"name": "Index2T",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										},
										{
											"id": 3863,
											"name": "Value2T",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										},
										{
											"id": 3864,
											"name": "Index3T",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										},
										{
											"id": 3865,
											"name": "Value3T",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										},
										{
											"id": 3866,
											"name": "Index4T",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										},
										{
											"id": 3867,
											"name": "Value4T",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										},
										{
											"id": 3868,
											"name": "ResultT",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										}
									],
									"parameters": [
										{
											"id": 3869,
											"name": "s2",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "ISeries",
												"id": 2287,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "Index2T"
													},
													{
														"type": "typeParameter",
														"name": "Value2T"
													}
												]
											}
										},
										{
											"id": 3870,
											"name": "s3",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "ISeries",
												"id": 2287,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "Index3T"
													},
													{
														"type": "typeParameter",
														"name": "Value3T"
													}
												]
											}
										},
										{
											"id": 3871,
											"name": "s4",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "ISeries",
												"id": 2287,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "Index4T"
													},
													{
														"type": "typeParameter",
														"name": "Value4T"
													}
												]
											}
										},
										{
											"id": 3872,
											"name": "zipper",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Zip3Fn",
												"id": 3590,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "IndexT"
													},
													{
														"type": "typeParameter",
														"name": "Value2T"
													},
													{
														"type": "typeParameter",
														"name": "Value3T"
													},
													{
														"type": "typeParameter",
														"name": "ResultT"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "ISeries",
										"id": 2287,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "number"
											},
											{
												"type": "typeParameter",
												"name": "ResultT"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "ISeries.zip",
										"id": 2454
									}
								},
								{
									"id": 3873,
									"name": "zip",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"typeParameter": [
										{
											"id": 3874,
											"name": "ResultT",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										}
									],
									"parameters": [
										{
											"id": 3875,
											"name": "args",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isRest": true
											},
											"type": {
												"type": "array",
												"elementType": {
													"type": "intrinsic",
													"name": "any"
												}
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "ISeries",
										"id": 2287,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "number"
											},
											{
												"type": "typeParameter",
												"name": "ResultT"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "ISeries.zip",
										"id": 2454
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/series.ts",
									"line": 603,
									"character": 6
								},
								{
									"fileName": "lib/series.ts",
									"line": 604,
									"character": 6
								},
								{
									"fileName": "lib/series.ts",
									"line": 605,
									"character": 6
								},
								{
									"fileName": "lib/series.ts",
									"line": 606,
									"character": 6
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "ISeries.zip",
								"id": 2454
							}
						}
					],
					"groups": [
						{
							"title": "Methods",
							"kind": 2048,
							"children": [
								3681,
								3793,
								3729,
								3775,
								3778,
								3951,
								3760,
								3820,
								3812,
								3790,
								3796,
								3842,
								3754,
								3958,
								3961,
								3963,
								3830,
								3787,
								3897,
								3954,
								3756,
								3772,
								3679,
								3683,
								3675,
								3677,
								3673,
								3834,
								3838,
								3763,
								3814,
								3948,
								3889,
								3905,
								3915,
								3925,
								3935,
								3758,
								3826,
								3822,
								3824,
								3781,
								3876,
								3880,
								3806,
								3804,
								3802,
								3734,
								3689,
								3828,
								3719,
								3708,
								3712,
								3725,
								3736,
								3742,
								3739,
								3784,
								3818,
								3766,
								3745,
								3751,
								3748,
								3691,
								3695,
								3693,
								3800,
								3809,
								3945,
								3884,
								3722,
								3769,
								3716,
								3685,
								3845
							]
						}
					],
					"sources": [
						{
							"fileName": "lib/index.ts",
							"line": 13,
							"character": 23
						}
					],
					"extendedTypes": [
						{
							"type": "reference",
							"name": "ISeries",
							"id": 2287,
							"typeArguments": [
								{
									"type": "intrinsic",
									"name": "number"
								},
								{
									"type": "typeParameter",
									"name": "IndexT"
								}
							]
						}
					],
					"implementedBy": [
						{
							"type": "reference",
							"name": "Index",
							"id": 3965
						}
					]
				},
				{
					"id": 4289,
					"name": "PredicateFn",
					"kind": 4194304,
					"kindString": "Type alias",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "A predicate function for testing a value against another."
					},
					"sources": [
						{
							"fileName": "lib/index.ts",
							"line": 8,
							"character": 23
						}
					],
					"type": {
						"type": "reflection",
						"declaration": {
							"id": 4290,
							"name": "__type",
							"kind": 65536,
							"kindString": "Type literal",
							"flags": {},
							"signatures": [
								{
									"id": 4291,
									"name": "__call",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 4292,
											"name": "value",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "any"
											}
										},
										{
											"id": 4293,
											"name": "against",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "any"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/index.ts",
									"line": 8,
									"character": 25
								}
							]
						}
					}
				}
			],
			"groups": [
				{
					"title": "Classes",
					"kind": 128,
					"children": [
						3965
					]
				},
				{
					"title": "Interfaces",
					"kind": 256,
					"children": [
						3671
					]
				},
				{
					"title": "Type aliases",
					"kind": 4194304,
					"children": [
						4289
					]
				}
			],
			"sources": [
				{
					"fileName": "lib/index.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 11,
			"name": "\"lib/iterables/array-iterable\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "C:/projects/github/data-forge/data-forge-ts/src/lib/iterables/array-iterable.ts",
			"children": [
				{
					"id": 12,
					"name": "ArrayIterable",
					"kind": 128,
					"kindString": "Class",
					"flags": {
						"isExported": true
					},
					"typeParameter": [
						{
							"id": 13,
							"name": "T",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {}
						}
					],
					"children": [
						{
							"id": 15,
							"name": "constructor",
							"kind": 512,
							"kindString": "Constructor",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 16,
									"name": "new ArrayIterable",
									"kind": 16384,
									"kindString": "Constructor signature",
									"flags": {},
									"parameters": [
										{
											"id": 17,
											"name": "arr",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "array",
												"elementType": {
													"type": "typeParameter",
													"name": "T"
												}
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "ArrayIterable",
										"id": 12
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/iterables/array-iterable.ts",
									"line": 9,
									"character": 13
								}
							]
						},
						{
							"id": 14,
							"name": "arr",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "lib/iterables/array-iterable.ts",
									"line": 9,
									"character": 7
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "typeParameter",
									"name": "T"
								}
							}
						},
						{
							"id": 18,
							"name": "__@iterator",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 19,
									"name": "__@iterator",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Iterator",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "any"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/iterables/array-iterable.ts",
									"line": 15,
									"character": 21
								}
							]
						}
					],
					"groups": [
						{
							"title": "Constructors",
							"kind": 512,
							"children": [
								15
							]
						},
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								14
							]
						},
						{
							"title": "Methods",
							"kind": 2048,
							"children": [
								18
							]
						}
					],
					"sources": [
						{
							"fileName": "lib/iterables/array-iterable.ts",
							"line": 7,
							"character": 26
						}
					],
					"implementedTypes": [
						{
							"type": "reference",
							"name": "Iterable",
							"typeArguments": [
								{
									"type": "typeParameter",
									"name": "T"
								}
							]
						}
					]
				}
			],
			"groups": [
				{
					"title": "Classes",
					"kind": 128,
					"children": [
						12
					]
				}
			],
			"sources": [
				{
					"fileName": "lib/iterables/array-iterable.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 599,
			"name": "\"lib/iterables/column-names-iterable\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "C:/projects/github/data-forge/data-forge-ts/src/lib/iterables/column-names-iterable.ts",
			"children": [
				{
					"id": 600,
					"name": "ColumnNamesIterable",
					"kind": 128,
					"kindString": "Class",
					"flags": {
						"isExported": true
					},
					"children": [
						{
							"id": 603,
							"name": "constructor",
							"kind": 512,
							"kindString": "Constructor",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 604,
									"name": "new ColumnNamesIterable",
									"kind": 16384,
									"kindString": "Constructor signature",
									"flags": {},
									"parameters": [
										{
											"id": 605,
											"name": "values",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Iterable",
												"typeArguments": [
													{
														"type": "intrinsic",
														"name": "any"
													}
												]
											}
										},
										{
											"id": 606,
											"name": "considerAllRows",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "boolean"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "ColumnNamesIterable",
										"id": 600
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/iterables/column-names-iterable.ts",
									"line": 10,
									"character": 29
								}
							]
						},
						{
							"id": 602,
							"name": "considerAllRows",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "lib/iterables/column-names-iterable.ts",
									"line": 10,
									"character": 19
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						},
						{
							"id": 601,
							"name": "values",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "lib/iterables/column-names-iterable.ts",
									"line": 9,
									"character": 10
								}
							],
							"type": {
								"type": "reference",
								"name": "Iterable",
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "any"
									}
								]
							}
						},
						{
							"id": 607,
							"name": "__@iterator",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 608,
									"name": "__@iterator",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Iterator",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/iterables/column-names-iterable.ts",
									"line": 17,
									"character": 21
								}
							]
						}
					],
					"groups": [
						{
							"title": "Constructors",
							"kind": 512,
							"children": [
								603
							]
						},
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								602,
								601
							]
						},
						{
							"title": "Methods",
							"kind": 2048,
							"children": [
								607
							]
						}
					],
					"sources": [
						{
							"fileName": "lib/iterables/column-names-iterable.ts",
							"line": 7,
							"character": 32
						}
					],
					"implementedTypes": [
						{
							"type": "reference",
							"name": "Iterable",
							"typeArguments": [
								{
									"type": "intrinsic",
									"name": "string"
								}
							]
						}
					]
				}
			],
			"groups": [
				{
					"title": "Classes",
					"kind": 128,
					"children": [
						600
					]
				}
			],
			"sources": [
				{
					"fileName": "lib/iterables/column-names-iterable.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 208,
			"name": "\"lib/iterables/concat-iterable\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "C:/projects/github/data-forge/data-forge-ts/src/lib/iterables/concat-iterable.ts",
			"children": [
				{
					"id": 209,
					"name": "ConcatIterable",
					"kind": 128,
					"kindString": "Class",
					"flags": {
						"isExported": true
					},
					"typeParameter": [
						{
							"id": 210,
							"name": "T",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {}
						}
					],
					"children": [
						{
							"id": 212,
							"name": "constructor",
							"kind": 512,
							"kindString": "Constructor",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 213,
									"name": "new ConcatIterable",
									"kind": 16384,
									"kindString": "Constructor signature",
									"flags": {},
									"parameters": [
										{
											"id": 214,
											"name": "iterables",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Iterable",
												"typeArguments": [
													{
														"type": "reference",
														"name": "Iterable",
														"typeArguments": [
															{
																"type": "typeParameter",
																"name": "T"
															}
														]
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "ConcatIterable",
										"id": 209
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/iterables/concat-iterable.ts",
									"line": 9,
									"character": 37
								}
							]
						},
						{
							"id": 211,
							"name": "iterables",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "lib/iterables/concat-iterable.ts",
									"line": 9,
									"character": 13
								}
							],
							"type": {
								"type": "reference",
								"name": "Iterable",
								"typeArguments": [
									{
										"type": "reference",
										"name": "Iterable",
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "T"
											}
										]
									}
								]
							}
						},
						{
							"id": 215,
							"name": "__@iterator",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 216,
									"name": "__@iterator",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Iterator",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "any"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/iterables/concat-iterable.ts",
									"line": 15,
									"character": 21
								}
							]
						}
					],
					"groups": [
						{
							"title": "Constructors",
							"kind": 512,
							"children": [
								212
							]
						},
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								211
							]
						},
						{
							"title": "Methods",
							"kind": 2048,
							"children": [
								215
							]
						}
					],
					"sources": [
						{
							"fileName": "lib/iterables/concat-iterable.ts",
							"line": 7,
							"character": 27
						}
					],
					"implementedTypes": [
						{
							"type": "reference",
							"name": "Iterable",
							"typeArguments": [
								{
									"type": "typeParameter",
									"name": "T"
								}
							]
						}
					]
				}
			],
			"groups": [
				{
					"title": "Classes",
					"kind": 128,
					"children": [
						209
					]
				}
			],
			"sources": [
				{
					"fileName": "lib/iterables/concat-iterable.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 33,
			"name": "\"lib/iterables/count-iterable\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "C:/projects/github/data-forge/data-forge-ts/src/lib/iterables/count-iterable.ts",
			"children": [
				{
					"id": 34,
					"name": "CountIterable",
					"kind": 128,
					"kindString": "Class",
					"flags": {
						"isExported": true
					},
					"children": [
						{
							"id": 35,
							"name": "__@iterator",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 36,
									"name": "__@iterator",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Iterator",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "any"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/iterables/count-iterable.ts",
									"line": 10,
									"character": 21
								}
							]
						}
					],
					"groups": [
						{
							"title": "Methods",
							"kind": 2048,
							"children": [
								35
							]
						}
					],
					"sources": [
						{
							"fileName": "lib/iterables/count-iterable.ts",
							"line": 8,
							"character": 26
						}
					],
					"implementedTypes": [
						{
							"type": "reference",
							"name": "Iterable",
							"typeArguments": [
								{
									"type": "intrinsic",
									"name": "any"
								}
							]
						}
					]
				}
			],
			"groups": [
				{
					"title": "Classes",
					"kind": 128,
					"children": [
						34
					]
				}
			],
			"sources": [
				{
					"fileName": "lib/iterables/count-iterable.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 513,
			"name": "\"lib/iterables/csv-rows-iterable\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "C:/projects/github/data-forge/data-forge-ts/src/lib/iterables/csv-rows-iterable.ts",
			"children": [
				{
					"id": 514,
					"name": "CsvRowsIterable",
					"kind": 128,
					"kindString": "Class",
					"flags": {
						"isExported": true
					},
					"children": [
						{
							"id": 517,
							"name": "constructor",
							"kind": 512,
							"kindString": "Constructor",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 518,
									"name": "new CsvRowsIterable",
									"kind": 16384,
									"kindString": "Constructor signature",
									"flags": {},
									"parameters": [
										{
											"id": 519,
											"name": "columnNames",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Iterable",
												"typeArguments": [
													{
														"type": "intrinsic",
														"name": "string"
													}
												]
											}
										},
										{
											"id": 520,
											"name": "rows",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Iterable",
												"typeArguments": [
													{
														"type": "intrinsic",
														"name": "any"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "CsvRowsIterable",
										"id": 514
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/iterables/csv-rows-iterable.ts",
									"line": 10,
									"character": 24
								}
							]
						},
						{
							"id": 515,
							"name": "columnNames",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "lib/iterables/csv-rows-iterable.ts",
									"line": 9,
									"character": 15
								}
							],
							"type": {
								"type": "reference",
								"name": "Iterable",
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							}
						},
						{
							"id": 516,
							"name": "rows",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "lib/iterables/csv-rows-iterable.ts",
									"line": 10,
									"character": 8
								}
							],
							"type": {
								"type": "reference",
								"name": "Iterable",
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "any"
									}
								]
							}
						},
						{
							"id": 521,
							"name": "__@iterator",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 522,
									"name": "__@iterator",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Iterator",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "any"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/iterables/csv-rows-iterable.ts",
									"line": 17,
									"character": 21
								}
							]
						}
					],
					"groups": [
						{
							"title": "Constructors",
							"kind": 512,
							"children": [
								517
							]
						},
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								515,
								516
							]
						},
						{
							"title": "Methods",
							"kind": 2048,
							"children": [
								521
							]
						}
					],
					"sources": [
						{
							"fileName": "lib/iterables/csv-rows-iterable.ts",
							"line": 7,
							"character": 28
						}
					],
					"implementedTypes": [
						{
							"type": "reference",
							"name": "Iterable",
							"typeArguments": [
								{
									"type": "intrinsic",
									"name": "any"
								}
							]
						}
					]
				}
			],
			"groups": [
				{
					"title": "Classes",
					"kind": 128,
					"children": [
						514
					]
				}
			],
			"sources": [
				{
					"fileName": "lib/iterables/csv-rows-iterable.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 538,
			"name": "\"lib/iterables/dataframe-rolling-window-iterable\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "C:/projects/github/data-forge/data-forge-ts/src/lib/iterables/dataframe-rolling-window-iterable.ts",
			"children": [
				{
					"id": 539,
					"name": "DataFrameRollingWindowIterable",
					"kind": 128,
					"kindString": "Class",
					"flags": {
						"isExported": true
					},
					"typeParameter": [
						{
							"id": 540,
							"name": "IndexT",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {}
						},
						{
							"id": 541,
							"name": "ValueT",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {}
						}
					],
					"children": [
						{
							"id": 545,
							"name": "constructor",
							"kind": 512,
							"kindString": "Constructor",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 546,
									"name": "new DataFrameRollingWindowIterable",
									"kind": 16384,
									"kindString": "Constructor signature",
									"flags": {},
									"parameters": [
										{
											"id": 547,
											"name": "columnNames",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Iterable",
												"typeArguments": [
													{
														"type": "intrinsic",
														"name": "string"
													}
												]
											}
										},
										{
											"id": 548,
											"name": "iterable",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Iterable",
												"typeArguments": [
													{
														"type": "tuple",
														"elements": [
															{
																"type": "typeParameter",
																"name": "IndexT"
															},
															{
																"type": "typeParameter",
																"name": "ValueT"
															}
														]
													}
												]
											}
										},
										{
											"id": 549,
											"name": "period",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "DataFrameRollingWindowIterable",
										"id": 539
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/iterables/dataframe-rolling-window-iterable.ts",
									"line": 12,
									"character": 19
								}
							]
						},
						{
							"id": 542,
							"name": "columnNames",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "lib/iterables/dataframe-rolling-window-iterable.ts",
									"line": 10,
									"character": 15
								}
							],
							"type": {
								"type": "reference",
								"name": "Iterable",
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							}
						},
						{
							"id": 543,
							"name": "iterable",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "lib/iterables/dataframe-rolling-window-iterable.ts",
									"line": 11,
									"character": 12
								}
							],
							"type": {
								"type": "reference",
								"name": "Iterable",
								"typeArguments": [
									{
										"type": "tuple",
										"elements": [
											{
												"type": "typeParameter",
												"name": "IndexT"
											},
											{
												"type": "typeParameter",
												"name": "ValueT"
											}
										]
									}
								]
							}
						},
						{
							"id": 544,
							"name": "period",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "lib/iterables/dataframe-rolling-window-iterable.ts",
									"line": 12,
									"character": 10
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						},
						{
							"id": 550,
							"name": "__@iterator",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 551,
									"name": "__@iterator",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Iterator",
										"typeArguments": [
											{
												"type": "reference",
												"name": "IDataFrame",
												"id": 683,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "IndexT"
													},
													{
														"type": "typeParameter",
														"name": "ValueT"
													}
												]
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/iterables/dataframe-rolling-window-iterable.ts",
									"line": 20,
									"character": 21
								}
							]
						}
					],
					"groups": [
						{
							"title": "Constructors",
							"kind": 512,
							"children": [
								545
							]
						},
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								542,
								543,
								544
							]
						},
						{
							"title": "Methods",
							"kind": 2048,
							"children": [
								550
							]
						}
					],
					"sources": [
						{
							"fileName": "lib/iterables/dataframe-rolling-window-iterable.ts",
							"line": 8,
							"character": 43
						}
					],
					"implementedTypes": [
						{
							"type": "reference",
							"name": "Iterable",
							"typeArguments": [
								{
									"type": "reference",
									"name": "IDataFrame",
									"id": 683,
									"typeArguments": [
										{
											"type": "typeParameter",
											"name": "IndexT"
										},
										{
											"type": "typeParameter",
											"name": "ValueT"
										}
									]
								}
							]
						}
					]
				}
			],
			"groups": [
				{
					"title": "Classes",
					"kind": 128,
					"children": [
						539
					]
				}
			],
			"sources": [
				{
					"fileName": "lib/iterables/dataframe-rolling-window-iterable.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 574,
			"name": "\"lib/iterables/dataframe-variable-window-iterable\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "C:/projects/github/data-forge/data-forge-ts/src/lib/iterables/dataframe-variable-window-iterable.ts",
			"children": [
				{
					"id": 575,
					"name": "DataFrameVariableWindowIterable",
					"kind": 128,
					"kindString": "Class",
					"flags": {
						"isExported": true
					},
					"typeParameter": [
						{
							"id": 576,
							"name": "IndexT",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {}
						},
						{
							"id": 577,
							"name": "ValueT",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {}
						}
					],
					"children": [
						{
							"id": 581,
							"name": "constructor",
							"kind": 512,
							"kindString": "Constructor",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 582,
									"name": "new DataFrameVariableWindowIterable",
									"kind": 16384,
									"kindString": "Constructor signature",
									"flags": {},
									"parameters": [
										{
											"id": 583,
											"name": "columnNames",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Iterable",
												"typeArguments": [
													{
														"type": "intrinsic",
														"name": "string"
													}
												]
											}
										},
										{
											"id": 584,
											"name": "iterable",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Iterable",
												"typeArguments": [
													{
														"type": "tuple",
														"elements": [
															{
																"type": "typeParameter",
																"name": "IndexT"
															},
															{
																"type": "typeParameter",
																"name": "ValueT"
															}
														]
													}
												]
											}
										},
										{
											"id": 585,
											"name": "comparer",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "ComparerFn",
												"id": 371,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "ValueT"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "DataFrameVariableWindowIterable",
										"id": 575
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/iterables/dataframe-variable-window-iterable.ts",
									"line": 12,
									"character": 33
								}
							]
						},
						{
							"id": 578,
							"name": "columnNames",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "lib/iterables/dataframe-variable-window-iterable.ts",
									"line": 10,
									"character": 15
								}
							],
							"type": {
								"type": "reference",
								"name": "Iterable",
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							}
						},
						{
							"id": 580,
							"name": "comparer",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "lib/iterables/dataframe-variable-window-iterable.ts",
									"line": 12,
									"character": 12
								}
							],
							"type": {
								"type": "reference",
								"name": "ComparerFn",
								"id": 371,
								"typeArguments": [
									{
										"type": "typeParameter",
										"name": "ValueT"
									}
								]
							}
						},
						{
							"id": 579,
							"name": "iterable",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "lib/iterables/dataframe-variable-window-iterable.ts",
									"line": 11,
									"character": 12
								}
							],
							"type": {
								"type": "reference",
								"name": "Iterable",
								"typeArguments": [
									{
										"type": "tuple",
										"elements": [
											{
												"type": "typeParameter",
												"name": "IndexT"
											},
											{
												"type": "typeParameter",
												"name": "ValueT"
											}
										]
									}
								]
							}
						},
						{
							"id": 586,
							"name": "__@iterator",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 587,
									"name": "__@iterator",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Iterator",
										"typeArguments": [
											{
												"type": "reference",
												"name": "IDataFrame",
												"id": 683,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "IndexT"
													},
													{
														"type": "typeParameter",
														"name": "ValueT"
													}
												]
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/iterables/dataframe-variable-window-iterable.ts",
									"line": 20,
									"character": 21
								}
							]
						}
					],
					"groups": [
						{
							"title": "Constructors",
							"kind": 512,
							"children": [
								581
							]
						},
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								578,
								580,
								579
							]
						},
						{
							"title": "Methods",
							"kind": 2048,
							"children": [
								586
							]
						}
					],
					"sources": [
						{
							"fileName": "lib/iterables/dataframe-variable-window-iterable.ts",
							"line": 8,
							"character": 44
						}
					],
					"implementedTypes": [
						{
							"type": "reference",
							"name": "Iterable",
							"typeArguments": [
								{
									"type": "reference",
									"name": "IDataFrame",
									"id": 683,
									"typeArguments": [
										{
											"type": "typeParameter",
											"name": "IndexT"
										},
										{
											"type": "typeParameter",
											"name": "ValueT"
										}
									]
								}
							]
						}
					]
				}
			],
			"groups": [
				{
					"title": "Classes",
					"kind": 128,
					"children": [
						575
					]
				}
			],
			"sources": [
				{
					"fileName": "lib/iterables/dataframe-variable-window-iterable.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 488,
			"name": "\"lib/iterables/dataframe-window-iterable\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "C:/projects/github/data-forge/data-forge-ts/src/lib/iterables/dataframe-window-iterable.ts",
			"children": [
				{
					"id": 489,
					"name": "DataFrameWindowIterable",
					"kind": 128,
					"kindString": "Class",
					"flags": {
						"isExported": true
					},
					"typeParameter": [
						{
							"id": 490,
							"name": "IndexT",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {}
						},
						{
							"id": 491,
							"name": "ValueT",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {}
						}
					],
					"children": [
						{
							"id": 495,
							"name": "constructor",
							"kind": 512,
							"kindString": "Constructor",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 496,
									"name": "new DataFrameWindowIterable",
									"kind": 16384,
									"kindString": "Constructor signature",
									"flags": {},
									"parameters": [
										{
											"id": 497,
											"name": "columnNames",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Iterable",
												"typeArguments": [
													{
														"type": "intrinsic",
														"name": "string"
													}
												]
											}
										},
										{
											"id": 498,
											"name": "iterable",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Iterable",
												"typeArguments": [
													{
														"type": "tuple",
														"elements": [
															{
																"type": "typeParameter",
																"name": "IndexT"
															},
															{
																"type": "typeParameter",
																"name": "ValueT"
															}
														]
													}
												]
											}
										},
										{
											"id": 499,
											"name": "period",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "DataFrameWindowIterable",
										"id": 489
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/iterables/dataframe-window-iterable.ts",
									"line": 12,
									"character": 19
								}
							]
						},
						{
							"id": 492,
							"name": "columnNames",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "lib/iterables/dataframe-window-iterable.ts",
									"line": 10,
									"character": 15
								}
							],
							"type": {
								"type": "reference",
								"name": "Iterable",
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							}
						},
						{
							"id": 493,
							"name": "iterable",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "lib/iterables/dataframe-window-iterable.ts",
									"line": 11,
									"character": 12
								}
							],
							"type": {
								"type": "reference",
								"name": "Iterable",
								"typeArguments": [
									{
										"type": "tuple",
										"elements": [
											{
												"type": "typeParameter",
												"name": "IndexT"
											},
											{
												"type": "typeParameter",
												"name": "ValueT"
											}
										]
									}
								]
							}
						},
						{
							"id": 494,
							"name": "period",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "lib/iterables/dataframe-window-iterable.ts",
									"line": 12,
									"character": 10
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						},
						{
							"id": 500,
							"name": "__@iterator",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 501,
									"name": "__@iterator",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Iterator",
										"typeArguments": [
											{
												"type": "reference",
												"name": "IDataFrame",
												"id": 683,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "IndexT"
													},
													{
														"type": "typeParameter",
														"name": "ValueT"
													}
												]
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/iterables/dataframe-window-iterable.ts",
									"line": 20,
									"character": 21
								}
							]
						}
					],
					"groups": [
						{
							"title": "Constructors",
							"kind": 512,
							"children": [
								495
							]
						},
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								492,
								493,
								494
							]
						},
						{
							"title": "Methods",
							"kind": 2048,
							"children": [
								500
							]
						}
					],
					"sources": [
						{
							"fileName": "lib/iterables/dataframe-window-iterable.ts",
							"line": 8,
							"character": 36
						}
					],
					"implementedTypes": [
						{
							"type": "reference",
							"name": "Iterable",
							"typeArguments": [
								{
									"type": "reference",
									"name": "IDataFrame",
									"id": 683,
									"typeArguments": [
										{
											"type": "typeParameter",
											"name": "IndexT"
										},
										{
											"type": "typeParameter",
											"name": "ValueT"
										}
									]
								}
							]
						}
					]
				}
			],
			"groups": [
				{
					"title": "Classes",
					"kind": 128,
					"children": [
						489
					]
				}
			],
			"sources": [
				{
					"fileName": "lib/iterables/dataframe-window-iterable.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 320,
			"name": "\"lib/iterables/distinct-iterable\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "C:/projects/github/data-forge/data-forge-ts/src/lib/iterables/distinct-iterable.ts",
			"children": [
				{
					"id": 321,
					"name": "DistinctIterable",
					"kind": 128,
					"kindString": "Class",
					"flags": {
						"isExported": true
					},
					"typeParameter": [
						{
							"id": 322,
							"name": "FromT",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {}
						},
						{
							"id": 323,
							"name": "ToT",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {}
						}
					],
					"children": [
						{
							"id": 326,
							"name": "constructor",
							"kind": 512,
							"kindString": "Constructor",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 327,
									"name": "new DistinctIterable",
									"kind": 16384,
									"kindString": "Constructor signature",
									"flags": {},
									"parameters": [
										{
											"id": 328,
											"name": "iterable",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Iterable",
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "FromT"
													}
												]
											}
										},
										{
											"id": 329,
											"name": "selector",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "reference",
												"name": "SelectorFnNoIndex",
												"id": 314,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "FromT"
													},
													{
														"type": "typeParameter",
														"name": "ToT"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "DistinctIterable",
										"id": 321
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/iterables/distinct-iterable.ts",
									"line": 10,
									"character": 45
								}
							]
						},
						{
							"id": 324,
							"name": "iterable",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "lib/iterables/distinct-iterable.ts",
									"line": 9,
									"character": 12
								}
							],
							"type": {
								"type": "reference",
								"name": "Iterable",
								"typeArguments": [
									{
										"type": "typeParameter",
										"name": "FromT"
									}
								]
							}
						},
						{
							"id": 325,
							"name": "selector",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "lib/iterables/distinct-iterable.ts",
									"line": 10,
									"character": 12
								}
							],
							"type": {
								"type": "reference",
								"name": "SelectorFnNoIndex",
								"id": 314,
								"typeArguments": [
									{
										"type": "typeParameter",
										"name": "FromT"
									},
									{
										"type": "typeParameter",
										"name": "ToT"
									}
								]
							}
						},
						{
							"id": 330,
							"name": "__@iterator",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 331,
									"name": "__@iterator",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Iterator",
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "FromT"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/iterables/distinct-iterable.ts",
									"line": 17,
									"character": 21
								}
							]
						}
					],
					"groups": [
						{
							"title": "Constructors",
							"kind": 512,
							"children": [
								326
							]
						},
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								324,
								325
							]
						},
						{
							"title": "Methods",
							"kind": 2048,
							"children": [
								330
							]
						}
					],
					"sources": [
						{
							"fileName": "lib/iterables/distinct-iterable.ts",
							"line": 7,
							"character": 29
						}
					],
					"implementedTypes": [
						{
							"type": "reference",
							"name": "Iterable",
							"typeArguments": [
								{
									"type": "typeParameter",
									"name": "FromT"
								}
							]
						}
					]
				}
			],
			"groups": [
				{
					"title": "Classes",
					"kind": 128,
					"children": [
						321
					]
				}
			],
			"sources": [
				{
					"fileName": "lib/iterables/distinct-iterable.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 24,
			"name": "\"lib/iterables/empty-iterable\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "C:/projects/github/data-forge/data-forge-ts/src/lib/iterables/empty-iterable.ts",
			"children": [
				{
					"id": 25,
					"name": "EmptyIterable",
					"kind": 128,
					"kindString": "Class",
					"flags": {
						"isExported": true
					},
					"children": [
						{
							"id": 26,
							"name": "__@iterator",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 27,
									"name": "__@iterator",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Iterator",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "any"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/iterables/empty-iterable.ts",
									"line": 9,
									"character": 21
								}
							]
						}
					],
					"groups": [
						{
							"title": "Methods",
							"kind": 2048,
							"children": [
								26
							]
						}
					],
					"sources": [
						{
							"fileName": "lib/iterables/empty-iterable.ts",
							"line": 7,
							"character": 26
						}
					],
					"implementedTypes": [
						{
							"type": "reference",
							"name": "Iterable",
							"typeArguments": [
								{
									"type": "intrinsic",
									"name": "any"
								}
							]
						}
					]
				}
			],
			"groups": [
				{
					"title": "Classes",
					"kind": 128,
					"children": [
						25
					]
				}
			],
			"sources": [
				{
					"fileName": "lib/iterables/empty-iterable.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 435,
			"name": "\"lib/iterables/extract-element-iterable\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "C:/projects/github/data-forge/data-forge-ts/src/lib/iterables/extract-element-iterable.ts",
			"children": [
				{
					"id": 436,
					"name": "ExtractElementIterable",
					"kind": 128,
					"kindString": "Class",
					"flags": {
						"isExported": true
					},
					"children": [
						{
							"id": 439,
							"name": "constructor",
							"kind": 512,
							"kindString": "Constructor",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 440,
									"name": "new ExtractElementIterable",
									"kind": 16384,
									"kindString": "Constructor signature",
									"flags": {},
									"parameters": [
										{
											"id": 441,
											"name": "arrayIterable",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Iterable",
												"typeArguments": [
													{
														"type": "array",
														"elementType": {
															"type": "intrinsic",
															"name": "any"
														}
													}
												]
											}
										},
										{
											"id": 442,
											"name": "extractIndex",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "ExtractElementIterable",
										"id": 436
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/iterables/extract-element-iterable.ts",
									"line": 10,
									"character": 25
								}
							]
						},
						{
							"id": 437,
							"name": "arrayIterable",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "lib/iterables/extract-element-iterable.ts",
									"line": 9,
									"character": 17
								}
							],
							"type": {
								"type": "reference",
								"name": "Iterable",
								"typeArguments": [
									{
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "any"
										}
									}
								]
							}
						},
						{
							"id": 438,
							"name": "extractIndex",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "lib/iterables/extract-element-iterable.ts",
									"line": 10,
									"character": 16
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						},
						{
							"id": 443,
							"name": "__@iterator",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 444,
									"name": "__@iterator",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Iterator",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "any"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/iterables/extract-element-iterable.ts",
									"line": 17,
									"character": 21
								}
							]
						}
					],
					"groups": [
						{
							"title": "Constructors",
							"kind": 512,
							"children": [
								439
							]
						},
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								437,
								438
							]
						},
						{
							"title": "Methods",
							"kind": 2048,
							"children": [
								443
							]
						}
					],
					"sources": [
						{
							"fileName": "lib/iterables/extract-element-iterable.ts",
							"line": 7,
							"character": 35
						}
					],
					"implementedTypes": [
						{
							"type": "reference",
							"name": "Iterable",
							"typeArguments": [
								{
									"type": "intrinsic",
									"name": "any"
								}
							]
						}
					]
				}
			],
			"groups": [
				{
					"title": "Classes",
					"kind": 128,
					"children": [
						436
					]
				}
			],
			"sources": [
				{
					"fileName": "lib/iterables/extract-element-iterable.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 45,
			"name": "\"lib/iterables/multi-iterable\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "C:/projects/github/data-forge/data-forge-ts/src/lib/iterables/multi-iterable.ts",
			"children": [
				{
					"id": 46,
					"name": "MultiIterable",
					"kind": 128,
					"kindString": "Class",
					"flags": {
						"isExported": true
					},
					"children": [
						{
							"id": 48,
							"name": "constructor",
							"kind": 512,
							"kindString": "Constructor",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 49,
									"name": "new MultiIterable",
									"kind": 16384,
									"kindString": "Constructor signature",
									"flags": {},
									"parameters": [
										{
											"id": 50,
											"name": "iterables",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "array",
												"elementType": {
													"type": "reference",
													"name": "Iterable",
													"typeArguments": [
														{
															"type": "intrinsic",
															"name": "any"
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "MultiIterable",
										"id": 46
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/iterables/multi-iterable.ts",
									"line": 11,
									"character": 31
								}
							]
						},
						{
							"id": 47,
							"name": "iterables",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "lib/iterables/multi-iterable.ts",
									"line": 11,
									"character": 13
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "reference",
									"name": "Iterable",
									"typeArguments": [
										{
											"type": "intrinsic",
											"name": "any"
										}
									]
								}
							}
						},
						{
							"id": 51,
							"name": "__@iterator",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 52,
									"name": "__@iterator",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Iterator",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "any"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/iterables/multi-iterable.ts",
									"line": 17,
									"character": 21
								}
							]
						}
					],
					"groups": [
						{
							"title": "Constructors",
							"kind": 512,
							"children": [
								48
							]
						},
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								47
							]
						},
						{
							"title": "Methods",
							"kind": 2048,
							"children": [
								51
							]
						}
					],
					"sources": [
						{
							"fileName": "lib/iterables/multi-iterable.ts",
							"line": 9,
							"character": 26
						}
					],
					"implementedTypes": [
						{
							"type": "reference",
							"name": "Iterable",
							"typeArguments": [
								{
									"type": "array",
									"elementType": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							]
						}
					]
				}
			],
			"groups": [
				{
					"title": "Classes",
					"kind": 128,
					"children": [
						46
					]
				}
			],
			"sources": [
				{
					"fileName": "lib/iterables/multi-iterable.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 389,
			"name": "\"lib/iterables/ordered-iterable\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "C:/projects/github/data-forge/data-forge-ts/src/lib/iterables/ordered-iterable.ts",
			"children": [
				{
					"id": 390,
					"name": "Direction",
					"kind": 4,
					"kindString": "Enumeration",
					"flags": {
						"isExported": true
					},
					"children": [
						{
							"id": 391,
							"name": "Ascending",
							"kind": 16,
							"kindString": "Enumeration member",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "lib/iterables/ordered-iterable.ts",
									"line": 10,
									"character": 13
								}
							]
						},
						{
							"id": 392,
							"name": "Descending",
							"kind": 16,
							"kindString": "Enumeration member",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "lib/iterables/ordered-iterable.ts",
									"line": 11,
									"character": 14
								}
							]
						}
					],
					"groups": [
						{
							"title": "Enumeration members",
							"kind": 16,
							"children": [
								391,
								392
							]
						}
					],
					"sources": [
						{
							"fileName": "lib/iterables/ordered-iterable.ts",
							"line": 9,
							"character": 21
						}
					]
				},
				{
					"id": 411,
					"name": "OrderedIterable",
					"kind": 128,
					"kindString": "Class",
					"flags": {
						"isExported": true
					},
					"children": [
						{
							"id": 414,
							"name": "constructor",
							"kind": 512,
							"kindString": "Constructor",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 415,
									"name": "new OrderedIterable",
									"kind": 16384,
									"kindString": "Constructor signature",
									"flags": {},
									"parameters": [
										{
											"id": 416,
											"name": "iterable",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Iterable",
												"typeArguments": [
													{
														"type": "intrinsic",
														"name": "any"
													}
												]
											}
										},
										{
											"id": 417,
											"name": "sortSpec",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "array",
												"elementType": {
													"type": "reference",
													"name": "ISortSpec",
													"id": 393
												}
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "OrderedIterable",
										"id": 411
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/iterables/ordered-iterable.ts",
									"line": 66,
									"character": 26
								}
							]
						},
						{
							"id": 412,
							"name": "iterable",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "lib/iterables/ordered-iterable.ts",
									"line": 65,
									"character": 12
								}
							],
							"type": {
								"type": "reference",
								"name": "Iterable",
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "any"
									}
								]
							}
						},
						{
							"id": 413,
							"name": "sortSpec",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "lib/iterables/ordered-iterable.ts",
									"line": 66,
									"character": 12
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "reference",
									"name": "ISortSpec",
									"id": 393
								}
							}
						},
						{
							"id": 418,
							"name": "__@iterator",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 419,
									"name": "__@iterator",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Iterator",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "any"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/iterables/ordered-iterable.ts",
									"line": 73,
									"character": 21
								}
							]
						}
					],
					"groups": [
						{
							"title": "Constructors",
							"kind": 512,
							"children": [
								414
							]
						},
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								412,
								413
							]
						},
						{
							"title": "Methods",
							"kind": 2048,
							"children": [
								418
							]
						}
					],
					"sources": [
						{
							"fileName": "lib/iterables/ordered-iterable.ts",
							"line": 61,
							"character": 28
						}
					],
					"implementedTypes": [
						{
							"type": "reference",
							"name": "Iterable",
							"typeArguments": [
								{
									"type": "intrinsic",
									"name": "any"
								}
							]
						}
					]
				},
				{
					"id": 397,
					"name": "SortOperation",
					"kind": 128,
					"kindString": "Class",
					"flags": {},
					"children": [
						{
							"id": 401,
							"name": "constructor",
							"kind": 512,
							"kindString": "Constructor",
							"flags": {},
							"signatures": [
								{
									"id": 402,
									"name": "new SortOperation",
									"kind": 16384,
									"kindString": "Constructor signature",
									"flags": {},
									"parameters": [
										{
											"id": 403,
											"name": "values",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "array",
												"elementType": {
													"type": "intrinsic",
													"name": "any"
												}
											}
										},
										{
											"id": 404,
											"name": "sortSpec",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "ISortSpec",
												"id": 393
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "SortOperation",
										"id": 397
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/iterables/ordered-iterable.ts",
									"line": 24,
									"character": 16
								}
							]
						},
						{
							"id": 400,
							"name": "keys",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"sources": [
								{
									"fileName": "lib/iterables/ordered-iterable.ts",
									"line": 24,
									"character": 8
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "intrinsic",
									"name": "any"
								}
							}
						},
						{
							"id": 399,
							"name": "sortSpec",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"sources": [
								{
									"fileName": "lib/iterables/ordered-iterable.ts",
									"line": 23,
									"character": 12
								}
							],
							"type": {
								"type": "reference",
								"name": "ISortSpec",
								"id": 393
							}
						},
						{
							"id": 398,
							"name": "values",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"sources": [
								{
									"fileName": "lib/iterables/ordered-iterable.ts",
									"line": 22,
									"character": 10
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "intrinsic",
									"name": "any"
								}
							}
						},
						{
							"id": 407,
							"name": "compare",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"signatures": [
								{
									"id": 408,
									"name": "compare",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 409,
											"name": "indexA",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										},
										{
											"id": 410,
											"name": "indexB",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/iterables/ordered-iterable.ts",
									"line": 44,
									"character": 11
								}
							]
						},
						{
							"id": 405,
							"name": "genKeys",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"signatures": [
								{
									"id": 406,
									"name": "genKeys",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/iterables/ordered-iterable.ts",
									"line": 32,
									"character": 11
								}
							]
						}
					],
					"groups": [
						{
							"title": "Constructors",
							"kind": 512,
							"children": [
								401
							]
						},
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								400,
								399,
								398
							]
						},
						{
							"title": "Methods",
							"kind": 2048,
							"children": [
								407,
								405
							]
						}
					],
					"sources": [
						{
							"fileName": "lib/iterables/ordered-iterable.ts",
							"line": 20,
							"character": 19
						}
					]
				},
				{
					"id": 393,
					"name": "ISortSpec",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"children": [
						{
							"id": 396,
							"name": "direction",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "lib/iterables/ordered-iterable.ts",
									"line": 17,
									"character": 13
								}
							],
							"type": {
								"type": "reference",
								"name": "Direction",
								"id": 390
							}
						},
						{
							"id": 395,
							"name": "selector",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "lib/iterables/ordered-iterable.ts",
									"line": 16,
									"character": 12
								}
							],
							"type": {
								"type": "reference",
								"name": "SelectorFn",
								"id": 420
							}
						},
						{
							"id": 394,
							"name": "sortLevel",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "lib/iterables/ordered-iterable.ts",
									"line": 15,
									"character": 13
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								396,
								395,
								394
							]
						}
					],
					"sources": [
						{
							"fileName": "lib/iterables/ordered-iterable.ts",
							"line": 14,
							"character": 26
						}
					]
				},
				{
					"id": 420,
					"name": "SelectorFn",
					"kind": 4194304,
					"kindString": "Type alias",
					"flags": {
						"isExported": true
					},
					"sources": [
						{
							"fileName": "lib/iterables/ordered-iterable.ts",
							"line": 7,
							"character": 22
						}
					],
					"type": {
						"type": "reflection",
						"declaration": {
							"id": 421,
							"name": "__type",
							"kind": 65536,
							"kindString": "Type literal",
							"flags": {},
							"signatures": [
								{
									"id": 422,
									"name": "__call",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 423,
											"name": "value",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "any"
											}
										},
										{
											"id": 424,
											"name": "index",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/iterables/ordered-iterable.ts",
									"line": 7,
									"character": 24
								}
							]
						}
					}
				}
			],
			"groups": [
				{
					"title": "Enumerations",
					"kind": 4,
					"children": [
						390
					]
				},
				{
					"title": "Classes",
					"kind": 128,
					"children": [
						411,
						397
					]
				},
				{
					"title": "Interfaces",
					"kind": 256,
					"children": [
						393
					]
				},
				{
					"title": "Type aliases",
					"kind": 4194304,
					"children": [
						420
					]
				}
			],
			"sources": [
				{
					"fileName": "lib/iterables/ordered-iterable.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 262,
			"name": "\"lib/iterables/reverse-iterable\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "C:/projects/github/data-forge/data-forge-ts/src/lib/iterables/reverse-iterable.ts",
			"children": [
				{
					"id": 263,
					"name": "ReverseIterable",
					"kind": 128,
					"kindString": "Class",
					"flags": {
						"isExported": true
					},
					"typeParameter": [
						{
							"id": 264,
							"name": "T",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {}
						}
					],
					"children": [
						{
							"id": 266,
							"name": "constructor",
							"kind": 512,
							"kindString": "Constructor",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 267,
									"name": "new ReverseIterable",
									"kind": 16384,
									"kindString": "Constructor signature",
									"flags": {},
									"parameters": [
										{
											"id": 268,
											"name": "iterable",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Iterable",
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "T"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "ReverseIterable",
										"id": 263
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/iterables/reverse-iterable.ts",
									"line": 9,
									"character": 26
								}
							]
						},
						{
							"id": 265,
							"name": "iterable",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "lib/iterables/reverse-iterable.ts",
									"line": 9,
									"character": 12
								}
							],
							"type": {
								"type": "reference",
								"name": "Iterable",
								"typeArguments": [
									{
										"type": "typeParameter",
										"name": "T"
									}
								]
							}
						},
						{
							"id": 269,
							"name": "__@iterator",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 270,
									"name": "__@iterator",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Iterator",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "any"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/iterables/reverse-iterable.ts",
									"line": 15,
									"character": 21
								}
							]
						}
					],
					"groups": [
						{
							"title": "Constructors",
							"kind": 512,
							"children": [
								266
							]
						},
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								265
							]
						},
						{
							"title": "Methods",
							"kind": 2048,
							"children": [
								269
							]
						}
					],
					"sources": [
						{
							"fileName": "lib/iterables/reverse-iterable.ts",
							"line": 7,
							"character": 28
						}
					],
					"implementedTypes": [
						{
							"type": "reference",
							"name": "Iterable",
							"typeArguments": [
								{
									"type": "typeParameter",
									"name": "T"
								}
							]
						}
					]
				}
			],
			"groups": [
				{
					"title": "Classes",
					"kind": 128,
					"children": [
						263
					]
				}
			],
			"sources": [
				{
					"fileName": "lib/iterables/reverse-iterable.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 73,
			"name": "\"lib/iterables/select-iterable\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "C:/projects/github/data-forge/data-forge-ts/src/lib/iterables/select-iterable.ts",
			"children": [
				{
					"id": 74,
					"name": "SelectIterable",
					"kind": 128,
					"kindString": "Class",
					"flags": {
						"isExported": true
					},
					"typeParameter": [
						{
							"id": 75,
							"name": "ValueT",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {}
						},
						{
							"id": 76,
							"name": "ToT",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {}
						}
					],
					"children": [
						{
							"id": 79,
							"name": "constructor",
							"kind": 512,
							"kindString": "Constructor",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 80,
									"name": "new SelectIterable",
									"kind": 16384,
									"kindString": "Constructor signature",
									"flags": {},
									"parameters": [
										{
											"id": 81,
											"name": "iterable",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Iterable",
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "ValueT"
													}
												]
											}
										},
										{
											"id": 82,
											"name": "selector",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "SelectorFn",
												"id": 66,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "ValueT"
													},
													{
														"type": "typeParameter",
														"name": "ToT"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "SelectIterable",
										"id": 74
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/iterables/select-iterable.ts",
									"line": 10,
									"character": 38
								}
							]
						},
						{
							"id": 77,
							"name": "iterable",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "lib/iterables/select-iterable.ts",
									"line": 9,
									"character": 12
								}
							],
							"type": {
								"type": "reference",
								"name": "Iterable",
								"typeArguments": [
									{
										"type": "typeParameter",
										"name": "ValueT"
									}
								]
							}
						},
						{
							"id": 78,
							"name": "selector",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "lib/iterables/select-iterable.ts",
									"line": 10,
									"character": 12
								}
							],
							"type": {
								"type": "reference",
								"name": "SelectorFn",
								"id": 66,
								"typeArguments": [
									{
										"type": "typeParameter",
										"name": "ValueT"
									},
									{
										"type": "typeParameter",
										"name": "ToT"
									}
								]
							}
						},
						{
							"id": 83,
							"name": "__@iterator",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 84,
									"name": "__@iterator",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Iterator",
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "ToT"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/iterables/select-iterable.ts",
									"line": 17,
									"character": 21
								}
							]
						}
					],
					"groups": [
						{
							"title": "Constructors",
							"kind": 512,
							"children": [
								79
							]
						},
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								77,
								78
							]
						},
						{
							"title": "Methods",
							"kind": 2048,
							"children": [
								83
							]
						}
					],
					"sources": [
						{
							"fileName": "lib/iterables/select-iterable.ts",
							"line": 7,
							"character": 27
						}
					],
					"implementedTypes": [
						{
							"type": "reference",
							"name": "Iterable",
							"typeArguments": [
								{
									"type": "typeParameter",
									"name": "ToT"
								}
							]
						}
					]
				}
			],
			"groups": [
				{
					"title": "Classes",
					"kind": 128,
					"children": [
						74
					]
				}
			],
			"sources": [
				{
					"fileName": "lib/iterables/select-iterable.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 106,
			"name": "\"lib/iterables/select-many-iterable\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "C:/projects/github/data-forge/data-forge-ts/src/lib/iterables/select-many-iterable.ts",
			"children": [
				{
					"id": 107,
					"name": "SelectManyIterable",
					"kind": 128,
					"kindString": "Class",
					"flags": {
						"isExported": true
					},
					"typeParameter": [
						{
							"id": 108,
							"name": "ValueT",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {}
						},
						{
							"id": 109,
							"name": "ToT",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {}
						}
					],
					"children": [
						{
							"id": 112,
							"name": "constructor",
							"kind": 512,
							"kindString": "Constructor",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 113,
									"name": "new SelectManyIterable",
									"kind": 16384,
									"kindString": "Constructor signature",
									"flags": {},
									"parameters": [
										{
											"id": 114,
											"name": "iterable",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Iterable",
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "ValueT"
													}
												]
											}
										},
										{
											"id": 115,
											"name": "selector",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "SelectorFn",
												"id": 66,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "ValueT"
													},
													{
														"type": "typeParameter",
														"name": "ToT"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "SelectManyIterable",
										"id": 107
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/iterables/select-many-iterable.ts",
									"line": 10,
									"character": 38
								}
							]
						},
						{
							"id": 110,
							"name": "iterable",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "lib/iterables/select-many-iterable.ts",
									"line": 9,
									"character": 12
								}
							],
							"type": {
								"type": "reference",
								"name": "Iterable",
								"typeArguments": [
									{
										"type": "typeParameter",
										"name": "ValueT"
									}
								]
							}
						},
						{
							"id": 111,
							"name": "selector",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "lib/iterables/select-many-iterable.ts",
									"line": 10,
									"character": 12
								}
							],
							"type": {
								"type": "reference",
								"name": "SelectorFn",
								"id": 66,
								"typeArguments": [
									{
										"type": "typeParameter",
										"name": "ValueT"
									},
									{
										"type": "typeParameter",
										"name": "ToT"
									}
								]
							}
						},
						{
							"id": 116,
							"name": "__@iterator",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 117,
									"name": "__@iterator",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Iterator",
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "ToT"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/iterables/select-many-iterable.ts",
									"line": 17,
									"character": 21
								}
							]
						}
					],
					"groups": [
						{
							"title": "Constructors",
							"kind": 512,
							"children": [
								112
							]
						},
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								110,
								111
							]
						},
						{
							"title": "Methods",
							"kind": 2048,
							"children": [
								116
							]
						}
					],
					"sources": [
						{
							"fileName": "lib/iterables/select-many-iterable.ts",
							"line": 7,
							"character": 31
						}
					],
					"implementedTypes": [
						{
							"type": "reference",
							"name": "Iterable",
							"typeArguments": [
								{
									"type": "typeParameter",
									"name": "ToT"
								}
							]
						}
					]
				}
			],
			"groups": [
				{
					"title": "Classes",
					"kind": 128,
					"children": [
						107
					]
				}
			],
			"sources": [
				{
					"fileName": "lib/iterables/select-many-iterable.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 345,
			"name": "\"lib/iterables/series-rolling-window-iterable\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "C:/projects/github/data-forge/data-forge-ts/src/lib/iterables/series-rolling-window-iterable.ts",
			"children": [
				{
					"id": 346,
					"name": "SeriesRollingWindowIterable",
					"kind": 128,
					"kindString": "Class",
					"flags": {
						"isExported": true
					},
					"typeParameter": [
						{
							"id": 347,
							"name": "IndexT",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {}
						},
						{
							"id": 348,
							"name": "ValueT",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {}
						}
					],
					"children": [
						{
							"id": 351,
							"name": "constructor",
							"kind": 512,
							"kindString": "Constructor",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 352,
									"name": "new SeriesRollingWindowIterable",
									"kind": 16384,
									"kindString": "Constructor signature",
									"flags": {},
									"parameters": [
										{
											"id": 353,
											"name": "iterable",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Iterable",
												"typeArguments": [
													{
														"type": "tuple",
														"elements": [
															{
																"type": "typeParameter",
																"name": "IndexT"
															},
															{
																"type": "typeParameter",
																"name": "ValueT"
															}
														]
													}
												]
											}
										},
										{
											"id": 354,
											"name": "period",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "SeriesRollingWindowIterable",
										"id": 346
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/iterables/series-rolling-window-iterable.ts",
									"line": 11,
									"character": 19
								}
							]
						},
						{
							"id": 349,
							"name": "iterable",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "lib/iterables/series-rolling-window-iterable.ts",
									"line": 10,
									"character": 12
								}
							],
							"type": {
								"type": "reference",
								"name": "Iterable",
								"typeArguments": [
									{
										"type": "tuple",
										"elements": [
											{
												"type": "typeParameter",
												"name": "IndexT"
											},
											{
												"type": "typeParameter",
												"name": "ValueT"
											}
										]
									}
								]
							}
						},
						{
							"id": 350,
							"name": "period",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "lib/iterables/series-rolling-window-iterable.ts",
									"line": 11,
									"character": 10
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						},
						{
							"id": 355,
							"name": "__@iterator",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 356,
									"name": "__@iterator",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Iterator",
										"typeArguments": [
											{
												"type": "reference",
												"name": "ISeries",
												"id": 2287,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "IndexT"
													},
													{
														"type": "typeParameter",
														"name": "ValueT"
													}
												]
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/iterables/series-rolling-window-iterable.ts",
									"line": 18,
									"character": 21
								}
							]
						}
					],
					"groups": [
						{
							"title": "Constructors",
							"kind": 512,
							"children": [
								351
							]
						},
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								349,
								350
							]
						},
						{
							"title": "Methods",
							"kind": 2048,
							"children": [
								355
							]
						}
					],
					"sources": [
						{
							"fileName": "lib/iterables/series-rolling-window-iterable.ts",
							"line": 8,
							"character": 40
						}
					],
					"implementedTypes": [
						{
							"type": "reference",
							"name": "Iterable",
							"typeArguments": [
								{
									"type": "reference",
									"name": "ISeries",
									"id": 2287,
									"typeArguments": [
										{
											"type": "typeParameter",
											"name": "IndexT"
										},
										{
											"type": "typeParameter",
											"name": "ValueT"
										}
									]
								}
							]
						}
					]
				}
			],
			"groups": [
				{
					"title": "Classes",
					"kind": 128,
					"children": [
						346
					]
				}
			],
			"sources": [
				{
					"fileName": "lib/iterables/series-rolling-window-iterable.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 377,
			"name": "\"lib/iterables/series-variable-window-iterable\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "C:/projects/github/data-forge/data-forge-ts/src/lib/iterables/series-variable-window-iterable.ts",
			"children": [
				{
					"id": 378,
					"name": "SeriesVariableWindowIterable",
					"kind": 128,
					"kindString": "Class",
					"flags": {
						"isExported": true
					},
					"typeParameter": [
						{
							"id": 379,
							"name": "IndexT",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {}
						},
						{
							"id": 380,
							"name": "ValueT",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {}
						}
					],
					"children": [
						{
							"id": 383,
							"name": "constructor",
							"kind": 512,
							"kindString": "Constructor",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 384,
									"name": "new SeriesVariableWindowIterable",
									"kind": 16384,
									"kindString": "Constructor signature",
									"flags": {},
									"parameters": [
										{
											"id": 385,
											"name": "iterable",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Iterable",
												"typeArguments": [
													{
														"type": "tuple",
														"elements": [
															{
																"type": "typeParameter",
																"name": "IndexT"
															},
															{
																"type": "typeParameter",
																"name": "ValueT"
															}
														]
													}
												]
											}
										},
										{
											"id": 386,
											"name": "comparer",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "ComparerFn",
												"id": 371,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "ValueT"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "SeriesVariableWindowIterable",
										"id": 378
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/iterables/series-variable-window-iterable.ts",
									"line": 11,
									"character": 33
								}
							]
						},
						{
							"id": 382,
							"name": "comparer",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "lib/iterables/series-variable-window-iterable.ts",
									"line": 11,
									"character": 12
								}
							],
							"type": {
								"type": "reference",
								"name": "ComparerFn",
								"id": 371,
								"typeArguments": [
									{
										"type": "typeParameter",
										"name": "ValueT"
									}
								]
							}
						},
						{
							"id": 381,
							"name": "iterable",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "lib/iterables/series-variable-window-iterable.ts",
									"line": 10,
									"character": 12
								}
							],
							"type": {
								"type": "reference",
								"name": "Iterable",
								"typeArguments": [
									{
										"type": "tuple",
										"elements": [
											{
												"type": "typeParameter",
												"name": "IndexT"
											},
											{
												"type": "typeParameter",
												"name": "ValueT"
											}
										]
									}
								]
							}
						},
						{
							"id": 387,
							"name": "__@iterator",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 388,
									"name": "__@iterator",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Iterator",
										"typeArguments": [
											{
												"type": "reference",
												"name": "ISeries",
												"id": 2287,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "IndexT"
													},
													{
														"type": "typeParameter",
														"name": "ValueT"
													}
												]
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/iterables/series-variable-window-iterable.ts",
									"line": 18,
									"character": 21
								}
							]
						}
					],
					"groups": [
						{
							"title": "Constructors",
							"kind": 512,
							"children": [
								383
							]
						},
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								382,
								381
							]
						},
						{
							"title": "Methods",
							"kind": 2048,
							"children": [
								387
							]
						}
					],
					"sources": [
						{
							"fileName": "lib/iterables/series-variable-window-iterable.ts",
							"line": 8,
							"character": 41
						}
					],
					"implementedTypes": [
						{
							"type": "reference",
							"name": "Iterable",
							"typeArguments": [
								{
									"type": "reference",
									"name": "ISeries",
									"id": 2287,
									"typeArguments": [
										{
											"type": "typeParameter",
											"name": "IndexT"
										},
										{
											"type": "typeParameter",
											"name": "ValueT"
										}
									]
								}
							]
						}
					]
				}
			],
			"groups": [
				{
					"title": "Classes",
					"kind": 128,
					"children": [
						378
					]
				}
			],
			"sources": [
				{
					"fileName": "lib/iterables/series-variable-window-iterable.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 250,
			"name": "\"lib/iterables/series-window-iterable\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "C:/projects/github/data-forge/data-forge-ts/src/lib/iterables/series-window-iterable.ts",
			"children": [
				{
					"id": 251,
					"name": "SeriesWindowIterable",
					"kind": 128,
					"kindString": "Class",
					"flags": {
						"isExported": true
					},
					"typeParameter": [
						{
							"id": 252,
							"name": "IndexT",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {}
						},
						{
							"id": 253,
							"name": "ValueT",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {}
						}
					],
					"children": [
						{
							"id": 256,
							"name": "constructor",
							"kind": 512,
							"kindString": "Constructor",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 257,
									"name": "new SeriesWindowIterable",
									"kind": 16384,
									"kindString": "Constructor signature",
									"flags": {},
									"parameters": [
										{
											"id": 258,
											"name": "iterable",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Iterable",
												"typeArguments": [
													{
														"type": "tuple",
														"elements": [
															{
																"type": "typeParameter",
																"name": "IndexT"
															},
															{
																"type": "typeParameter",
																"name": "ValueT"
															}
														]
													}
												]
											}
										},
										{
											"id": 259,
											"name": "period",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "SeriesWindowIterable",
										"id": 251
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/iterables/series-window-iterable.ts",
									"line": 11,
									"character": 19
								}
							]
						},
						{
							"id": 254,
							"name": "iterable",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "lib/iterables/series-window-iterable.ts",
									"line": 10,
									"character": 12
								}
							],
							"type": {
								"type": "reference",
								"name": "Iterable",
								"typeArguments": [
									{
										"type": "tuple",
										"elements": [
											{
												"type": "typeParameter",
												"name": "IndexT"
											},
											{
												"type": "typeParameter",
												"name": "ValueT"
											}
										]
									}
								]
							}
						},
						{
							"id": 255,
							"name": "period",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "lib/iterables/series-window-iterable.ts",
									"line": 11,
									"character": 10
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						},
						{
							"id": 260,
							"name": "__@iterator",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 261,
									"name": "__@iterator",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Iterator",
										"typeArguments": [
											{
												"type": "reference",
												"name": "ISeries",
												"id": 2287,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "IndexT"
													},
													{
														"type": "typeParameter",
														"name": "ValueT"
													}
												]
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/iterables/series-window-iterable.ts",
									"line": 18,
									"character": 21
								}
							]
						}
					],
					"groups": [
						{
							"title": "Constructors",
							"kind": 512,
							"children": [
								256
							]
						},
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								254,
								255
							]
						},
						{
							"title": "Methods",
							"kind": 2048,
							"children": [
								260
							]
						}
					],
					"sources": [
						{
							"fileName": "lib/iterables/series-window-iterable.ts",
							"line": 8,
							"character": 33
						}
					],
					"implementedTypes": [
						{
							"type": "reference",
							"name": "Iterable",
							"typeArguments": [
								{
									"type": "reference",
									"name": "ISeries",
									"id": 2287,
									"typeArguments": [
										{
											"type": "typeParameter",
											"name": "IndexT"
										},
										{
											"type": "typeParameter",
											"name": "ValueT"
										}
									]
								}
							]
						}
					]
				}
			],
			"groups": [
				{
					"title": "Classes",
					"kind": 128,
					"children": [
						251
					]
				}
			],
			"sources": [
				{
					"fileName": "lib/iterables/series-window-iterable.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 227,
			"name": "\"lib/iterables/skip-iterable\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "C:/projects/github/data-forge/data-forge-ts/src/lib/iterables/skip-iterable.ts",
			"children": [
				{
					"id": 228,
					"name": "SkipIterable",
					"kind": 128,
					"kindString": "Class",
					"flags": {
						"isExported": true
					},
					"children": [
						{
							"id": 231,
							"name": "constructor",
							"kind": 512,
							"kindString": "Constructor",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 232,
									"name": "new SkipIterable",
									"kind": 16384,
									"kindString": "Constructor signature",
									"flags": {},
									"parameters": [
										{
											"id": 233,
											"name": "iterable",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Iterable",
												"typeArguments": [
													{
														"type": "intrinsic",
														"name": "any"
													}
												]
											}
										},
										{
											"id": 234,
											"name": "numValues",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "SkipIterable",
										"id": 228
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/iterables/skip-iterable.ts",
									"line": 10,
									"character": 22
								}
							]
						},
						{
							"id": 229,
							"name": "iterable",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "lib/iterables/skip-iterable.ts",
									"line": 9,
									"character": 12
								}
							],
							"type": {
								"type": "reference",
								"name": "Iterable",
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "any"
									}
								]
							}
						},
						{
							"id": 230,
							"name": "numValues",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "lib/iterables/skip-iterable.ts",
									"line": 10,
									"character": 13
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						},
						{
							"id": 235,
							"name": "__@iterator",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 236,
									"name": "__@iterator",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Iterator",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "any"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/iterables/skip-iterable.ts",
									"line": 17,
									"character": 21
								}
							]
						}
					],
					"groups": [
						{
							"title": "Constructors",
							"kind": 512,
							"children": [
								231
							]
						},
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								229,
								230
							]
						},
						{
							"title": "Methods",
							"kind": 2048,
							"children": [
								235
							]
						}
					],
					"sources": [
						{
							"fileName": "lib/iterables/skip-iterable.ts",
							"line": 7,
							"character": 25
						}
					],
					"implementedTypes": [
						{
							"type": "reference",
							"name": "Iterable",
							"typeArguments": [
								{
									"type": "intrinsic",
									"name": "any"
								}
							]
						}
					]
				}
			],
			"groups": [
				{
					"title": "Classes",
					"kind": 128,
					"children": [
						228
					]
				}
			],
			"sources": [
				{
					"fileName": "lib/iterables/skip-iterable.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 462,
			"name": "\"lib/iterables/skip-while-iterable\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "C:/projects/github/data-forge/data-forge-ts/src/lib/iterables/skip-while-iterable.ts",
			"children": [
				{
					"id": 463,
					"name": "SkipWhileIterable",
					"kind": 128,
					"kindString": "Class",
					"flags": {
						"isExported": true
					},
					"typeParameter": [
						{
							"id": 464,
							"name": "T",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {}
						}
					],
					"children": [
						{
							"id": 467,
							"name": "constructor",
							"kind": 512,
							"kindString": "Constructor",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 468,
									"name": "new SkipWhileIterable",
									"kind": 16384,
									"kindString": "Constructor signature",
									"flags": {},
									"parameters": [
										{
											"id": 469,
											"name": "childIterable",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Iterable",
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "T"
													}
												]
											}
										},
										{
											"id": 470,
											"name": "predicate",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "PredicateFn",
												"id": 152,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "T"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "SkipWhileIterable",
										"id": 463
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/iterables/skip-while-iterable.ts",
									"line": 10,
									"character": 30
								}
							]
						},
						{
							"id": 465,
							"name": "childIterable",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "lib/iterables/skip-while-iterable.ts",
									"line": 9,
									"character": 17
								}
							],
							"type": {
								"type": "reference",
								"name": "Iterable",
								"typeArguments": [
									{
										"type": "typeParameter",
										"name": "T"
									}
								]
							}
						},
						{
							"id": 466,
							"name": "predicate",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "lib/iterables/skip-while-iterable.ts",
									"line": 10,
									"character": 13
								}
							],
							"type": {
								"type": "reference",
								"name": "PredicateFn",
								"id": 152,
								"typeArguments": [
									{
										"type": "typeParameter",
										"name": "T"
									}
								]
							}
						},
						{
							"id": 471,
							"name": "__@iterator",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 472,
									"name": "__@iterator",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Iterator",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "any"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/iterables/skip-while-iterable.ts",
									"line": 17,
									"character": 21
								}
							]
						}
					],
					"groups": [
						{
							"title": "Constructors",
							"kind": 512,
							"children": [
								467
							]
						},
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								465,
								466
							]
						},
						{
							"title": "Methods",
							"kind": 2048,
							"children": [
								471
							]
						}
					],
					"sources": [
						{
							"fileName": "lib/iterables/skip-while-iterable.ts",
							"line": 7,
							"character": 30
						}
					],
					"implementedTypes": [
						{
							"type": "reference",
							"name": "Iterable",
							"typeArguments": [
								{
									"type": "typeParameter",
									"name": "T"
								}
							]
						}
					]
				}
			],
			"groups": [
				{
					"title": "Classes",
					"kind": 128,
					"children": [
						463
					]
				}
			],
			"sources": [
				{
					"fileName": "lib/iterables/skip-while-iterable.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 129,
			"name": "\"lib/iterables/take-iterable\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "C:/projects/github/data-forge/data-forge-ts/src/lib/iterables/take-iterable.ts",
			"children": [
				{
					"id": 130,
					"name": "TakeIterable",
					"kind": 128,
					"kindString": "Class",
					"flags": {
						"isExported": true
					},
					"typeParameter": [
						{
							"id": 131,
							"name": "T",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {}
						}
					],
					"children": [
						{
							"id": 134,
							"name": "constructor",
							"kind": 512,
							"kindString": "Constructor",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 135,
									"name": "new TakeIterable",
									"kind": 16384,
									"kindString": "Constructor signature",
									"flags": {},
									"parameters": [
										{
											"id": 136,
											"name": "childIterable",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Iterable",
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "T"
													}
												]
											}
										},
										{
											"id": 137,
											"name": "numElements",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "TakeIterable",
										"id": 130
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/iterables/take-iterable.ts",
									"line": 10,
									"character": 24
								}
							]
						},
						{
							"id": 132,
							"name": "childIterable",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "lib/iterables/take-iterable.ts",
									"line": 9,
									"character": 17
								}
							],
							"type": {
								"type": "reference",
								"name": "Iterable",
								"typeArguments": [
									{
										"type": "typeParameter",
										"name": "T"
									}
								]
							}
						},
						{
							"id": 133,
							"name": "numElements",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "lib/iterables/take-iterable.ts",
									"line": 10,
									"character": 15
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						},
						{
							"id": 138,
							"name": "__@iterator",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 139,
									"name": "__@iterator",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Iterator",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "any"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/iterables/take-iterable.ts",
									"line": 17,
									"character": 21
								}
							]
						}
					],
					"groups": [
						{
							"title": "Constructors",
							"kind": 512,
							"children": [
								134
							]
						},
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								132,
								133
							]
						},
						{
							"title": "Methods",
							"kind": 2048,
							"children": [
								138
							]
						}
					],
					"sources": [
						{
							"fileName": "lib/iterables/take-iterable.ts",
							"line": 7,
							"character": 25
						}
					],
					"implementedTypes": [
						{
							"type": "reference",
							"name": "Iterable",
							"typeArguments": [
								{
									"type": "typeParameter",
									"name": "T"
								}
							]
						}
					]
				}
			],
			"groups": [
				{
					"title": "Classes",
					"kind": 128,
					"children": [
						130
					]
				}
			],
			"sources": [
				{
					"fileName": "lib/iterables/take-iterable.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 157,
			"name": "\"lib/iterables/take-while-iterable\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "C:/projects/github/data-forge/data-forge-ts/src/lib/iterables/take-while-iterable.ts",
			"children": [
				{
					"id": 158,
					"name": "TakeWhileIterable",
					"kind": 128,
					"kindString": "Class",
					"flags": {
						"isExported": true
					},
					"typeParameter": [
						{
							"id": 159,
							"name": "T",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {}
						}
					],
					"children": [
						{
							"id": 162,
							"name": "constructor",
							"kind": 512,
							"kindString": "Constructor",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 163,
									"name": "new TakeWhileIterable",
									"kind": 16384,
									"kindString": "Constructor signature",
									"flags": {},
									"parameters": [
										{
											"id": 164,
											"name": "childIterable",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Iterable",
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "T"
													}
												]
											}
										},
										{
											"id": 165,
											"name": "predicate",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "PredicateFn",
												"id": 152,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "T"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "TakeWhileIterable",
										"id": 158
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/iterables/take-while-iterable.ts",
									"line": 10,
									"character": 30
								}
							]
						},
						{
							"id": 160,
							"name": "childIterable",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "lib/iterables/take-while-iterable.ts",
									"line": 9,
									"character": 17
								}
							],
							"type": {
								"type": "reference",
								"name": "Iterable",
								"typeArguments": [
									{
										"type": "typeParameter",
										"name": "T"
									}
								]
							}
						},
						{
							"id": 161,
							"name": "predicate",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "lib/iterables/take-while-iterable.ts",
									"line": 10,
									"character": 13
								}
							],
							"type": {
								"type": "reference",
								"name": "PredicateFn",
								"id": 152,
								"typeArguments": [
									{
										"type": "typeParameter",
										"name": "T"
									}
								]
							}
						},
						{
							"id": 166,
							"name": "__@iterator",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 167,
									"name": "__@iterator",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Iterator",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "any"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/iterables/take-while-iterable.ts",
									"line": 17,
									"character": 21
								}
							]
						}
					],
					"groups": [
						{
							"title": "Constructors",
							"kind": 512,
							"children": [
								162
							]
						},
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								160,
								161
							]
						},
						{
							"title": "Methods",
							"kind": 2048,
							"children": [
								166
							]
						}
					],
					"sources": [
						{
							"fileName": "lib/iterables/take-while-iterable.ts",
							"line": 7,
							"character": 30
						}
					],
					"implementedTypes": [
						{
							"type": "reference",
							"name": "Iterable",
							"typeArguments": [
								{
									"type": "typeParameter",
									"name": "T"
								}
							]
						}
					]
				}
			],
			"groups": [
				{
					"title": "Classes",
					"kind": 128,
					"children": [
						158
					]
				}
			],
			"sources": [
				{
					"fileName": "lib/iterables/take-while-iterable.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 184,
			"name": "\"lib/iterables/where-iterable\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "C:/projects/github/data-forge/data-forge-ts/src/lib/iterables/where-iterable.ts",
			"children": [
				{
					"id": 185,
					"name": "WhereIterable",
					"kind": 128,
					"kindString": "Class",
					"flags": {
						"isExported": true
					},
					"typeParameter": [
						{
							"id": 186,
							"name": "T",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {}
						}
					],
					"children": [
						{
							"id": 189,
							"name": "constructor",
							"kind": 512,
							"kindString": "Constructor",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 190,
									"name": "new WhereIterable",
									"kind": 16384,
									"kindString": "Constructor signature",
									"flags": {},
									"parameters": [
										{
											"id": 191,
											"name": "childIterable",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Iterable",
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "T"
													}
												]
											}
										},
										{
											"id": 192,
											"name": "predicate",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "PredicateFn",
												"id": 152,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "T"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "WhereIterable",
										"id": 185
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/iterables/where-iterable.ts",
									"line": 10,
									"character": 30
								}
							]
						},
						{
							"id": 187,
							"name": "childIterable",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "lib/iterables/where-iterable.ts",
									"line": 9,
									"character": 17
								}
							],
							"type": {
								"type": "reference",
								"name": "Iterable",
								"typeArguments": [
									{
										"type": "typeParameter",
										"name": "T"
									}
								]
							}
						},
						{
							"id": 188,
							"name": "predicate",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "lib/iterables/where-iterable.ts",
									"line": 10,
									"character": 13
								}
							],
							"type": {
								"type": "reference",
								"name": "PredicateFn",
								"id": 152,
								"typeArguments": [
									{
										"type": "typeParameter",
										"name": "T"
									}
								]
							}
						},
						{
							"id": 193,
							"name": "__@iterator",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 194,
									"name": "__@iterator",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Iterator",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "any"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/iterables/where-iterable.ts",
									"line": 17,
									"character": 21
								}
							]
						}
					],
					"groups": [
						{
							"title": "Constructors",
							"kind": 512,
							"children": [
								189
							]
						},
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								187,
								188
							]
						},
						{
							"title": "Methods",
							"kind": 2048,
							"children": [
								193
							]
						}
					],
					"sources": [
						{
							"fileName": "lib/iterables/where-iterable.ts",
							"line": 7,
							"character": 26
						}
					],
					"implementedTypes": [
						{
							"type": "reference",
							"name": "Iterable",
							"typeArguments": [
								{
									"type": "typeParameter",
									"name": "T"
								}
							]
						}
					]
				}
			],
			"groups": [
				{
					"title": "Classes",
					"kind": 128,
					"children": [
						185
					]
				}
			],
			"sources": [
				{
					"fileName": "lib/iterables/where-iterable.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 289,
			"name": "\"lib/iterables/zip-iterable\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "C:/projects/github/data-forge/data-forge-ts/src/lib/iterables/zip-iterable.ts",
			"children": [
				{
					"id": 290,
					"name": "ZipIterable",
					"kind": 128,
					"kindString": "Class",
					"flags": {
						"isExported": true
					},
					"typeParameter": [
						{
							"id": 291,
							"name": "ValueT",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {}
						},
						{
							"id": 292,
							"name": "ReturnT",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {}
						}
					],
					"children": [
						{
							"id": 295,
							"name": "constructor",
							"kind": 512,
							"kindString": "Constructor",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 296,
									"name": "new ZipIterable",
									"kind": 16384,
									"kindString": "Constructor signature",
									"flags": {},
									"parameters": [
										{
											"id": 297,
											"name": "iterables",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "array",
												"elementType": {
													"type": "reference",
													"name": "Iterable",
													"typeArguments": [
														{
															"type": "typeParameter",
															"name": "ValueT"
														}
													]
												}
											}
										},
										{
											"id": 298,
											"name": "zipper",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "ZipFn",
												"id": 283,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "ValueT"
													},
													{
														"type": "typeParameter",
														"name": "ReturnT"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "ZipIterable",
										"id": 290
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/iterables/zip-iterable.ts",
									"line": 10,
									"character": 35
								}
							]
						},
						{
							"id": 293,
							"name": "iterables",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "lib/iterables/zip-iterable.ts",
									"line": 9,
									"character": 13
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "reference",
									"name": "Iterable",
									"typeArguments": [
										{
											"type": "typeParameter",
											"name": "ValueT"
										}
									]
								}
							}
						},
						{
							"id": 294,
							"name": "zipper",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "lib/iterables/zip-iterable.ts",
									"line": 10,
									"character": 10
								}
							],
							"type": {
								"type": "reference",
								"name": "ZipFn",
								"id": 283,
								"typeArguments": [
									{
										"type": "typeParameter",
										"name": "ValueT"
									},
									{
										"type": "typeParameter",
										"name": "ReturnT"
									}
								]
							}
						},
						{
							"id": 299,
							"name": "__@iterator",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 300,
									"name": "__@iterator",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Iterator",
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "ReturnT"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/iterables/zip-iterable.ts",
									"line": 17,
									"character": 21
								}
							]
						}
					],
					"groups": [
						{
							"title": "Constructors",
							"kind": 512,
							"children": [
								295
							]
						},
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								293,
								294
							]
						},
						{
							"title": "Methods",
							"kind": 2048,
							"children": [
								299
							]
						}
					],
					"sources": [
						{
							"fileName": "lib/iterables/zip-iterable.ts",
							"line": 7,
							"character": 24
						}
					],
					"implementedTypes": [
						{
							"type": "reference",
							"name": "Iterable",
							"typeArguments": [
								{
									"type": "typeParameter",
									"name": "ReturnT"
								}
							]
						}
					]
				}
			],
			"groups": [
				{
					"title": "Classes",
					"kind": 128,
					"children": [
						290
					]
				}
			],
			"sources": [
				{
					"fileName": "lib/iterables/zip-iterable.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 1,
			"name": "\"lib/iterators/array-iterator\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "C:/projects/github/data-forge/data-forge-ts/src/lib/iterators/array-iterator.ts",
			"children": [
				{
					"id": 2,
					"name": "ArrayIterator",
					"kind": 128,
					"kindString": "Class",
					"flags": {
						"isExported": true
					},
					"typeParameter": [
						{
							"id": 3,
							"name": "T",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {}
						}
					],
					"children": [
						{
							"id": 6,
							"name": "constructor",
							"kind": 512,
							"kindString": "Constructor",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 7,
									"name": "new ArrayIterator",
									"kind": 16384,
									"kindString": "Constructor signature",
									"flags": {},
									"parameters": [
										{
											"id": 8,
											"name": "arr",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "array",
												"elementType": {
													"type": "typeParameter",
													"name": "T"
												}
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "ArrayIterator",
										"id": 2
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/iterators/array-iterator.ts",
									"line": 9,
									"character": 22
								}
							]
						},
						{
							"id": 4,
							"name": "arr",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "lib/iterators/array-iterator.ts",
									"line": 7,
									"character": 7
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "typeParameter",
									"name": "T"
								}
							}
						},
						{
							"id": 5,
							"name": "index",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "lib/iterators/array-iterator.ts",
									"line": 9,
									"character": 9
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							},
							"defaultValue": "0"
						},
						{
							"id": 9,
							"name": "next",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 10,
									"name": "next",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "IteratorResult",
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "T"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/iterators/array-iterator.ts",
									"line": 15,
									"character": 8
								}
							]
						}
					],
					"groups": [
						{
							"title": "Constructors",
							"kind": 512,
							"children": [
								6
							]
						},
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								4,
								5
							]
						},
						{
							"title": "Methods",
							"kind": 2048,
							"children": [
								9
							]
						}
					],
					"sources": [
						{
							"fileName": "lib/iterators/array-iterator.ts",
							"line": 5,
							"character": 26
						}
					],
					"implementedTypes": [
						{
							"type": "reference",
							"name": "Iterator",
							"typeArguments": [
								{
									"type": "typeParameter",
									"name": "T"
								}
							]
						}
					]
				}
			],
			"groups": [
				{
					"title": "Classes",
					"kind": 128,
					"children": [
						2
					]
				}
			],
			"sources": [
				{
					"fileName": "lib/iterators/array-iterator.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 588,
			"name": "\"lib/iterators/column-names-iterator\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "C:/projects/github/data-forge/data-forge-ts/src/lib/iterators/column-names-iterator.ts",
			"children": [
				{
					"id": 589,
					"name": "ColumnNamesIterator",
					"kind": 128,
					"kindString": "Class",
					"flags": {
						"isExported": true
					},
					"children": [
						{
							"id": 593,
							"name": "constructor",
							"kind": 512,
							"kindString": "Constructor",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 594,
									"name": "new ColumnNamesIterator",
									"kind": 16384,
									"kindString": "Constructor signature",
									"flags": {},
									"parameters": [
										{
											"id": 595,
											"name": "values",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Iterable",
												"typeArguments": [
													{
														"type": "intrinsic",
														"name": "any"
													}
												]
											}
										},
										{
											"id": 596,
											"name": "considerAllRows",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "boolean"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "ColumnNamesIterator",
										"id": 589
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/iterators/column-names-iterator.ts",
									"line": 11,
									"character": 29
								}
							]
						},
						{
							"id": 590,
							"name": "columnNamesIterator",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "lib/iterators/column-names-iterator.ts",
									"line": 9,
									"character": 23
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "reference",
										"name": "Iterator",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											}
										]
									},
									{
										"type": "intrinsic",
										"name": "null"
									}
								]
							},
							"defaultValue": " null"
						},
						{
							"id": 592,
							"name": "considerAllRows",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "lib/iterators/column-names-iterator.ts",
									"line": 11,
									"character": 19
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						},
						{
							"id": 591,
							"name": "values",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "lib/iterators/column-names-iterator.ts",
									"line": 10,
									"character": 10
								}
							],
							"type": {
								"type": "reference",
								"name": "Iterable",
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "any"
									}
								]
							}
						},
						{
							"id": 597,
							"name": "next",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 598,
									"name": "next",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "IteratorResult",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/iterators/column-names-iterator.ts",
									"line": 18,
									"character": 8
								}
							]
						}
					],
					"groups": [
						{
							"title": "Constructors",
							"kind": 512,
							"children": [
								593
							]
						},
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								590,
								592,
								591
							]
						},
						{
							"title": "Methods",
							"kind": 2048,
							"children": [
								597
							]
						}
					],
					"sources": [
						{
							"fileName": "lib/iterators/column-names-iterator.ts",
							"line": 7,
							"character": 32
						}
					],
					"implementedTypes": [
						{
							"type": "reference",
							"name": "Iterator",
							"typeArguments": [
								{
									"type": "intrinsic",
									"name": "string"
								}
							]
						}
					]
				}
			],
			"groups": [
				{
					"title": "Classes",
					"kind": 128,
					"children": [
						589
					]
				}
			],
			"sources": [
				{
					"fileName": "lib/iterators/column-names-iterator.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 195,
			"name": "\"lib/iterators/concat-iterator\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "C:/projects/github/data-forge/data-forge-ts/src/lib/iterators/concat-iterator.ts",
			"children": [
				{
					"id": 196,
					"name": "ConcatIterator",
					"kind": 128,
					"kindString": "Class",
					"flags": {
						"isExported": true
					},
					"typeParameter": [
						{
							"id": 197,
							"name": "T",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {}
						}
					],
					"children": [
						{
							"id": 201,
							"name": "constructor",
							"kind": 512,
							"kindString": "Constructor",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 202,
									"name": "new ConcatIterator",
									"kind": 16384,
									"kindString": "Constructor signature",
									"flags": {},
									"parameters": [
										{
											"id": 203,
											"name": "iterables",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Iterable",
												"typeArguments": [
													{
														"type": "reference",
														"name": "Iterable",
														"typeArguments": [
															{
																"type": "typeParameter",
																"name": "T"
															}
														]
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "ConcatIterator",
										"id": 196
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/iterators/concat-iterator.ts",
									"line": 9,
									"character": 43
								}
							]
						},
						{
							"id": 200,
							"name": "curIterator",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "lib/iterators/concat-iterator.ts",
									"line": 9,
									"character": 15
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "reference",
										"name": "Iterator",
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "T"
											}
										]
									},
									{
										"type": "intrinsic",
										"name": "null"
									}
								]
							},
							"defaultValue": " null"
						},
						{
							"id": 198,
							"name": "iterables",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "lib/iterators/concat-iterator.ts",
									"line": 7,
									"character": 13
								}
							],
							"type": {
								"type": "reference",
								"name": "Iterable",
								"typeArguments": [
									{
										"type": "reference",
										"name": "Iterable",
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "T"
											}
										]
									}
								]
							}
						},
						{
							"id": 199,
							"name": "iterator",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "lib/iterators/concat-iterator.ts",
									"line": 8,
									"character": 12
								}
							],
							"type": {
								"type": "reference",
								"name": "Iterator",
								"typeArguments": [
									{
										"type": "reference",
										"name": "Iterable",
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "T"
											}
										]
									}
								]
							}
						},
						{
							"id": 204,
							"name": "moveToNextIterable",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPrivate": true,
								"isExported": true
							},
							"signatures": [
								{
									"id": 205,
									"name": "moveToNextIterable",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/iterators/concat-iterator.ts",
									"line": 20,
									"character": 30
								}
							]
						},
						{
							"id": 206,
							"name": "next",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 207,
									"name": "next",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "IteratorResult",
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "T"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/iterators/concat-iterator.ts",
									"line": 30,
									"character": 8
								}
							]
						}
					],
					"groups": [
						{
							"title": "Constructors",
							"kind": 512,
							"children": [
								201
							]
						},
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								200,
								198,
								199
							]
						},
						{
							"title": "Methods",
							"kind": 2048,
							"children": [
								204,
								206
							]
						}
					],
					"sources": [
						{
							"fileName": "lib/iterators/concat-iterator.ts",
							"line": 5,
							"character": 27
						}
					],
					"implementedTypes": [
						{
							"type": "reference",
							"name": "Iterator",
							"typeArguments": [
								{
									"type": "typeParameter",
									"name": "T"
								}
							]
						}
					]
				}
			],
			"groups": [
				{
					"title": "Classes",
					"kind": 128,
					"children": [
						196
					]
				}
			],
			"sources": [
				{
					"fileName": "lib/iterators/concat-iterator.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 28,
			"name": "\"lib/iterators/count-iterator\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "C:/projects/github/data-forge/data-forge-ts/src/lib/iterators/count-iterator.ts",
			"children": [
				{
					"id": 29,
					"name": "CountIterator",
					"kind": 128,
					"kindString": "Class",
					"flags": {
						"isExported": true
					},
					"children": [
						{
							"id": 30,
							"name": "index",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "lib/iterators/count-iterator.ts",
									"line": 8,
									"character": 9
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							},
							"defaultValue": "0"
						},
						{
							"id": 31,
							"name": "next",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 32,
									"name": "next",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "IteratorResult",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "number"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/iterators/count-iterator.ts",
									"line": 10,
									"character": 8
								}
							]
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								30
							]
						},
						{
							"title": "Methods",
							"kind": 2048,
							"children": [
								31
							]
						}
					],
					"sources": [
						{
							"fileName": "lib/iterators/count-iterator.ts",
							"line": 6,
							"character": 26
						}
					],
					"implementedTypes": [
						{
							"type": "reference",
							"name": "Iterator",
							"typeArguments": [
								{
									"type": "intrinsic",
									"name": "number"
								}
							]
						}
					]
				}
			],
			"groups": [
				{
					"title": "Classes",
					"kind": 128,
					"children": [
						29
					]
				}
			],
			"sources": [
				{
					"fileName": "lib/iterators/count-iterator.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 502,
			"name": "\"lib/iterators/csv-rows-iterator\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "C:/projects/github/data-forge/data-forge-ts/src/lib/iterators/csv-rows-iterator.ts",
			"children": [
				{
					"id": 503,
					"name": "CsvRowsIterator",
					"kind": 128,
					"kindString": "Class",
					"flags": {
						"isExported": true
					},
					"children": [
						{
							"id": 507,
							"name": "constructor",
							"kind": 512,
							"kindString": "Constructor",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 508,
									"name": "new CsvRowsIterator",
									"kind": 16384,
									"kindString": "Constructor signature",
									"flags": {},
									"parameters": [
										{
											"id": 509,
											"name": "columnNames",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Iterable",
												"typeArguments": [
													{
														"type": "intrinsic",
														"name": "string"
													}
												]
											}
										},
										{
											"id": 510,
											"name": "rowsIterable",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Iterable",
												"typeArguments": [
													{
														"type": "intrinsic",
														"name": "any"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "CsvRowsIterator",
										"id": 503
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/iterators/csv-rows-iterator.ts",
									"line": 9,
									"character": 22
								}
							]
						},
						{
							"id": 504,
							"name": "columnNames",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "lib/iterators/csv-rows-iterator.ts",
									"line": 7,
									"character": 15
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "intrinsic",
									"name": "string"
								}
							}
						},
						{
							"id": 506,
							"name": "index",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "lib/iterators/csv-rows-iterator.ts",
									"line": 9,
									"character": 9
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							},
							"defaultValue": "0"
						},
						{
							"id": 505,
							"name": "rowsIterator",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "lib/iterators/csv-rows-iterator.ts",
									"line": 8,
									"character": 16
								}
							],
							"type": {
								"type": "reference",
								"name": "Iterator",
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "any"
									}
								]
							}
						},
						{
							"id": 511,
							"name": "next",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 512,
									"name": "next",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "IteratorResult",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "any"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/iterators/csv-rows-iterator.ts",
									"line": 16,
									"character": 8
								}
							]
						}
					],
					"groups": [
						{
							"title": "Constructors",
							"kind": 512,
							"children": [
								507
							]
						},
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								504,
								506,
								505
							]
						},
						{
							"title": "Methods",
							"kind": 2048,
							"children": [
								511
							]
						}
					],
					"sources": [
						{
							"fileName": "lib/iterators/csv-rows-iterator.ts",
							"line": 5,
							"character": 28
						}
					],
					"implementedTypes": [
						{
							"type": "reference",
							"name": "Iterator",
							"typeArguments": [
								{
									"type": "intrinsic",
									"name": "any"
								}
							]
						}
					]
				}
			],
			"groups": [
				{
					"title": "Classes",
					"kind": 128,
					"children": [
						503
					]
				}
			],
			"sources": [
				{
					"fileName": "lib/iterators/csv-rows-iterator.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 523,
			"name": "\"lib/iterators/dataframe-rolling-window-iterator\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "C:/projects/github/data-forge/data-forge-ts/src/lib/iterators/dataframe-rolling-window-iterator.ts",
			"children": [
				{
					"id": 524,
					"name": "DataFrameRollingWindowIterator",
					"kind": 128,
					"kindString": "Class",
					"flags": {
						"isExported": true
					},
					"typeParameter": [
						{
							"id": 525,
							"name": "IndexT",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {}
						},
						{
							"id": 526,
							"name": "ValueT",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {}
						}
					],
					"children": [
						{
							"id": 531,
							"name": "constructor",
							"kind": 512,
							"kindString": "Constructor",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 532,
									"name": "new DataFrameRollingWindowIterator",
									"kind": 16384,
									"kindString": "Constructor signature",
									"flags": {},
									"parameters": [
										{
											"id": 533,
											"name": "columnNames",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Iterable",
												"typeArguments": [
													{
														"type": "intrinsic",
														"name": "string"
													}
												]
											}
										},
										{
											"id": 534,
											"name": "iterable",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Iterable",
												"typeArguments": [
													{
														"type": "tuple",
														"elements": [
															{
																"type": "typeParameter",
																"name": "IndexT"
															},
															{
																"type": "typeParameter",
																"name": "ValueT"
															}
														]
													}
												]
											}
										},
										{
											"id": 535,
											"name": "period",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "DataFrameRollingWindowIterator",
										"id": 524
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/iterators/dataframe-rolling-window-iterator.ts",
									"line": 14,
									"character": 28
								}
							]
						},
						{
							"id": 527,
							"name": "columnNames",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "lib/iterators/dataframe-rolling-window-iterator.ts",
									"line": 11,
									"character": 15
								}
							],
							"type": {
								"type": "reference",
								"name": "Iterable",
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							}
						},
						{
							"id": 528,
							"name": "iterable",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "lib/iterators/dataframe-rolling-window-iterator.ts",
									"line": 12,
									"character": 12
								}
							],
							"type": {
								"type": "reference",
								"name": "Iterable",
								"typeArguments": [
									{
										"type": "tuple",
										"elements": [
											{
												"type": "typeParameter",
												"name": "IndexT"
											},
											{
												"type": "typeParameter",
												"name": "ValueT"
											}
										]
									}
								]
							}
						},
						{
							"id": 529,
							"name": "period",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "lib/iterators/dataframe-rolling-window-iterator.ts",
									"line": 13,
									"character": 10
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						},
						{
							"id": 530,
							"name": "windowIndex",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "lib/iterators/dataframe-rolling-window-iterator.ts",
									"line": 14,
									"character": 15
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							},
							"defaultValue": "0"
						},
						{
							"id": 536,
							"name": "next",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 537,
									"name": "next",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "IteratorResult",
										"typeArguments": [
											{
												"type": "reference",
												"name": "IDataFrame",
												"id": 683,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "IndexT"
													},
													{
														"type": "typeParameter",
														"name": "ValueT"
													}
												]
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/iterators/dataframe-rolling-window-iterator.ts",
									"line": 22,
									"character": 8
								}
							]
						}
					],
					"groups": [
						{
							"title": "Constructors",
							"kind": 512,
							"children": [
								531
							]
						},
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								527,
								528,
								529,
								530
							]
						},
						{
							"title": "Methods",
							"kind": 2048,
							"children": [
								536
							]
						}
					],
					"sources": [
						{
							"fileName": "lib/iterators/dataframe-rolling-window-iterator.ts",
							"line": 9,
							"character": 43
						}
					],
					"implementedTypes": [
						{
							"type": "reference",
							"name": "Iterator",
							"typeArguments": [
								{
									"type": "reference",
									"name": "IDataFrame",
									"id": 683,
									"typeArguments": [
										{
											"type": "typeParameter",
											"name": "IndexT"
										},
										{
											"type": "typeParameter",
											"name": "ValueT"
										}
									]
								}
							]
						}
					]
				}
			],
			"groups": [
				{
					"title": "Classes",
					"kind": 128,
					"children": [
						524
					]
				}
			],
			"sources": [
				{
					"fileName": "lib/iterators/dataframe-rolling-window-iterator.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 552,
			"name": "\"lib/iterators/dataframe-variable-window-iterator\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "C:/projects/github/data-forge/data-forge-ts/src/lib/iterators/dataframe-variable-window-iterator.ts",
			"children": [
				{
					"id": 553,
					"name": "DataFrameVariableWindowIterator",
					"kind": 128,
					"kindString": "Class",
					"flags": {
						"isExported": true
					},
					"typeParameter": [
						{
							"id": 554,
							"name": "IndexT",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {}
						},
						{
							"id": 555,
							"name": "ValueT",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {}
						}
					],
					"children": [
						{
							"id": 561,
							"name": "constructor",
							"kind": 512,
							"kindString": "Constructor",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 562,
									"name": "new DataFrameVariableWindowIterator",
									"kind": 16384,
									"kindString": "Constructor signature",
									"flags": {},
									"parameters": [
										{
											"id": 563,
											"name": "columnNames",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Iterable",
												"typeArguments": [
													{
														"type": "intrinsic",
														"name": "string"
													}
												]
											}
										},
										{
											"id": 564,
											"name": "iterable",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Iterable",
												"typeArguments": [
													{
														"type": "tuple",
														"elements": [
															{
																"type": "typeParameter",
																"name": "IndexT"
															},
															{
																"type": "typeParameter",
																"name": "ValueT"
															}
														]
													}
												]
											}
										},
										{
											"id": 565,
											"name": "comparer",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "ComparerFn",
												"id": 568,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "ValueT"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "DataFrameVariableWindowIterator",
										"id": 553
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/iterators/dataframe-variable-window-iterator.ts",
									"line": 20,
									"character": 28
								}
							]
						},
						{
							"id": 556,
							"name": "columnNames",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "lib/iterators/dataframe-variable-window-iterator.ts",
									"line": 16,
									"character": 15
								}
							],
							"type": {
								"type": "reference",
								"name": "Iterable",
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							}
						},
						{
							"id": 559,
							"name": "comparer",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "lib/iterators/dataframe-variable-window-iterator.ts",
									"line": 19,
									"character": 12
								}
							],
							"type": {
								"type": "reference",
								"name": "ComparerFn",
								"id": 568,
								"typeArguments": [
									{
										"type": "typeParameter",
										"name": "ValueT"
									}
								]
							}
						},
						{
							"id": 557,
							"name": "iterator",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "lib/iterators/dataframe-variable-window-iterator.ts",
									"line": 17,
									"character": 12
								}
							],
							"type": {
								"type": "reference",
								"name": "Iterator",
								"typeArguments": [
									{
										"type": "tuple",
										"elements": [
											{
												"type": "typeParameter",
												"name": "IndexT"
											},
											{
												"type": "typeParameter",
												"name": "ValueT"
											}
										]
									}
								]
							}
						},
						{
							"id": 558,
							"name": "nextValue",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "lib/iterators/dataframe-variable-window-iterator.ts",
									"line": 18,
									"character": 13
								}
							],
							"type": {
								"type": "reference",
								"name": "IteratorResult",
								"typeArguments": [
									{
										"type": "tuple",
										"elements": [
											{
												"type": "typeParameter",
												"name": "IndexT"
											},
											{
												"type": "typeParameter",
												"name": "ValueT"
											}
										]
									}
								]
							}
						},
						{
							"id": 560,
							"name": "windowIndex",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "lib/iterators/dataframe-variable-window-iterator.ts",
									"line": 20,
									"character": 15
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							},
							"defaultValue": "0"
						},
						{
							"id": 566,
							"name": "next",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 567,
									"name": "next",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "IteratorResult",
										"typeArguments": [
											{
												"type": "reference",
												"name": "IDataFrame",
												"id": 683,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "IndexT"
													},
													{
														"type": "typeParameter",
														"name": "ValueT"
													}
												]
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/iterators/dataframe-variable-window-iterator.ts",
									"line": 29,
									"character": 8
								}
							]
						}
					],
					"groups": [
						{
							"title": "Constructors",
							"kind": 512,
							"children": [
								561
							]
						},
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								556,
								559,
								557,
								558,
								560
							]
						},
						{
							"title": "Methods",
							"kind": 2048,
							"children": [
								566
							]
						}
					],
					"sources": [
						{
							"fileName": "lib/iterators/dataframe-variable-window-iterator.ts",
							"line": 14,
							"character": 44
						}
					],
					"implementedTypes": [
						{
							"type": "reference",
							"name": "Iterator",
							"typeArguments": [
								{
									"type": "reference",
									"name": "IDataFrame",
									"id": 683,
									"typeArguments": [
										{
											"type": "typeParameter",
											"name": "IndexT"
										},
										{
											"type": "typeParameter",
											"name": "ValueT"
										}
									]
								}
							]
						}
					]
				},
				{
					"id": 568,
					"name": "ComparerFn",
					"kind": 4194304,
					"kindString": "Type alias",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "Compares to values and returns true if they are equivalent."
					},
					"typeParameter": [
						{
							"id": 569,
							"name": "ValueT",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {}
						}
					],
					"sources": [
						{
							"fileName": "lib/iterators/dataframe-variable-window-iterator.ts",
							"line": 12,
							"character": 22
						}
					],
					"type": {
						"type": "reflection",
						"declaration": {
							"id": 570,
							"name": "__type",
							"kind": 65536,
							"kindString": "Type literal",
							"flags": {},
							"signatures": [
								{
									"id": 571,
									"name": "__call",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 572,
											"name": "a",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "typeParameter",
												"name": "ValueT"
											}
										},
										{
											"id": 573,
											"name": "b",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "typeParameter",
												"name": "ValueT"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/iterators/dataframe-variable-window-iterator.ts",
									"line": 12,
									"character": 32
								}
							]
						}
					}
				}
			],
			"groups": [
				{
					"title": "Classes",
					"kind": 128,
					"children": [
						553
					]
				},
				{
					"title": "Type aliases",
					"kind": 4194304,
					"children": [
						568
					]
				}
			],
			"sources": [
				{
					"fileName": "lib/iterators/dataframe-variable-window-iterator.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 473,
			"name": "\"lib/iterators/dataframe-window-iterator\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "C:/projects/github/data-forge/data-forge-ts/src/lib/iterators/dataframe-window-iterator.ts",
			"children": [
				{
					"id": 474,
					"name": "DataFrameWindowIterator",
					"kind": 128,
					"kindString": "Class",
					"flags": {
						"isExported": true
					},
					"typeParameter": [
						{
							"id": 475,
							"name": "IndexT",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {}
						},
						{
							"id": 476,
							"name": "ValueT",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {}
						}
					],
					"children": [
						{
							"id": 481,
							"name": "constructor",
							"kind": 512,
							"kindString": "Constructor",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 482,
									"name": "new DataFrameWindowIterator",
									"kind": 16384,
									"kindString": "Constructor signature",
									"flags": {},
									"parameters": [
										{
											"id": 483,
											"name": "columnNames",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Iterable",
												"typeArguments": [
													{
														"type": "intrinsic",
														"name": "string"
													}
												]
											}
										},
										{
											"id": 484,
											"name": "iterable",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Iterable",
												"typeArguments": [
													{
														"type": "tuple",
														"elements": [
															{
																"type": "typeParameter",
																"name": "IndexT"
															},
															{
																"type": "typeParameter",
																"name": "ValueT"
															}
														]
													}
												]
											}
										},
										{
											"id": 485,
											"name": "period",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "DataFrameWindowIterator",
										"id": 474
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/iterators/dataframe-window-iterator.ts",
									"line": 14,
									"character": 28
								}
							]
						},
						{
							"id": 477,
							"name": "columnNames",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "lib/iterators/dataframe-window-iterator.ts",
									"line": 11,
									"character": 15
								}
							],
							"type": {
								"type": "reference",
								"name": "Iterable",
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							}
						},
						{
							"id": 478,
							"name": "iterable",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "lib/iterators/dataframe-window-iterator.ts",
									"line": 12,
									"character": 12
								}
							],
							"type": {
								"type": "reference",
								"name": "Iterable",
								"typeArguments": [
									{
										"type": "tuple",
										"elements": [
											{
												"type": "typeParameter",
												"name": "IndexT"
											},
											{
												"type": "typeParameter",
												"name": "ValueT"
											}
										]
									}
								]
							}
						},
						{
							"id": 479,
							"name": "period",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "lib/iterators/dataframe-window-iterator.ts",
									"line": 13,
									"character": 10
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						},
						{
							"id": 480,
							"name": "windowIndex",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "lib/iterators/dataframe-window-iterator.ts",
									"line": 14,
									"character": 15
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							},
							"defaultValue": "0"
						},
						{
							"id": 486,
							"name": "next",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 487,
									"name": "next",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "IteratorResult",
										"typeArguments": [
											{
												"type": "reference",
												"name": "IDataFrame",
												"id": 683,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "IndexT"
													},
													{
														"type": "typeParameter",
														"name": "ValueT"
													}
												]
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/iterators/dataframe-window-iterator.ts",
									"line": 22,
									"character": 8
								}
							]
						}
					],
					"groups": [
						{
							"title": "Constructors",
							"kind": 512,
							"children": [
								481
							]
						},
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								477,
								478,
								479,
								480
							]
						},
						{
							"title": "Methods",
							"kind": 2048,
							"children": [
								486
							]
						}
					],
					"sources": [
						{
							"fileName": "lib/iterators/dataframe-window-iterator.ts",
							"line": 9,
							"character": 36
						}
					],
					"implementedTypes": [
						{
							"type": "reference",
							"name": "Iterator",
							"typeArguments": [
								{
									"type": "reference",
									"name": "IDataFrame",
									"id": 683,
									"typeArguments": [
										{
											"type": "typeParameter",
											"name": "IndexT"
										},
										{
											"type": "typeParameter",
											"name": "ValueT"
										}
									]
								}
							]
						}
					]
				}
			],
			"groups": [
				{
					"title": "Classes",
					"kind": 128,
					"children": [
						474
					]
				}
			],
			"sources": [
				{
					"fileName": "lib/iterators/dataframe-window-iterator.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 301,
			"name": "\"lib/iterators/distinct-iterator\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "C:/projects/github/data-forge/data-forge-ts/src/lib/iterators/distinct-iterator.ts",
			"children": [
				{
					"id": 302,
					"name": "DistinctIterator",
					"kind": 128,
					"kindString": "Class",
					"flags": {
						"isExported": true
					},
					"typeParameter": [
						{
							"id": 303,
							"name": "FromT",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {}
						},
						{
							"id": 304,
							"name": "ToT",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {}
						}
					],
					"children": [
						{
							"id": 308,
							"name": "constructor",
							"kind": 512,
							"kindString": "Constructor",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 309,
									"name": "new DistinctIterator",
									"kind": 16384,
									"kindString": "Constructor signature",
									"flags": {},
									"parameters": [
										{
											"id": 310,
											"name": "iterable",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Iterable",
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "FromT"
													}
												]
											}
										},
										{
											"id": 311,
											"name": "selector",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "reference",
												"name": "SelectorFnNoIndex",
												"id": 314,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "FromT"
													},
													{
														"type": "typeParameter",
														"name": "ToT"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "DistinctIterator",
										"id": 302
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/iterators/distinct-iterator.ts",
									"line": 14,
									"character": 49
								}
							]
						},
						{
							"id": 305,
							"name": "iterator",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "lib/iterators/distinct-iterator.ts",
									"line": 12,
									"character": 12
								}
							],
							"type": {
								"type": "reference",
								"name": "Iterator",
								"typeArguments": [
									{
										"type": "typeParameter",
										"name": "FromT"
									}
								]
							}
						},
						{
							"id": 306,
							"name": "selector",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "lib/iterators/distinct-iterator.ts",
									"line": 13,
									"character": 12
								}
							],
							"type": {
								"type": "reference",
								"name": "SelectorFnNoIndex",
								"id": 314,
								"typeArguments": [
									{
										"type": "typeParameter",
										"name": "FromT"
									},
									{
										"type": "typeParameter",
										"name": "ToT"
									}
								]
							}
						},
						{
							"id": 307,
							"name": "valuesAlreadySeen",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "lib/iterators/distinct-iterator.ts",
									"line": 14,
									"character": 21
								}
							],
							"type": {
								"type": "reference",
								"name": "Set",
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "any"
									}
								]
							},
							"defaultValue": " new Set<any>()"
						},
						{
							"id": 312,
							"name": "next",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 313,
									"name": "next",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "IteratorResult",
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "FromT"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/iterators/distinct-iterator.ts",
									"line": 21,
									"character": 8
								}
							]
						}
					],
					"groups": [
						{
							"title": "Constructors",
							"kind": 512,
							"children": [
								308
							]
						},
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								305,
								306,
								307
							]
						},
						{
							"title": "Methods",
							"kind": 2048,
							"children": [
								312
							]
						}
					],
					"sources": [
						{
							"fileName": "lib/iterators/distinct-iterator.ts",
							"line": 10,
							"character": 29
						}
					],
					"implementedTypes": [
						{
							"type": "reference",
							"name": "Iterator",
							"typeArguments": [
								{
									"type": "typeParameter",
									"name": "FromT"
								}
							]
						}
					]
				},
				{
					"id": 314,
					"name": "SelectorFnNoIndex",
					"kind": 4194304,
					"kindString": "Type alias",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "A selector function with no index. Transforms a value into another kind of value."
					},
					"typeParameter": [
						{
							"id": 315,
							"name": "FromT",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {}
						},
						{
							"id": 316,
							"name": "ToT",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {}
						}
					],
					"sources": [
						{
							"fileName": "lib/iterators/distinct-iterator.ts",
							"line": 8,
							"character": 29
						}
					],
					"type": {
						"type": "reflection",
						"declaration": {
							"id": 317,
							"name": "__type",
							"kind": 65536,
							"kindString": "Type literal",
							"flags": {},
							"signatures": [
								{
									"id": 318,
									"name": "__call",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 319,
											"name": "value",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "typeParameter",
												"name": "FromT"
											}
										}
									],
									"type": {
										"type": "typeParameter",
										"name": "ToT"
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/iterators/distinct-iterator.ts",
									"line": 8,
									"character": 43
								}
							]
						}
					}
				}
			],
			"groups": [
				{
					"title": "Classes",
					"kind": 128,
					"children": [
						302
					]
				},
				{
					"title": "Type aliases",
					"kind": 4194304,
					"children": [
						314
					]
				}
			],
			"sources": [
				{
					"fileName": "lib/iterators/distinct-iterator.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 20,
			"name": "\"lib/iterators/empty-iterator\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "C:/projects/github/data-forge/data-forge-ts/src/lib/iterators/empty-iterator.ts",
			"children": [
				{
					"id": 21,
					"name": "EmptyIterator",
					"kind": 128,
					"kindString": "Class",
					"flags": {
						"isExported": true
					},
					"children": [
						{
							"id": 22,
							"name": "next",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 23,
									"name": "next",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "IteratorResult",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "any"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/iterators/empty-iterator.ts",
									"line": 7,
									"character": 8
								}
							]
						}
					],
					"groups": [
						{
							"title": "Methods",
							"kind": 2048,
							"children": [
								22
							]
						}
					],
					"sources": [
						{
							"fileName": "lib/iterators/empty-iterator.ts",
							"line": 5,
							"character": 26
						}
					],
					"implementedTypes": [
						{
							"type": "reference",
							"name": "Iterator",
							"typeArguments": [
								{
									"type": "intrinsic",
									"name": "any"
								}
							]
						}
					]
				}
			],
			"groups": [
				{
					"title": "Classes",
					"kind": 128,
					"children": [
						21
					]
				}
			],
			"sources": [
				{
					"fileName": "lib/iterators/empty-iterator.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 425,
			"name": "\"lib/iterators/extract-element-iterator\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "C:/projects/github/data-forge/data-forge-ts/src/lib/iterators/extract-element-iterator.ts",
			"children": [
				{
					"id": 426,
					"name": "ExtractElementIterator",
					"kind": 128,
					"kindString": "Class",
					"flags": {
						"isExported": true
					},
					"children": [
						{
							"id": 429,
							"name": "constructor",
							"kind": 512,
							"kindString": "Constructor",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 430,
									"name": "new ExtractElementIterator",
									"kind": 16384,
									"kindString": "Constructor signature",
									"flags": {},
									"parameters": [
										{
											"id": 431,
											"name": "iterator",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Iterator",
												"typeArguments": [
													{
														"type": "array",
														"elementType": {
															"type": "intrinsic",
															"name": "any"
														}
													}
												]
											}
										},
										{
											"id": 432,
											"name": "extractIndex",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "ExtractElementIterator",
										"id": 426
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/iterators/extract-element-iterator.ts",
									"line": 8,
									"character": 25
								}
							]
						},
						{
							"id": 428,
							"name": "extractIndex",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "lib/iterators/extract-element-iterator.ts",
									"line": 8,
									"character": 16
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						},
						{
							"id": 427,
							"name": "iterator",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "lib/iterators/extract-element-iterator.ts",
									"line": 7,
									"character": 12
								}
							],
							"type": {
								"type": "reference",
								"name": "Iterator",
								"typeArguments": [
									{
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "any"
										}
									}
								]
							}
						},
						{
							"id": 433,
							"name": "next",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 434,
									"name": "next",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "IteratorResult",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "any"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/iterators/extract-element-iterator.ts",
									"line": 15,
									"character": 8
								}
							]
						}
					],
					"groups": [
						{
							"title": "Constructors",
							"kind": 512,
							"children": [
								429
							]
						},
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								428,
								427
							]
						},
						{
							"title": "Methods",
							"kind": 2048,
							"children": [
								433
							]
						}
					],
					"sources": [
						{
							"fileName": "lib/iterators/extract-element-iterator.ts",
							"line": 5,
							"character": 35
						}
					],
					"implementedTypes": [
						{
							"type": "reference",
							"name": "Iterator",
							"typeArguments": [
								{
									"type": "intrinsic",
									"name": "any"
								}
							]
						}
					]
				}
			],
			"groups": [
				{
					"title": "Classes",
					"kind": 128,
					"children": [
						426
					]
				}
			],
			"sources": [
				{
					"fileName": "lib/iterators/extract-element-iterator.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 37,
			"name": "\"lib/iterators/multi-iterator\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "C:/projects/github/data-forge/data-forge-ts/src/lib/iterators/multi-iterator.ts",
			"children": [
				{
					"id": 38,
					"name": "MultiIterator",
					"kind": 128,
					"kindString": "Class",
					"flags": {
						"isExported": true
					},
					"children": [
						{
							"id": 40,
							"name": "constructor",
							"kind": 512,
							"kindString": "Constructor",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 41,
									"name": "new MultiIterator",
									"kind": 16384,
									"kindString": "Constructor signature",
									"flags": {},
									"parameters": [
										{
											"id": 42,
											"name": "iterators",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "array",
												"elementType": {
													"type": "reference",
													"name": "Iterator",
													"typeArguments": [
														{
															"type": "intrinsic",
															"name": "any"
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "MultiIterator",
										"id": 38
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/iterators/multi-iterator.ts",
									"line": 9,
									"character": 31
								}
							]
						},
						{
							"id": 39,
							"name": "iterators",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "lib/iterators/multi-iterator.ts",
									"line": 9,
									"character": 13
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "reference",
									"name": "Iterator",
									"typeArguments": [
										{
											"type": "intrinsic",
											"name": "any"
										}
									]
								}
							}
						},
						{
							"id": 43,
							"name": "next",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 44,
									"name": "next",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "IteratorResult",
										"typeArguments": [
											{
												"type": "array",
												"elementType": {
													"type": "intrinsic",
													"name": "any"
												}
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/iterators/multi-iterator.ts",
									"line": 15,
									"character": 8
								}
							]
						}
					],
					"groups": [
						{
							"title": "Constructors",
							"kind": 512,
							"children": [
								40
							]
						},
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								39
							]
						},
						{
							"title": "Methods",
							"kind": 2048,
							"children": [
								43
							]
						}
					],
					"sources": [
						{
							"fileName": "lib/iterators/multi-iterator.ts",
							"line": 7,
							"character": 26
						}
					],
					"implementedTypes": [
						{
							"type": "reference",
							"name": "Iterator",
							"typeArguments": [
								{
									"type": "array",
									"elementType": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							]
						}
					]
				}
			],
			"groups": [
				{
					"title": "Classes",
					"kind": 128,
					"children": [
						38
					]
				}
			],
			"sources": [
				{
					"fileName": "lib/iterators/multi-iterator.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 53,
			"name": "\"lib/iterators/select-iterator\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "C:/projects/github/data-forge/data-forge-ts/src/lib/iterators/select-iterator.ts",
			"children": [
				{
					"id": 54,
					"name": "SelectIterator",
					"kind": 128,
					"kindString": "Class",
					"flags": {
						"isExported": true
					},
					"typeParameter": [
						{
							"id": 55,
							"name": "ValueT",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {}
						},
						{
							"id": 56,
							"name": "ToT",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {}
						}
					],
					"children": [
						{
							"id": 60,
							"name": "constructor",
							"kind": 512,
							"kindString": "Constructor",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 61,
									"name": "new SelectIterator",
									"kind": 16384,
									"kindString": "Constructor signature",
									"flags": {},
									"parameters": [
										{
											"id": 62,
											"name": "iterator",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Iterator",
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "ValueT"
													}
												]
											}
										},
										{
											"id": 63,
											"name": "selector",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "SelectorFn",
												"id": 66,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "ValueT"
													},
													{
														"type": "typeParameter",
														"name": "ToT"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "SelectIterator",
										"id": 54
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/iterators/select-iterator.ts",
									"line": 11,
									"character": 22
								}
							]
						},
						{
							"id": 59,
							"name": "index",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "lib/iterators/select-iterator.ts",
									"line": 11,
									"character": 9
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							},
							"defaultValue": "0"
						},
						{
							"id": 57,
							"name": "iterator",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "lib/iterators/select-iterator.ts",
									"line": 9,
									"character": 12
								}
							],
							"type": {
								"type": "reference",
								"name": "Iterator",
								"typeArguments": [
									{
										"type": "typeParameter",
										"name": "ValueT"
									}
								]
							}
						},
						{
							"id": 58,
							"name": "selector",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "lib/iterators/select-iterator.ts",
									"line": 10,
									"character": 12
								}
							],
							"type": {
								"type": "reference",
								"name": "SelectorFn",
								"id": 66,
								"typeArguments": [
									{
										"type": "typeParameter",
										"name": "ValueT"
									},
									{
										"type": "typeParameter",
										"name": "ToT"
									}
								]
							}
						},
						{
							"id": 64,
							"name": "next",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 65,
									"name": "next",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "IteratorResult",
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "ToT"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/iterators/select-iterator.ts",
									"line": 18,
									"character": 8
								}
							]
						}
					],
					"groups": [
						{
							"title": "Constructors",
							"kind": 512,
							"children": [
								60
							]
						},
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								59,
								57,
								58
							]
						},
						{
							"title": "Methods",
							"kind": 2048,
							"children": [
								64
							]
						}
					],
					"sources": [
						{
							"fileName": "lib/iterators/select-iterator.ts",
							"line": 7,
							"character": 27
						}
					],
					"implementedTypes": [
						{
							"type": "reference",
							"name": "Iterator",
							"typeArguments": [
								{
									"type": "typeParameter",
									"name": "ToT"
								}
							]
						}
					]
				},
				{
					"id": 66,
					"name": "SelectorFn",
					"kind": 4194304,
					"kindString": "Type alias",
					"flags": {
						"isExported": true
					},
					"typeParameter": [
						{
							"id": 67,
							"name": "ValueT",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {}
						},
						{
							"id": 68,
							"name": "ToT",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {}
						}
					],
					"sources": [
						{
							"fileName": "lib/iterators/select-iterator.ts",
							"line": 5,
							"character": 22
						}
					],
					"type": {
						"type": "reflection",
						"declaration": {
							"id": 69,
							"name": "__type",
							"kind": 65536,
							"kindString": "Type literal",
							"flags": {},
							"signatures": [
								{
									"id": 70,
									"name": "__call",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 71,
											"name": "value",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "typeParameter",
												"name": "ValueT"
											}
										},
										{
											"id": 72,
											"name": "index",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										}
									],
									"type": {
										"type": "typeParameter",
										"name": "ToT"
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/iterators/select-iterator.ts",
									"line": 5,
									"character": 37
								}
							]
						}
					}
				}
			],
			"groups": [
				{
					"title": "Classes",
					"kind": 128,
					"children": [
						54
					]
				},
				{
					"title": "Type aliases",
					"kind": 4194304,
					"children": [
						66
					]
				}
			],
			"sources": [
				{
					"fileName": "lib/iterators/select-iterator.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 85,
			"name": "\"lib/iterators/select-many-iterator\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "C:/projects/github/data-forge/data-forge-ts/src/lib/iterators/select-many-iterator.ts",
			"children": [
				{
					"id": 86,
					"name": "SelectManyIterator",
					"kind": 128,
					"kindString": "Class",
					"flags": {
						"isExported": true
					},
					"typeParameter": [
						{
							"id": 87,
							"name": "ValueT",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {}
						},
						{
							"id": 88,
							"name": "ToT",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {}
						}
					],
					"children": [
						{
							"id": 93,
							"name": "constructor",
							"kind": 512,
							"kindString": "Constructor",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 94,
									"name": "new SelectManyIterator",
									"kind": 16384,
									"kindString": "Constructor signature",
									"flags": {},
									"parameters": [
										{
											"id": 95,
											"name": "iterator",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Iterator",
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "ValueT"
													}
												]
											}
										},
										{
											"id": 96,
											"name": "selector",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "SelectorFn",
												"id": 99,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "ValueT"
													},
													{
														"type": "typeParameter",
														"name": "ToT"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "SelectManyIterator",
										"id": 86
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/iterators/select-many-iterator.ts",
									"line": 12,
									"character": 22
								}
							]
						},
						{
							"id": 92,
							"name": "index",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "lib/iterators/select-many-iterator.ts",
									"line": 12,
									"character": 9
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							},
							"defaultValue": "0"
						},
						{
							"id": 89,
							"name": "iterator",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "lib/iterators/select-many-iterator.ts",
									"line": 9,
									"character": 12
								}
							],
							"type": {
								"type": "reference",
								"name": "Iterator",
								"typeArguments": [
									{
										"type": "typeParameter",
										"name": "ValueT"
									}
								]
							}
						},
						{
							"id": 90,
							"name": "outputIterator",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "lib/iterators/select-many-iterator.ts",
									"line": 10,
									"character": 18
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "reference",
										"name": "Iterator",
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "ToT"
											}
										]
									},
									{
										"type": "intrinsic",
										"name": "null"
									}
								]
							}
						},
						{
							"id": 91,
							"name": "selector",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "lib/iterators/select-many-iterator.ts",
									"line": 11,
									"character": 12
								}
							],
							"type": {
								"type": "reference",
								"name": "SelectorFn",
								"id": 99,
								"typeArguments": [
									{
										"type": "typeParameter",
										"name": "ValueT"
									},
									{
										"type": "typeParameter",
										"name": "ToT"
									}
								]
							}
						},
						{
							"id": 97,
							"name": "next",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 98,
									"name": "next",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "IteratorResult",
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "ToT"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/iterators/select-many-iterator.ts",
									"line": 20,
									"character": 8
								}
							]
						}
					],
					"groups": [
						{
							"title": "Constructors",
							"kind": 512,
							"children": [
								93
							]
						},
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								92,
								89,
								90,
								91
							]
						},
						{
							"title": "Methods",
							"kind": 2048,
							"children": [
								97
							]
						}
					],
					"sources": [
						{
							"fileName": "lib/iterators/select-many-iterator.ts",
							"line": 7,
							"character": 31
						}
					],
					"implementedTypes": [
						{
							"type": "reference",
							"name": "Iterator",
							"typeArguments": [
								{
									"type": "typeParameter",
									"name": "ToT"
								}
							]
						}
					]
				},
				{
					"id": 99,
					"name": "SelectorFn",
					"kind": 4194304,
					"kindString": "Type alias",
					"flags": {
						"isExported": true
					},
					"typeParameter": [
						{
							"id": 100,
							"name": "ValueT",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {}
						},
						{
							"id": 101,
							"name": "ToT",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {}
						}
					],
					"sources": [
						{
							"fileName": "lib/iterators/select-many-iterator.ts",
							"line": 5,
							"character": 22
						}
					],
					"type": {
						"type": "reflection",
						"declaration": {
							"id": 102,
							"name": "__type",
							"kind": 65536,
							"kindString": "Type literal",
							"flags": {},
							"signatures": [
								{
									"id": 103,
									"name": "__call",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 104,
											"name": "value",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "typeParameter",
												"name": "ValueT"
											}
										},
										{
											"id": 105,
											"name": "index",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Iterable",
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "ToT"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/iterators/select-many-iterator.ts",
									"line": 5,
									"character": 37
								}
							]
						}
					}
				}
			],
			"groups": [
				{
					"title": "Classes",
					"kind": 128,
					"children": [
						86
					]
				},
				{
					"title": "Type aliases",
					"kind": 4194304,
					"children": [
						99
					]
				}
			],
			"sources": [
				{
					"fileName": "lib/iterators/select-many-iterator.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 332,
			"name": "\"lib/iterators/series-rolling-window-iterator\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "C:/projects/github/data-forge/data-forge-ts/src/lib/iterators/series-rolling-window-iterator.ts",
			"children": [
				{
					"id": 333,
					"name": "SeriesRollingWindowIterator",
					"kind": 128,
					"kindString": "Class",
					"flags": {
						"isExported": true
					},
					"typeParameter": [
						{
							"id": 334,
							"name": "IndexT",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {}
						},
						{
							"id": 335,
							"name": "ValueT",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {}
						}
					],
					"children": [
						{
							"id": 339,
							"name": "constructor",
							"kind": 512,
							"kindString": "Constructor",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 340,
									"name": "new SeriesRollingWindowIterator",
									"kind": 16384,
									"kindString": "Constructor signature",
									"flags": {},
									"parameters": [
										{
											"id": 341,
											"name": "iterable",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Iterable",
												"typeArguments": [
													{
														"type": "tuple",
														"elements": [
															{
																"type": "typeParameter",
																"name": "IndexT"
															},
															{
																"type": "typeParameter",
																"name": "ValueT"
															}
														]
													}
												]
											}
										},
										{
											"id": 342,
											"name": "period",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "SeriesRollingWindowIterator",
										"id": 333
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/iterators/series-rolling-window-iterator.ts",
									"line": 13,
									"character": 28
								}
							]
						},
						{
							"id": 336,
							"name": "iterable",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "lib/iterators/series-rolling-window-iterator.ts",
									"line": 11,
									"character": 12
								}
							],
							"type": {
								"type": "reference",
								"name": "Iterable",
								"typeArguments": [
									{
										"type": "tuple",
										"elements": [
											{
												"type": "typeParameter",
												"name": "IndexT"
											},
											{
												"type": "typeParameter",
												"name": "ValueT"
											}
										]
									}
								]
							}
						},
						{
							"id": 337,
							"name": "period",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "lib/iterators/series-rolling-window-iterator.ts",
									"line": 12,
									"character": 10
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						},
						{
							"id": 338,
							"name": "windowIndex",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "lib/iterators/series-rolling-window-iterator.ts",
									"line": 13,
									"character": 15
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							},
							"defaultValue": "0"
						},
						{
							"id": 343,
							"name": "next",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 344,
									"name": "next",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "IteratorResult",
										"typeArguments": [
											{
												"type": "reference",
												"name": "ISeries",
												"id": 2287,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "IndexT"
													},
													{
														"type": "typeParameter",
														"name": "ValueT"
													}
												]
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/iterators/series-rolling-window-iterator.ts",
									"line": 20,
									"character": 8
								}
							]
						}
					],
					"groups": [
						{
							"title": "Constructors",
							"kind": 512,
							"children": [
								339
							]
						},
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								336,
								337,
								338
							]
						},
						{
							"title": "Methods",
							"kind": 2048,
							"children": [
								343
							]
						}
					],
					"sources": [
						{
							"fileName": "lib/iterators/series-rolling-window-iterator.ts",
							"line": 9,
							"character": 40
						}
					],
					"implementedTypes": [
						{
							"type": "reference",
							"name": "Iterator",
							"typeArguments": [
								{
									"type": "reference",
									"name": "ISeries",
									"id": 2287,
									"typeArguments": [
										{
											"type": "typeParameter",
											"name": "IndexT"
										},
										{
											"type": "typeParameter",
											"name": "ValueT"
										}
									]
								}
							]
						}
					]
				}
			],
			"groups": [
				{
					"title": "Classes",
					"kind": 128,
					"children": [
						333
					]
				}
			],
			"sources": [
				{
					"fileName": "lib/iterators/series-rolling-window-iterator.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 357,
			"name": "\"lib/iterators/series-variable-window-iterator\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "C:/projects/github/data-forge/data-forge-ts/src/lib/iterators/series-variable-window-iterator.ts",
			"children": [
				{
					"id": 358,
					"name": "SeriesVariableWindowIterator",
					"kind": 128,
					"kindString": "Class",
					"flags": {
						"isExported": true
					},
					"typeParameter": [
						{
							"id": 359,
							"name": "IndexT",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {}
						},
						{
							"id": 360,
							"name": "ValueT",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {}
						}
					],
					"children": [
						{
							"id": 365,
							"name": "constructor",
							"kind": 512,
							"kindString": "Constructor",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 366,
									"name": "new SeriesVariableWindowIterator",
									"kind": 16384,
									"kindString": "Constructor signature",
									"flags": {},
									"parameters": [
										{
											"id": 367,
											"name": "iterable",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Iterable",
												"typeArguments": [
													{
														"type": "tuple",
														"elements": [
															{
																"type": "typeParameter",
																"name": "IndexT"
															},
															{
																"type": "typeParameter",
																"name": "ValueT"
															}
														]
													}
												]
											}
										},
										{
											"id": 368,
											"name": "comparer",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "ComparerFn",
												"id": 371,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "ValueT"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "SeriesVariableWindowIterator",
										"id": 358
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/iterators/series-variable-window-iterator.ts",
									"line": 19,
									"character": 28
								}
							]
						},
						{
							"id": 363,
							"name": "comparer",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "lib/iterators/series-variable-window-iterator.ts",
									"line": 18,
									"character": 12
								}
							],
							"type": {
								"type": "reference",
								"name": "ComparerFn",
								"id": 371,
								"typeArguments": [
									{
										"type": "typeParameter",
										"name": "ValueT"
									}
								]
							}
						},
						{
							"id": 361,
							"name": "iterator",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "lib/iterators/series-variable-window-iterator.ts",
									"line": 16,
									"character": 12
								}
							],
							"type": {
								"type": "reference",
								"name": "Iterator",
								"typeArguments": [
									{
										"type": "tuple",
										"elements": [
											{
												"type": "typeParameter",
												"name": "IndexT"
											},
											{
												"type": "typeParameter",
												"name": "ValueT"
											}
										]
									}
								]
							}
						},
						{
							"id": 362,
							"name": "nextValue",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "lib/iterators/series-variable-window-iterator.ts",
									"line": 17,
									"character": 13
								}
							],
							"type": {
								"type": "reference",
								"name": "IteratorResult",
								"typeArguments": [
									{
										"type": "tuple",
										"elements": [
											{
												"type": "typeParameter",
												"name": "IndexT"
											},
											{
												"type": "typeParameter",
												"name": "ValueT"
											}
										]
									}
								]
							}
						},
						{
							"id": 364,
							"name": "windowIndex",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "lib/iterators/series-variable-window-iterator.ts",
									"line": 19,
									"character": 15
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							},
							"defaultValue": "0"
						},
						{
							"id": 369,
							"name": "next",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 370,
									"name": "next",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "IteratorResult",
										"typeArguments": [
											{
												"type": "reference",
												"name": "ISeries",
												"id": 2287,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "IndexT"
													},
													{
														"type": "typeParameter",
														"name": "ValueT"
													}
												]
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/iterators/series-variable-window-iterator.ts",
									"line": 27,
									"character": 8
								}
							]
						}
					],
					"groups": [
						{
							"title": "Constructors",
							"kind": 512,
							"children": [
								365
							]
						},
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								363,
								361,
								362,
								364
							]
						},
						{
							"title": "Methods",
							"kind": 2048,
							"children": [
								369
							]
						}
					],
					"sources": [
						{
							"fileName": "lib/iterators/series-variable-window-iterator.ts",
							"line": 14,
							"character": 41
						}
					],
					"implementedTypes": [
						{
							"type": "reference",
							"name": "Iterator",
							"typeArguments": [
								{
									"type": "reference",
									"name": "ISeries",
									"id": 2287,
									"typeArguments": [
										{
											"type": "typeParameter",
											"name": "IndexT"
										},
										{
											"type": "typeParameter",
											"name": "ValueT"
										}
									]
								}
							]
						}
					]
				},
				{
					"id": 371,
					"name": "ComparerFn",
					"kind": 4194304,
					"kindString": "Type alias",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "Compares to values and returns true if they are equivalent."
					},
					"typeParameter": [
						{
							"id": 372,
							"name": "ValueT",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {}
						}
					],
					"sources": [
						{
							"fileName": "lib/iterators/series-variable-window-iterator.ts",
							"line": 12,
							"character": 22
						}
					],
					"type": {
						"type": "reflection",
						"declaration": {
							"id": 373,
							"name": "__type",
							"kind": 65536,
							"kindString": "Type literal",
							"flags": {},
							"signatures": [
								{
									"id": 374,
									"name": "__call",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 375,
											"name": "a",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "typeParameter",
												"name": "ValueT"
											}
										},
										{
											"id": 376,
											"name": "b",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "typeParameter",
												"name": "ValueT"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/iterators/series-variable-window-iterator.ts",
									"line": 12,
									"character": 32
								}
							]
						}
					}
				}
			],
			"groups": [
				{
					"title": "Classes",
					"kind": 128,
					"children": [
						358
					]
				},
				{
					"title": "Type aliases",
					"kind": 4194304,
					"children": [
						371
					]
				}
			],
			"sources": [
				{
					"fileName": "lib/iterators/series-variable-window-iterator.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 237,
			"name": "\"lib/iterators/series-window-iterator\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "C:/projects/github/data-forge/data-forge-ts/src/lib/iterators/series-window-iterator.ts",
			"children": [
				{
					"id": 238,
					"name": "SeriesWindowIterator",
					"kind": 128,
					"kindString": "Class",
					"flags": {
						"isExported": true
					},
					"typeParameter": [
						{
							"id": 239,
							"name": "IndexT",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {}
						},
						{
							"id": 240,
							"name": "ValueT",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {}
						}
					],
					"children": [
						{
							"id": 244,
							"name": "constructor",
							"kind": 512,
							"kindString": "Constructor",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 245,
									"name": "new SeriesWindowIterator",
									"kind": 16384,
									"kindString": "Constructor signature",
									"flags": {},
									"parameters": [
										{
											"id": 246,
											"name": "iterable",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Iterable",
												"typeArguments": [
													{
														"type": "tuple",
														"elements": [
															{
																"type": "typeParameter",
																"name": "IndexT"
															},
															{
																"type": "typeParameter",
																"name": "ValueT"
															}
														]
													}
												]
											}
										},
										{
											"id": 247,
											"name": "period",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "SeriesWindowIterator",
										"id": 238
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/iterators/series-window-iterator.ts",
									"line": 13,
									"character": 28
								}
							]
						},
						{
							"id": 241,
							"name": "iterable",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "lib/iterators/series-window-iterator.ts",
									"line": 11,
									"character": 12
								}
							],
							"type": {
								"type": "reference",
								"name": "Iterable",
								"typeArguments": [
									{
										"type": "tuple",
										"elements": [
											{
												"type": "typeParameter",
												"name": "IndexT"
											},
											{
												"type": "typeParameter",
												"name": "ValueT"
											}
										]
									}
								]
							}
						},
						{
							"id": 242,
							"name": "period",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "lib/iterators/series-window-iterator.ts",
									"line": 12,
									"character": 10
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						},
						{
							"id": 243,
							"name": "windowIndex",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "lib/iterators/series-window-iterator.ts",
									"line": 13,
									"character": 15
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							},
							"defaultValue": "0"
						},
						{
							"id": 248,
							"name": "next",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 249,
									"name": "next",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "IteratorResult",
										"typeArguments": [
											{
												"type": "reference",
												"name": "ISeries",
												"id": 2287,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "IndexT"
													},
													{
														"type": "typeParameter",
														"name": "ValueT"
													}
												]
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/iterators/series-window-iterator.ts",
									"line": 20,
									"character": 8
								}
							]
						}
					],
					"groups": [
						{
							"title": "Constructors",
							"kind": 512,
							"children": [
								244
							]
						},
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								241,
								242,
								243
							]
						},
						{
							"title": "Methods",
							"kind": 2048,
							"children": [
								248
							]
						}
					],
					"sources": [
						{
							"fileName": "lib/iterators/series-window-iterator.ts",
							"line": 9,
							"character": 33
						}
					],
					"implementedTypes": [
						{
							"type": "reference",
							"name": "Iterator",
							"typeArguments": [
								{
									"type": "reference",
									"name": "ISeries",
									"id": 2287,
									"typeArguments": [
										{
											"type": "typeParameter",
											"name": "IndexT"
										},
										{
											"type": "typeParameter",
											"name": "ValueT"
										}
									]
								}
							]
						}
					]
				}
			],
			"groups": [
				{
					"title": "Classes",
					"kind": 128,
					"children": [
						238
					]
				}
			],
			"sources": [
				{
					"fileName": "lib/iterators/series-window-iterator.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 217,
			"name": "\"lib/iterators/skip-iterator\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "C:/projects/github/data-forge/data-forge-ts/src/lib/iterators/skip-iterator.ts",
			"children": [
				{
					"id": 218,
					"name": "SkipIterator",
					"kind": 128,
					"kindString": "Class",
					"flags": {
						"isExported": true
					},
					"children": [
						{
							"id": 221,
							"name": "constructor",
							"kind": 512,
							"kindString": "Constructor",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 222,
									"name": "new SkipIterator",
									"kind": 16384,
									"kindString": "Constructor signature",
									"flags": {},
									"parameters": [
										{
											"id": 223,
											"name": "iterator",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Iterator",
												"typeArguments": [
													{
														"type": "intrinsic",
														"name": "any"
													}
												]
											}
										},
										{
											"id": 224,
											"name": "numValues",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "SkipIterator",
										"id": 218
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/iterators/skip-iterator.ts",
									"line": 8,
									"character": 22
								}
							]
						},
						{
							"id": 219,
							"name": "iterator",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "lib/iterators/skip-iterator.ts",
									"line": 7,
									"character": 12
								}
							],
							"type": {
								"type": "reference",
								"name": "Iterator",
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "any"
									}
								]
							}
						},
						{
							"id": 220,
							"name": "numValues",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "lib/iterators/skip-iterator.ts",
									"line": 8,
									"character": 13
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						},
						{
							"id": 225,
							"name": "next",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 226,
									"name": "next",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "IteratorResult",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "any"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/iterators/skip-iterator.ts",
									"line": 15,
									"character": 8
								}
							]
						}
					],
					"groups": [
						{
							"title": "Constructors",
							"kind": 512,
							"children": [
								221
							]
						},
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								219,
								220
							]
						},
						{
							"title": "Methods",
							"kind": 2048,
							"children": [
								225
							]
						}
					],
					"sources": [
						{
							"fileName": "lib/iterators/skip-iterator.ts",
							"line": 5,
							"character": 25
						}
					],
					"implementedTypes": [
						{
							"type": "reference",
							"name": "Iterator",
							"typeArguments": [
								{
									"type": "intrinsic",
									"name": "any"
								}
							]
						}
					]
				}
			],
			"groups": [
				{
					"title": "Classes",
					"kind": 128,
					"children": [
						218
					]
				}
			],
			"sources": [
				{
					"fileName": "lib/iterators/skip-iterator.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 445,
			"name": "\"lib/iterators/skip-while-iterator\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "C:/projects/github/data-forge/data-forge-ts/src/lib/iterators/skip-while-iterator.ts",
			"children": [
				{
					"id": 446,
					"name": "SkipWhileIterator",
					"kind": 128,
					"kindString": "Class",
					"flags": {
						"isExported": true
					},
					"typeParameter": [
						{
							"id": 447,
							"name": "T",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {}
						}
					],
					"children": [
						{
							"id": 451,
							"name": "constructor",
							"kind": 512,
							"kindString": "Constructor",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 452,
									"name": "new SkipWhileIterator",
									"kind": 16384,
									"kindString": "Constructor signature",
									"flags": {},
									"parameters": [
										{
											"id": 453,
											"name": "childIterator",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Iterator",
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "T"
													}
												]
											}
										},
										{
											"id": 454,
											"name": "predicate",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "PredicateFn",
												"id": 457,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "T"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "SkipWhileIterator",
										"id": 446
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/iterators/skip-while-iterator.ts",
									"line": 14,
									"character": 34
								}
							]
						},
						{
							"id": 448,
							"name": "childIterator",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "lib/iterators/skip-while-iterator.ts",
									"line": 12,
									"character": 17
								}
							],
							"type": {
								"type": "reference",
								"name": "Iterator",
								"typeArguments": [
									{
										"type": "typeParameter",
										"name": "T"
									}
								]
							}
						},
						{
							"id": 450,
							"name": "doneSkipping",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "lib/iterators/skip-while-iterator.ts",
									"line": 14,
									"character": 16
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							},
							"defaultValue": "false"
						},
						{
							"id": 449,
							"name": "predicate",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "lib/iterators/skip-while-iterator.ts",
									"line": 13,
									"character": 13
								}
							],
							"type": {
								"type": "reference",
								"name": "PredicateFn",
								"id": 457,
								"typeArguments": [
									{
										"type": "typeParameter",
										"name": "T"
									}
								]
							}
						},
						{
							"id": 455,
							"name": "next",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 456,
									"name": "next",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "IteratorResult",
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "T"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/iterators/skip-while-iterator.ts",
									"line": 21,
									"character": 8
								}
							]
						}
					],
					"groups": [
						{
							"title": "Constructors",
							"kind": 512,
							"children": [
								451
							]
						},
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								448,
								450,
								449
							]
						},
						{
							"title": "Methods",
							"kind": 2048,
							"children": [
								455
							]
						}
					],
					"sources": [
						{
							"fileName": "lib/iterators/skip-while-iterator.ts",
							"line": 10,
							"character": 30
						}
					],
					"implementedTypes": [
						{
							"type": "reference",
							"name": "Iterator",
							"typeArguments": [
								{
									"type": "typeParameter",
									"name": "T"
								}
							]
						}
					]
				},
				{
					"id": 457,
					"name": "PredicateFn",
					"kind": 4194304,
					"kindString": "Type alias",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "A predicate function, returns true or false based on input."
					},
					"typeParameter": [
						{
							"id": 458,
							"name": "InputT",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {}
						}
					],
					"sources": [
						{
							"fileName": "lib/iterators/skip-while-iterator.ts",
							"line": 8,
							"character": 23
						}
					],
					"type": {
						"type": "reflection",
						"declaration": {
							"id": 459,
							"name": "__type",
							"kind": 65536,
							"kindString": "Type literal",
							"flags": {},
							"signatures": [
								{
									"id": 460,
									"name": "__call",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 461,
											"name": "value",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "typeParameter",
												"name": "InputT"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/iterators/skip-while-iterator.ts",
									"line": 8,
									"character": 33
								}
							]
						}
					}
				}
			],
			"groups": [
				{
					"title": "Classes",
					"kind": 128,
					"children": [
						446
					]
				},
				{
					"title": "Type aliases",
					"kind": 4194304,
					"children": [
						457
					]
				}
			],
			"sources": [
				{
					"fileName": "lib/iterators/skip-while-iterator.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 118,
			"name": "\"lib/iterators/take-iterator\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "C:/projects/github/data-forge/data-forge-ts/src/lib/iterators/take-iterator.ts",
			"children": [
				{
					"id": 119,
					"name": "TakeIterator",
					"kind": 128,
					"kindString": "Class",
					"flags": {
						"isExported": true
					},
					"typeParameter": [
						{
							"id": 120,
							"name": "T",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {}
						}
					],
					"children": [
						{
							"id": 123,
							"name": "constructor",
							"kind": 512,
							"kindString": "Constructor",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 124,
									"name": "new TakeIterator",
									"kind": 16384,
									"kindString": "Constructor signature",
									"flags": {},
									"parameters": [
										{
											"id": 125,
											"name": "childIterator",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Iterator",
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "T"
													}
												]
											}
										},
										{
											"id": 126,
											"name": "numElements",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "TakeIterator",
										"id": 119
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/iterators/take-iterator.ts",
									"line": 8,
									"character": 24
								}
							]
						},
						{
							"id": 121,
							"name": "childIterator",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "lib/iterators/take-iterator.ts",
									"line": 7,
									"character": 17
								}
							],
							"type": {
								"type": "reference",
								"name": "Iterator",
								"typeArguments": [
									{
										"type": "typeParameter",
										"name": "T"
									}
								]
							}
						},
						{
							"id": 122,
							"name": "numElements",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "lib/iterators/take-iterator.ts",
									"line": 8,
									"character": 15
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						},
						{
							"id": 127,
							"name": "next",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 128,
									"name": "next",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "IteratorResult",
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "T"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/iterators/take-iterator.ts",
									"line": 15,
									"character": 8
								}
							]
						}
					],
					"groups": [
						{
							"title": "Constructors",
							"kind": 512,
							"children": [
								123
							]
						},
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								121,
								122
							]
						},
						{
							"title": "Methods",
							"kind": 2048,
							"children": [
								127
							]
						}
					],
					"sources": [
						{
							"fileName": "lib/iterators/take-iterator.ts",
							"line": 5,
							"character": 25
						}
					],
					"implementedTypes": [
						{
							"type": "reference",
							"name": "Iterator",
							"typeArguments": [
								{
									"type": "typeParameter",
									"name": "T"
								}
							]
						}
					]
				}
			],
			"groups": [
				{
					"title": "Classes",
					"kind": 128,
					"children": [
						119
					]
				}
			],
			"sources": [
				{
					"fileName": "lib/iterators/take-iterator.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 140,
			"name": "\"lib/iterators/take-while-iterator\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "C:/projects/github/data-forge/data-forge-ts/src/lib/iterators/take-while-iterator.ts",
			"children": [
				{
					"id": 141,
					"name": "TakeWhileIterator",
					"kind": 128,
					"kindString": "Class",
					"flags": {
						"isExported": true
					},
					"typeParameter": [
						{
							"id": 142,
							"name": "T",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {}
						}
					],
					"children": [
						{
							"id": 146,
							"name": "constructor",
							"kind": 512,
							"kindString": "Constructor",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 147,
									"name": "new TakeWhileIterator",
									"kind": 16384,
									"kindString": "Constructor signature",
									"flags": {},
									"parameters": [
										{
											"id": 148,
											"name": "childIterator",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Iterator",
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "T"
													}
												]
											}
										},
										{
											"id": 149,
											"name": "predicate",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "PredicateFn",
												"id": 152,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "T"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "TakeWhileIterator",
										"id": 141
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/iterators/take-while-iterator.ts",
									"line": 14,
									"character": 26
								}
							]
						},
						{
							"id": 143,
							"name": "childIterator",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "lib/iterators/take-while-iterator.ts",
									"line": 12,
									"character": 17
								}
							],
							"type": {
								"type": "reference",
								"name": "Iterator",
								"typeArguments": [
									{
										"type": "typeParameter",
										"name": "T"
									}
								]
							}
						},
						{
							"id": 145,
							"name": "done",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "lib/iterators/take-while-iterator.ts",
									"line": 14,
									"character": 8
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							},
							"defaultValue": "false"
						},
						{
							"id": 144,
							"name": "predicate",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "lib/iterators/take-while-iterator.ts",
									"line": 13,
									"character": 13
								}
							],
							"type": {
								"type": "reference",
								"name": "PredicateFn",
								"id": 152,
								"typeArguments": [
									{
										"type": "typeParameter",
										"name": "T"
									}
								]
							}
						},
						{
							"id": 150,
							"name": "next",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 151,
									"name": "next",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "IteratorResult",
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "T"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/iterators/take-while-iterator.ts",
									"line": 21,
									"character": 8
								}
							]
						}
					],
					"groups": [
						{
							"title": "Constructors",
							"kind": 512,
							"children": [
								146
							]
						},
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								143,
								145,
								144
							]
						},
						{
							"title": "Methods",
							"kind": 2048,
							"children": [
								150
							]
						}
					],
					"sources": [
						{
							"fileName": "lib/iterators/take-while-iterator.ts",
							"line": 10,
							"character": 30
						}
					],
					"implementedTypes": [
						{
							"type": "reference",
							"name": "Iterator",
							"typeArguments": [
								{
									"type": "typeParameter",
									"name": "T"
								}
							]
						}
					]
				},
				{
					"id": 152,
					"name": "PredicateFn",
					"kind": 4194304,
					"kindString": "Type alias",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "A predicate function, returns true or false based on input."
					},
					"typeParameter": [
						{
							"id": 153,
							"name": "InputT",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {}
						}
					],
					"sources": [
						{
							"fileName": "lib/iterators/take-while-iterator.ts",
							"line": 8,
							"character": 23
						}
					],
					"type": {
						"type": "reflection",
						"declaration": {
							"id": 154,
							"name": "__type",
							"kind": 65536,
							"kindString": "Type literal",
							"flags": {},
							"signatures": [
								{
									"id": 155,
									"name": "__call",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 156,
											"name": "value",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "typeParameter",
												"name": "InputT"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/iterators/take-while-iterator.ts",
									"line": 8,
									"character": 33
								}
							]
						}
					}
				}
			],
			"groups": [
				{
					"title": "Classes",
					"kind": 128,
					"children": [
						141
					]
				},
				{
					"title": "Type aliases",
					"kind": 4194304,
					"children": [
						152
					]
				}
			],
			"sources": [
				{
					"fileName": "lib/iterators/take-while-iterator.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 168,
			"name": "\"lib/iterators/where-iterator\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "C:/projects/github/data-forge/data-forge-ts/src/lib/iterators/where-iterator.ts",
			"children": [
				{
					"id": 169,
					"name": "WhereIterator",
					"kind": 128,
					"kindString": "Class",
					"flags": {
						"isExported": true
					},
					"typeParameter": [
						{
							"id": 170,
							"name": "T",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {}
						}
					],
					"children": [
						{
							"id": 173,
							"name": "constructor",
							"kind": 512,
							"kindString": "Constructor",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 174,
									"name": "new WhereIterator",
									"kind": 16384,
									"kindString": "Constructor signature",
									"flags": {},
									"parameters": [
										{
											"id": 175,
											"name": "childIterator",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Iterator",
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "T"
													}
												]
											}
										},
										{
											"id": 176,
											"name": "predicate",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "PredicateFn",
												"id": 179,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "T"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "WhereIterator",
										"id": 169
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/iterators/where-iterator.ts",
									"line": 13,
									"character": 30
								}
							]
						},
						{
							"id": 171,
							"name": "childIterator",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "lib/iterators/where-iterator.ts",
									"line": 12,
									"character": 17
								}
							],
							"type": {
								"type": "reference",
								"name": "Iterator",
								"typeArguments": [
									{
										"type": "typeParameter",
										"name": "T"
									}
								]
							}
						},
						{
							"id": 172,
							"name": "predicate",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "lib/iterators/where-iterator.ts",
									"line": 13,
									"character": 13
								}
							],
							"type": {
								"type": "reference",
								"name": "PredicateFn",
								"id": 179,
								"typeArguments": [
									{
										"type": "typeParameter",
										"name": "T"
									}
								]
							}
						},
						{
							"id": 177,
							"name": "next",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 178,
									"name": "next",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "IteratorResult",
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "T"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/iterators/where-iterator.ts",
									"line": 20,
									"character": 8
								}
							]
						}
					],
					"groups": [
						{
							"title": "Constructors",
							"kind": 512,
							"children": [
								173
							]
						},
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								171,
								172
							]
						},
						{
							"title": "Methods",
							"kind": 2048,
							"children": [
								177
							]
						}
					],
					"sources": [
						{
							"fileName": "lib/iterators/where-iterator.ts",
							"line": 10,
							"character": 26
						}
					],
					"implementedTypes": [
						{
							"type": "reference",
							"name": "Iterator",
							"typeArguments": [
								{
									"type": "typeParameter",
									"name": "T"
								}
							]
						}
					]
				},
				{
					"id": 179,
					"name": "PredicateFn",
					"kind": 4194304,
					"kindString": "Type alias",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "A predicate function, returns true or false based on input."
					},
					"typeParameter": [
						{
							"id": 180,
							"name": "InputT",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {}
						}
					],
					"sources": [
						{
							"fileName": "lib/iterators/where-iterator.ts",
							"line": 8,
							"character": 23
						}
					],
					"type": {
						"type": "reflection",
						"declaration": {
							"id": 181,
							"name": "__type",
							"kind": 65536,
							"kindString": "Type literal",
							"flags": {},
							"signatures": [
								{
									"id": 182,
									"name": "__call",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 183,
											"name": "value",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "typeParameter",
												"name": "InputT"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/iterators/where-iterator.ts",
									"line": 8,
									"character": 33
								}
							]
						}
					}
				}
			],
			"groups": [
				{
					"title": "Classes",
					"kind": 128,
					"children": [
						169
					]
				},
				{
					"title": "Type aliases",
					"kind": 4194304,
					"children": [
						179
					]
				}
			],
			"sources": [
				{
					"fileName": "lib/iterators/where-iterator.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 271,
			"name": "\"lib/iterators/zip-iterator\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "C:/projects/github/data-forge/data-forge-ts/src/lib/iterators/zip-iterator.ts",
			"children": [
				{
					"id": 272,
					"name": "ZipIterator",
					"kind": 128,
					"kindString": "Class",
					"flags": {
						"isExported": true
					},
					"typeParameter": [
						{
							"id": 273,
							"name": "ValueT",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {}
						},
						{
							"id": 274,
							"name": "ReturnT",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {}
						}
					],
					"children": [
						{
							"id": 277,
							"name": "constructor",
							"kind": 512,
							"kindString": "Constructor",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 278,
									"name": "new ZipIterator",
									"kind": 16384,
									"kindString": "Constructor signature",
									"flags": {},
									"parameters": [
										{
											"id": 279,
											"name": "iterables",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "array",
												"elementType": {
													"type": "reference",
													"name": "Iterable",
													"typeArguments": [
														{
															"type": "typeParameter",
															"name": "ValueT"
														}
													]
												}
											}
										},
										{
											"id": 280,
											"name": "zipper",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "ZipFn",
												"id": 283,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "ValueT"
													},
													{
														"type": "typeParameter",
														"name": "ReturnT"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "ZipIterator",
										"id": 272
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/iterators/zip-iterator.ts",
									"line": 11,
									"character": 35
								}
							]
						},
						{
							"id": 275,
							"name": "iterators",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "lib/iterators/zip-iterator.ts",
									"line": 10,
									"character": 13
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "reference",
									"name": "Iterator",
									"typeArguments": [
										{
											"type": "typeParameter",
											"name": "ValueT"
										}
									]
								}
							}
						},
						{
							"id": 276,
							"name": "zipper",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "lib/iterators/zip-iterator.ts",
									"line": 11,
									"character": 10
								}
							],
							"type": {
								"type": "reference",
								"name": "ZipFn",
								"id": 283,
								"typeArguments": [
									{
										"type": "typeParameter",
										"name": "ValueT"
									},
									{
										"type": "typeParameter",
										"name": "ReturnT"
									}
								]
							}
						},
						{
							"id": 281,
							"name": "next",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 282,
									"name": "next",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "IteratorResult",
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "ReturnT"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/iterators/zip-iterator.ts",
									"line": 18,
									"character": 8
								}
							]
						}
					],
					"groups": [
						{
							"title": "Constructors",
							"kind": 512,
							"children": [
								277
							]
						},
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								275,
								276
							]
						},
						{
							"title": "Methods",
							"kind": 2048,
							"children": [
								281
							]
						}
					],
					"sources": [
						{
							"fileName": "lib/iterators/zip-iterator.ts",
							"line": 8,
							"character": 24
						}
					],
					"implementedTypes": [
						{
							"type": "reference",
							"name": "Iterator",
							"typeArguments": [
								{
									"type": "typeParameter",
									"name": "ReturnT"
								}
							]
						}
					]
				},
				{
					"id": 283,
					"name": "ZipFn",
					"kind": 4194304,
					"kindString": "Type alias",
					"flags": {
						"isExported": true
					},
					"typeParameter": [
						{
							"id": 284,
							"name": "ValueT",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {}
						},
						{
							"id": 285,
							"name": "ReturnT",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {}
						}
					],
					"sources": [
						{
							"fileName": "lib/iterators/zip-iterator.ts",
							"line": 6,
							"character": 17
						}
					],
					"type": {
						"type": "reflection",
						"declaration": {
							"id": 286,
							"name": "__type",
							"kind": 65536,
							"kindString": "Type literal",
							"flags": {},
							"signatures": [
								{
									"id": 287,
									"name": "__call",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 288,
											"name": "input",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "ISeries",
												"id": 2287,
												"typeArguments": [
													{
														"type": "intrinsic",
														"name": "number"
													},
													{
														"type": "typeParameter",
														"name": "ValueT"
													}
												]
											}
										}
									],
									"type": {
										"type": "typeParameter",
										"name": "ReturnT"
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/iterators/zip-iterator.ts",
									"line": 6,
									"character": 36
								}
							]
						}
					}
				}
			],
			"groups": [
				{
					"title": "Classes",
					"kind": 128,
					"children": [
						272
					]
				},
				{
					"title": "Type aliases",
					"kind": 4194304,
					"children": [
						283
					]
				}
			],
			"sources": [
				{
					"fileName": "lib/iterators/zip-iterator.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 2273,
			"name": "\"lib/series\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "C:/projects/github/data-forge/data-forge-ts/src/lib/series.ts",
			"children": [
				{
					"id": 3220,
					"name": "OrderedSeries",
					"kind": 128,
					"kindString": "Class",
					"flags": {},
					"typeParameter": [
						{
							"id": 3221,
							"name": "IndexT",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {}
						},
						{
							"id": 3222,
							"name": "ValueT",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {}
						},
						{
							"id": 3223,
							"name": "SortT",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {}
						}
					],
					"children": [
						{
							"id": 3237,
							"name": "constructor",
							"kind": 512,
							"kindString": "Constructor",
							"flags": {},
							"signatures": [
								{
									"id": 3238,
									"name": "new OrderedSeries",
									"kind": 16384,
									"kindString": "Constructor signature",
									"flags": {},
									"parameters": [
										{
											"id": 3239,
											"name": "values",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Iterable",
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "ValueT"
													}
												]
											}
										},
										{
											"id": 3240,
											"name": "pairs",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Iterable",
												"typeArguments": [
													{
														"type": "tuple",
														"elements": [
															{
																"type": "typeParameter",
																"name": "IndexT"
															},
															{
																"type": "typeParameter",
																"name": "ValueT"
															}
														]
													}
												]
											}
										},
										{
											"id": 3241,
											"name": "selector",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "SelectorWithIndexFn",
												"id": 3569,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "ValueT"
													},
													{
														"type": "typeParameter",
														"name": "SortT"
													}
												]
											}
										},
										{
											"id": 3242,
											"name": "direction",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Direction",
												"id": 390
											}
										},
										{
											"id": 3243,
											"name": "parent",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "reference",
														"name": "OrderedSeries",
														"id": 3220,
														"typeArguments": [
															{
																"type": "typeParameter",
																"name": "IndexT"
															},
															{
																"type": "typeParameter",
																"name": "ValueT"
															}
														]
													},
													{
														"type": "intrinsic",
														"name": "null"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "OrderedSeries",
										"id": 3220
									},
									"overwrites": {
										"type": "reference",
										"name": "Series.__constructor",
										"id": 2903
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/series.ts",
									"line": 2667,
									"character": 5
								}
							],
							"overwrites": {
								"type": "reference",
								"name": "Series.__constructor",
								"id": 2903
							}
						},
						{
							"id": 3226,
							"name": "direction",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"sources": [
								{
									"fileName": "lib/series.ts",
									"line": 2651,
									"character": 13
								}
							],
							"type": {
								"type": "reference",
								"name": "Direction",
								"id": 390
							}
						},
						{
							"id": 3228,
							"name": "origPairs",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"sources": [
								{
									"fileName": "lib/series.ts",
									"line": 2653,
									"character": 13
								}
							],
							"type": {
								"type": "reference",
								"name": "Iterable",
								"typeArguments": [
									{
										"type": "tuple",
										"elements": [
											{
												"type": "typeParameter",
												"name": "IndexT"
											},
											{
												"type": "typeParameter",
												"name": "ValueT"
											}
										]
									}
								]
							}
						},
						{
							"id": 3227,
							"name": "origValues",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"sources": [
								{
									"fileName": "lib/series.ts",
									"line": 2652,
									"character": 14
								}
							],
							"type": {
								"type": "reference",
								"name": "Iterable",
								"typeArguments": [
									{
										"type": "typeParameter",
										"name": "ValueT"
									}
								]
							}
						},
						{
							"id": 3224,
							"name": "parent",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"sources": [
								{
									"fileName": "lib/series.ts",
									"line": 2649,
									"character": 10
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "reference",
										"name": "OrderedSeries",
										"id": 3220,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "IndexT"
											},
											{
												"type": "typeParameter",
												"name": "ValueT"
											},
											{
												"type": "typeParameter",
												"name": "SortT"
											}
										]
									},
									{
										"type": "intrinsic",
										"name": "null"
									}
								]
							}
						},
						{
							"id": 3225,
							"name": "selector",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"sources": [
								{
									"fileName": "lib/series.ts",
									"line": 2650,
									"character": 12
								}
							],
							"type": {
								"type": "reference",
								"name": "SelectorWithIndexFn",
								"id": 3569,
								"typeArguments": [
									{
										"type": "typeParameter",
										"name": "ValueT"
									},
									{
										"type": "typeParameter",
										"name": "SortT"
									}
								]
							}
						},
						{
							"id": 3252,
							"name": "__@iterator",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"signatures": [
								{
									"id": 3253,
									"name": "__@iterator",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Get an iterator to enumerate the values of the series.\nEnumerating the iterator forces lazy evaluation to complete."
									},
									"type": {
										"type": "reference",
										"name": "Iterator",
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "ValueT"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Series.[Symbol.iterator]",
										"id": 2910
									},
									"implementationOf": {
										"type": "reference",
										"name": "IOrderedSeries.__@iterator",
										"id": 2587
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/series.ts",
									"line": 1017,
									"character": 21
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Series.[Symbol.iterator]",
								"id": 2910
							},
							"implementationOf": {
								"type": "reference",
								"name": "IOrderedSeries.__@iterator",
								"id": 2586
							}
						},
						{
							"id": 3364,
							"name": "after",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"signatures": [
								{
									"id": 3365,
									"name": "after",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Get a new series containing all values after the specified index value (exclusive).",
										"returns": "Returns a new series containing all values after the specified index value.\n"
									},
									"parameters": [
										{
											"id": 3366,
											"name": "indexValue",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The index value to search for.\n"
											},
											"type": {
												"type": "typeParameter",
												"name": "IndexT"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "ISeries",
										"id": 2287,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "IndexT"
											},
											{
												"type": "typeParameter",
												"name": "ValueT"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Series.after",
										"id": 3022
									},
									"implementationOf": {
										"type": "reference",
										"name": "IOrderedSeries.after",
										"id": 2699
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/series.ts",
									"line": 1670,
									"character": 9
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Series.after",
								"id": 3022
							},
							"implementationOf": {
								"type": "reference",
								"name": "IOrderedSeries.after",
								"id": 2698
							}
						},
						{
							"id": 3300,
							"name": "aggregate",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"signatures": [
								{
									"id": 3301,
									"name": "aggregate",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Aggregate the values in the series.",
										"returns": "Returns a new value that has been aggregated from the input sequence by the 'selector' function.\n"
									},
									"typeParameter": [
										{
											"id": 3302,
											"name": "ToT",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										}
									],
									"parameters": [
										{
											"id": 3303,
											"name": "seedOrSelector",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "reference",
														"name": "AggregateFn",
														"id": 3644,
														"typeArguments": [
															{
																"type": "typeParameter",
																"name": "ValueT"
															},
															{
																"type": "typeParameter",
																"name": "ToT"
															}
														]
													},
													{
														"type": "typeParameter",
														"name": "ToT"
													}
												]
											}
										},
										{
											"id": 3304,
											"name": "selector",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"text": "Function that takes the seed and then each value in the series and produces the aggregate value.\n"
											},
											"type": {
												"type": "reference",
												"name": "AggregateFn",
												"id": 3644,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "ValueT"
													},
													{
														"type": "typeParameter",
														"name": "ToT"
													}
												]
											}
										}
									],
									"type": {
										"type": "typeParameter",
										"name": "ToT"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Series.aggregate",
										"id": 2958
									},
									"implementationOf": {
										"type": "reference",
										"name": "IOrderedSeries.aggregate",
										"id": 2635
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/series.ts",
									"line": 1237,
									"character": 13
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Series.aggregate",
								"id": 2958
							},
							"implementationOf": {
								"type": "reference",
								"name": "IOrderedSeries.aggregate",
								"id": 2634
							}
						},
						{
							"id": 3346,
							"name": "all",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"signatures": [
								{
									"id": 3347,
									"name": "all",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Determine if the predicate returns truthy for all values in the series.\nReturns false as soon as the predicate evaluates to falsy.\nReturns true if the predicate returns truthy for all values in the series.\nReturns false if the series is empty.",
										"returns": "Returns true if the predicate has returned truthy for every value in the sequence, otherwise returns false.\n"
									},
									"parameters": [
										{
											"id": 3348,
											"name": "predicate",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Predicate function that receives each value in turn and returns truthy for a match, otherwise falsy.\n"
											},
											"type": {
												"type": "reference",
												"name": "PredicateFn",
												"id": 3639,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "ValueT"
													}
												]
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Series.all",
										"id": 3004
									},
									"implementationOf": {
										"type": "reference",
										"name": "IOrderedSeries.all",
										"id": 2681
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/series.ts",
									"line": 1524,
									"character": 7
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Series.all",
								"id": 3004
							},
							"implementationOf": {
								"type": "reference",
								"name": "IOrderedSeries.all",
								"id": 2680
							}
						},
						{
							"id": 3349,
							"name": "any",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"signatures": [
								{
									"id": 3350,
									"name": "any",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Determine if the predicate returns truthy for any of the values in the series.\nReturns true as soon as the predicate returns truthy.\nReturns false if the predicate never returns truthy.\nIf no predicate is specified the value itself is checked.",
										"returns": "Returns true if the predicate has returned truthy for any value in the sequence, otherwise returns false.\n"
									},
									"parameters": [
										{
											"id": 3351,
											"name": "predicate",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "reference",
												"name": "PredicateFn",
												"id": 3639,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "ValueT"
													}
												]
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Series.any",
										"id": 3007
									},
									"implementationOf": {
										"type": "reference",
										"name": "IOrderedSeries.any",
										"id": 2684
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/series.ts",
									"line": 1550,
									"character": 7
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Series.any",
								"id": 3007
							},
							"implementationOf": {
								"type": "reference",
								"name": "IOrderedSeries.any",
								"id": 2683
							}
						},
						{
							"id": 3548,
							"name": "appendPair",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"signatures": [
								{
									"id": 3549,
									"name": "appendPair",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Append a pair to the end of a Series.",
										"returns": "Returns a new series with the specified pair appended.\n"
									},
									"parameters": [
										{
											"id": 3550,
											"name": "pair",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The pair to append.\n"
											},
											"type": {
												"type": "tuple",
												"elements": [
													{
														"type": "typeParameter",
														"name": "IndexT"
													},
													{
														"type": "typeParameter",
														"name": "ValueT"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "ISeries",
										"id": 2287,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "IndexT"
											},
											{
												"type": "typeParameter",
												"name": "ValueT"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Series.appendPair",
										"id": 3206
									},
									"implementationOf": {
										"type": "reference",
										"name": "IOrderedSeries.appendPair",
										"id": 2857
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/series.ts",
									"line": 2493,
									"character": 14
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Series.appendPair",
								"id": 3206
							},
							"implementationOf": {
								"type": "reference",
								"name": "IOrderedSeries.appendPair",
								"id": 2856
							}
						},
						{
							"id": 3331,
							"name": "at",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"signatures": [
								{
									"id": 3332,
									"name": "at",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Get the value at a specified index.",
										"returns": "Returns the value from the specified index in the sequence or undefined if there is no such index in the series.\n"
									},
									"parameters": [
										{
											"id": 3333,
											"name": "index",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Index to for which to retreive the value.\n"
											},
											"type": {
												"type": "typeParameter",
												"name": "IndexT"
											}
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "typeParameter",
												"name": "ValueT"
											},
											{
												"type": "intrinsic",
												"name": "undefined"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Series.at",
										"id": 2989
									},
									"implementationOf": {
										"type": "reference",
										"name": "IOrderedSeries.at",
										"id": 2666
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/series.ts",
									"line": 1419,
									"character": 6
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Series.at",
								"id": 2989
							},
							"implementationOf": {
								"type": "reference",
								"name": "IOrderedSeries.at",
								"id": 2665
							}
						},
						{
							"id": 3408,
							"name": "average",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"signatures": [
								{
									"id": 3409,
									"name": "average",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Average the values in a series.",
										"returns": "Returns the average of the number values in the series.\n"
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Series.average",
										"id": 3066
									},
									"implementationOf": {
										"type": "reference",
										"name": "IOrderedSeries.average",
										"id": 2726
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/series.ts",
									"line": 1905,
									"character": 11
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Series.average",
								"id": 3066
							},
							"implementationOf": {
								"type": "reference",
								"name": "IOrderedSeries.average",
								"id": 2725
							}
						},
						{
							"id": 3400,
							"name": "bake",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"signatures": [
								{
									"id": 3401,
									"name": "bake",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Forces lazy evaluation to complete and 'bakes' the series into memory.",
										"returns": "Returns a series that has been 'baked', all lazy evaluation has completed.\n"
									},
									"type": {
										"type": "reference",
										"name": "ISeries",
										"id": 2287,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "IndexT"
											},
											{
												"type": "typeParameter",
												"name": "ValueT"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Series.bake",
										"id": 3058
									},
									"implementationOf": {
										"type": "reference",
										"name": "IOrderedSeries.bake",
										"id": 2718
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/series.ts",
									"line": 1844,
									"character": 8
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Series.bake",
								"id": 3058
							},
							"implementationOf": {
								"type": "reference",
								"name": "IOrderedSeries.bake",
								"id": 2717
							}
						},
						{
							"id": 3361,
							"name": "before",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"signatures": [
								{
									"id": 3362,
									"name": "before",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Get a new series containing all values up to the specified index value (exclusive).",
										"returns": "Returns a new series containing all values up to the specified inde value.\n"
									},
									"parameters": [
										{
											"id": 3363,
											"name": "indexValue",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The index value to search for before ending the new series.\n"
											},
											"type": {
												"type": "typeParameter",
												"name": "IndexT"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "ISeries",
										"id": 2287,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "IndexT"
											},
											{
												"type": "typeParameter",
												"name": "ValueT"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Series.before",
										"id": 3019
									},
									"implementationOf": {
										"type": "reference",
										"name": "IOrderedSeries.before",
										"id": 2696
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/series.ts",
									"line": 1653,
									"character": 10
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Series.before",
								"id": 3019
							},
							"implementationOf": {
								"type": "reference",
								"name": "IOrderedSeries.before",
								"id": 2695
							}
						},
						{
							"id": 3367,
							"name": "between",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"signatures": [
								{
									"id": 3368,
									"name": "between",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Get a new series containing all values between the specified index values (inclusive).",
										"returns": "Returns a new series containing all values between the specified index values (inclusive).\n"
									},
									"parameters": [
										{
											"id": 3369,
											"name": "startIndexValue",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The index where the new sequence starts."
											},
											"type": {
												"type": "typeParameter",
												"name": "IndexT"
											}
										},
										{
											"id": 3370,
											"name": "endIndexValue",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The index where the new sequence ends.\n"
											},
											"type": {
												"type": "typeParameter",
												"name": "IndexT"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "ISeries",
										"id": 2287,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "IndexT"
											},
											{
												"type": "typeParameter",
												"name": "ValueT"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Series.between",
										"id": 3025
									},
									"implementationOf": {
										"type": "reference",
										"name": "IOrderedSeries.between",
										"id": 2702
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/series.ts",
									"line": 1688,
									"character": 11
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Series.between",
								"id": 3025
							},
							"implementationOf": {
								"type": "reference",
								"name": "IOrderedSeries.between",
								"id": 2701
							}
						},
						{
							"id": 3435,
							"name": "concat",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"signatures": [
								{
									"id": 3436,
									"name": "concat",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Concatenate multiple other series onto this series.",
										"returns": "Returns a single series concatenated from multiple input series.\n"
									},
									"parameters": [
										{
											"id": 3437,
											"name": "series",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isRest": true
											},
											"comment": {
												"text": "Multiple arguments. Each can be either a series or an array of series.\n"
											},
											"type": {
												"type": "array",
												"elementType": {
													"type": "union",
													"types": [
														{
															"type": "reference",
															"name": "ISeries",
															"id": 2287,
															"typeArguments": [
																{
																	"type": "unknown",
																	"name": "IndexT"
																},
																{
																	"type": "unknown",
																	"name": "ValueT"
																}
															]
														},
														{
															"type": "array",
															"elementType": {
																"type": "reference",
																"name": "ISeries",
																"id": 2287,
																"typeArguments": [
																	{
																		"type": "unknown",
																		"name": "IndexT"
																	},
																	{
																		"type": "unknown",
																		"name": "ValueT"
																	}
																]
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "ISeries",
										"id": 2287,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "IndexT"
											},
											{
												"type": "typeParameter",
												"name": "ValueT"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Series.concat",
										"id": 3093
									},
									"implementationOf": {
										"type": "reference",
										"name": "IOrderedSeries.concat",
										"id": 2748
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/series.ts",
									"line": 2080,
									"character": 10
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Series.concat",
								"id": 3093
							},
							"implementationOf": {
								"type": "reference",
								"name": "IOrderedSeries.concat",
								"id": 2747
							}
						},
						{
							"id": 3325,
							"name": "count",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"signatures": [
								{
									"id": 3326,
									"name": "count",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Count the number of values in the series.",
										"returns": "Returns the count of all values in the series.\n"
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Series.count",
										"id": 2983
									},
									"implementationOf": {
										"type": "reference",
										"name": "IOrderedSeries.count",
										"id": 2660
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/series.ts",
									"line": 1369,
									"character": 9
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Series.count",
								"id": 2983
							},
							"implementationOf": {
								"type": "reference",
								"name": "IOrderedSeries.count",
								"id": 2659
							}
						},
						{
							"id": 3555,
							"name": "defaultIfEmpty",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"signatures": [
								{
									"id": 3556,
									"name": "defaultIfEmpty",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Returns the specified default sequence if the series is empty.",
										"returns": "Returns 'defaultSequence' if the series is empty.\n"
									},
									"parameters": [
										{
											"id": 3557,
											"name": "defaultSequence",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Default sequence to return if the series is empty.\n"
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "array",
														"elementType": {
															"type": "typeParameter",
															"name": "ValueT"
														}
													},
													{
														"type": "reference",
														"name": "ISeries",
														"id": 2287,
														"typeArguments": [
															{
																"type": "typeParameter",
																"name": "IndexT"
															},
															{
																"type": "typeParameter",
																"name": "ValueT"
															}
														]
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "ISeries",
										"id": 2287,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "IndexT"
											},
											{
												"type": "typeParameter",
												"name": "ValueT"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Series.defaultIfEmpty",
										"id": 3213
									},
									"implementationOf": {
										"type": "reference",
										"name": "IOrderedSeries.defaultIfEmpty",
										"id": 2864
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/series.ts",
									"line": 2538,
									"character": 18
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Series.defaultIfEmpty",
								"id": 3213
							},
							"implementationOf": {
								"type": "reference",
								"name": "IOrderedSeries.defaultIfEmpty",
								"id": 2863
							}
						},
						{
							"id": 3558,
							"name": "detectTypes",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"signatures": [
								{
									"id": 3559,
									"name": "detectTypes",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Detect the types of the values in the sequence.",
										"returns": "Returns a dataframe that describes the data types contained in the input series or dataframe.\n"
									},
									"type": {
										"type": "reference",
										"name": "IDataFrame",
										"id": 683,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "number"
											},
											{
												"type": "reference",
												"name": "ITypeFrequency",
												"id": 2281
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Series.detectTypes",
										"id": 3216
									},
									"implementationOf": {
										"type": "reference",
										"name": "IOrderedSeries.detectTypes",
										"id": 2867
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/series.ts",
									"line": 2561,
									"character": 15
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Series.detectTypes",
								"id": 3216
							},
							"implementationOf": {
								"type": "reference",
								"name": "IOrderedSeries.detectTypes",
								"id": 2866
							}
						},
						{
							"id": 3560,
							"name": "detectValues",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"signatures": [
								{
									"id": 3561,
									"name": "detectValues",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Detect the frequency of values in the sequence.",
										"returns": "Returns a dataframe that describes the values contained in the input sequence.\n"
									},
									"type": {
										"type": "reference",
										"name": "IDataFrame",
										"id": 683,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "number"
											},
											{
												"type": "reference",
												"name": "IValueFrequency",
												"id": 2284
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Series.detectValues",
										"id": 3218
									},
									"implementationOf": {
										"type": "reference",
										"name": "IOrderedSeries.detectValues",
										"id": 2869
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/series.ts",
									"line": 2608,
									"character": 16
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Series.detectValues",
								"id": 3218
							},
							"implementationOf": {
								"type": "reference",
								"name": "IOrderedSeries.detectValues",
								"id": 2868
							}
						},
						{
							"id": 3418,
							"name": "distinct",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"signatures": [
								{
									"id": 3419,
									"name": "distinct",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Returns only values in the series that have distinct values.",
										"returns": "Returns a series containing only unique values as determined by the 'selector' function.\n"
									},
									"typeParameter": [
										{
											"id": 3420,
											"name": "ToT",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										}
									],
									"parameters": [
										{
											"id": 3421,
											"name": "selector",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"text": "Selects the value used to compare for duplicates.\n"
											},
											"type": {
												"type": "reference",
												"name": "SelectorFn",
												"id": 3625,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "ValueT"
													},
													{
														"type": "typeParameter",
														"name": "ToT"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "ISeries",
										"id": 2287,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "IndexT"
											},
											{
												"type": "typeParameter",
												"name": "ValueT"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Series.distinct",
										"id": 3076
									},
									"implementationOf": {
										"type": "reference",
										"name": "IOrderedSeries.distinct",
										"id": 2736
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/series.ts",
									"line": 1988,
									"character": 12
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Series.distinct",
								"id": 3076
							},
							"implementationOf": {
								"type": "reference",
								"name": "IOrderedSeries.distinct",
								"id": 2735
							}
						},
						{
							"id": 3358,
							"name": "endAt",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"signatures": [
								{
									"id": 3359,
									"name": "endAt",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Get a new series containing all values up until and including the specified index value (inclusive).",
										"returns": "Returns a new series containing all values up until and including the specified index value.\n"
									},
									"parameters": [
										{
											"id": 3360,
											"name": "indexValue",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The index value to search for before ending the new series.\n"
											},
											"type": {
												"type": "typeParameter",
												"name": "IndexT"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "ISeries",
										"id": 2287,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "IndexT"
											},
											{
												"type": "typeParameter",
												"name": "ValueT"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Series.endAt",
										"id": 3016
									},
									"implementationOf": {
										"type": "reference",
										"name": "IOrderedSeries.endAt",
										"id": 2693
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/series.ts",
									"line": 1636,
									"character": 9
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Series.endAt",
								"id": 3016
							},
							"implementationOf": {
								"type": "reference",
								"name": "IOrderedSeries.endAt",
								"id": 2692
							}
						},
						{
							"id": 3494,
							"name": "except",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"signatures": [
								{
									"id": 3495,
									"name": "except",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Returns the exception of values between two series.",
										"returns": "Returns the difference between the two series.\n"
									},
									"typeParameter": [
										{
											"id": 3496,
											"name": "InnerIndexT",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										},
										{
											"id": 3497,
											"name": "InnerValueT",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										},
										{
											"id": 3498,
											"name": "KeyT",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										}
									],
									"parameters": [
										{
											"id": 3499,
											"name": "inner",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The other series to combine."
											},
											"type": {
												"type": "reference",
												"name": "ISeries",
												"id": 2287,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "InnerIndexT"
													},
													{
														"type": "typeParameter",
														"name": "InnerValueT"
													}
												]
											}
										},
										{
											"id": 3500,
											"name": "outerSelector",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "reference",
												"name": "SelectorFn",
												"id": 3625,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "ValueT"
													},
													{
														"type": "typeParameter",
														"name": "KeyT"
													}
												]
											}
										},
										{
											"id": 3501,
											"name": "innerSelector",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "reference",
												"name": "SelectorFn",
												"id": 3625,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "InnerValueT"
													},
													{
														"type": "typeParameter",
														"name": "KeyT"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "ISeries",
										"id": 2287,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "IndexT"
											},
											{
												"type": "typeParameter",
												"name": "ValueT"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Series.except",
										"id": 3152
									},
									"implementationOf": {
										"type": "reference",
										"name": "IOrderedSeries.except",
										"id": 2803
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/series.ts",
									"line": 2240,
									"character": 10
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Series.except",
								"id": 3152
							},
							"implementationOf": {
								"type": "reference",
								"name": "IOrderedSeries.except",
								"id": 2802
							}
						},
						{
							"id": 3551,
							"name": "fillGaps",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"signatures": [
								{
									"id": 3552,
									"name": "fillGaps",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Fill gaps in a series.",
										"returns": "Returns a new series with gaps filled in.\n"
									},
									"parameters": [
										{
											"id": 3553,
											"name": "comparer",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Comparer that is passed pairA and pairB, two consecutive rows, return truthy if there is a gap between the rows, or falsey if there is no gap."
											},
											"type": {
												"type": "reference",
												"name": "ComparerFn",
												"id": 3651,
												"typeArguments": [
													{
														"type": "tuple",
														"elements": [
															{
																"type": "typeParameter",
																"name": "IndexT"
															},
															{
																"type": "typeParameter",
																"name": "ValueT"
															}
														]
													},
													{
														"type": "tuple",
														"elements": [
															{
																"type": "typeParameter",
																"name": "IndexT"
															},
															{
																"type": "typeParameter",
																"name": "ValueT"
															}
														]
													}
												]
											}
										},
										{
											"id": 3554,
											"name": "generator",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Generator that is passed pairA and pairB, two consecutive rows, returns an array of pairs that fills the gap between the rows.\n"
											},
											"type": {
												"type": "reference",
												"name": "GapFillFn",
												"id": 3663,
												"typeArguments": [
													{
														"type": "tuple",
														"elements": [
															{
																"type": "typeParameter",
																"name": "IndexT"
															},
															{
																"type": "typeParameter",
																"name": "ValueT"
															}
														]
													},
													{
														"type": "tuple",
														"elements": [
															{
																"type": "typeParameter",
																"name": "IndexT"
															},
															{
																"type": "typeParameter",
																"name": "ValueT"
															}
														]
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "ISeries",
										"id": 2287,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "IndexT"
											},
											{
												"type": "typeParameter",
												"name": "ValueT"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Series.fillGaps",
										"id": 3209
									},
									"implementationOf": {
										"type": "reference",
										"name": "IOrderedSeries.fillGaps",
										"id": 2860
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/series.ts",
									"line": 2508,
									"character": 12
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Series.fillGaps",
								"id": 3209
							},
							"implementationOf": {
								"type": "reference",
								"name": "IOrderedSeries.fillGaps",
								"id": 2859
							}
						},
						{
							"id": 3327,
							"name": "first",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"signatures": [
								{
									"id": 3328,
									"name": "first",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Get the first value of the series.",
										"returns": "Returns the first value of the series.\n"
									},
									"type": {
										"type": "typeParameter",
										"name": "ValueT"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Series.first",
										"id": 2985
									},
									"implementationOf": {
										"type": "reference",
										"name": "IOrderedSeries.first",
										"id": 2662
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/series.ts",
									"line": 1383,
									"character": 9
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Series.first",
								"id": 2985
							},
							"implementationOf": {
								"type": "reference",
								"name": "IOrderedSeries.first",
								"id": 2661
							}
						},
						{
							"id": 3343,
							"name": "forEach",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"signatures": [
								{
									"id": 3344,
									"name": "forEach",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Invoke a callback function for each value in the series.",
										"returns": "Returns the input series with no modifications.\n"
									},
									"parameters": [
										{
											"id": 3345,
											"name": "callback",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The calback to invoke for each value.\n"
											},
											"type": {
												"type": "reference",
												"name": "CallbackFn",
												"id": 3563,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "ValueT"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "ISeries",
										"id": 2287,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "IndexT"
											},
											{
												"type": "typeParameter",
												"name": "ValueT"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Series.forEach",
										"id": 3001
									},
									"implementationOf": {
										"type": "reference",
										"name": "IOrderedSeries.forEach",
										"id": 2678
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/series.ts",
									"line": 1503,
									"character": 11
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Series.forEach",
								"id": 3001
							},
							"implementationOf": {
								"type": "reference",
								"name": "IOrderedSeries.forEach",
								"id": 2677
							}
						},
						{
							"id": 3254,
							"name": "getIndex",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"signatures": [
								{
									"id": 3255,
									"name": "getIndex",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Get the index for the series."
									},
									"type": {
										"type": "reference",
										"name": "IIndex",
										"id": 3671,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "IndexT"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Series.getIndex",
										"id": 2912
									},
									"implementationOf": {
										"type": "reference",
										"name": "IOrderedSeries.getIndex",
										"id": 2589
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/series.ts",
									"line": 1024,
									"character": 12
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Series.getIndex",
								"id": 2912
							},
							"implementationOf": {
								"type": "reference",
								"name": "IOrderedSeries.getIndex",
								"id": 2588
							}
						},
						{
							"id": 3422,
							"name": "groupBy",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"signatures": [
								{
									"id": 3423,
									"name": "groupBy",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Group the series according to the selector.",
										"returns": "Returns a series of groups. Each group is a series with values that have been grouped by the 'selector' function.\n"
									},
									"typeParameter": [
										{
											"id": 3424,
											"name": "GroupT",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										}
									],
									"parameters": [
										{
											"id": 3425,
											"name": "selector",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Selector that defines the value to group by.\n"
											},
											"type": {
												"type": "reference",
												"name": "SelectorWithIndexFn",
												"id": 3569,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "ValueT"
													},
													{
														"type": "typeParameter",
														"name": "GroupT"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "ISeries",
										"id": 2287,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "number"
											},
											{
												"type": "reference",
												"name": "ISeries",
												"id": 2287,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "IndexT"
													},
													{
														"type": "typeParameter",
														"name": "ValueT"
													}
												]
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Series.groupBy",
										"id": 3080
									},
									"implementationOf": {
										"type": "reference",
										"name": "IOrderedSeries.groupBy",
										"id": 2740
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/series.ts",
									"line": 2003,
									"character": 11
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Series.groupBy",
								"id": 3080
							},
							"implementationOf": {
								"type": "reference",
								"name": "IOrderedSeries.groupBy",
								"id": 2739
							}
						},
						{
							"id": 3426,
							"name": "groupSequentialBy",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"signatures": [
								{
									"id": 3427,
									"name": "groupSequentialBy",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Group sequential values into a Series of windows.",
										"returns": "Returns a series of groups. Each group is a series with values that have been grouped by the 'selector' function.\n"
									},
									"typeParameter": [
										{
											"id": 3428,
											"name": "GroupT",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										}
									],
									"parameters": [
										{
											"id": 3429,
											"name": "selector",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"text": "Optional selector that defines the value to group by.\n"
											},
											"type": {
												"type": "reference",
												"name": "SelectorFn",
												"id": 3625,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "ValueT"
													},
													{
														"type": "typeParameter",
														"name": "GroupT"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "ISeries",
										"id": 2287,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "number"
											},
											{
												"type": "reference",
												"name": "ISeries",
												"id": 2287,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "IndexT"
													},
													{
														"type": "typeParameter",
														"name": "ValueT"
													}
												]
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Series.groupSequentialBy",
										"id": 3084
									},
									"implementationOf": {
										"type": "reference",
										"name": "IOrderedSeries.groupSequentialBy",
										"id": 2744
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/series.ts",
									"line": 2041,
									"character": 21
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Series.groupSequentialBy",
								"id": 3084
							},
							"implementationOf": {
								"type": "reference",
								"name": "IOrderedSeries.groupSequentialBy",
								"id": 2743
							}
						},
						{
							"id": 3334,
							"name": "head",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"signatures": [
								{
									"id": 3335,
									"name": "head",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Get X values from the start of the series.\nPass in a negative value to get all items at the head except X values at the tail.",
										"returns": "Returns a new series that has only the specified number of values taken from the start of the input sequence.\n"
									},
									"parameters": [
										{
											"id": 3336,
											"name": "numValues",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Number of values to take.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "ISeries",
										"id": 2287,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "IndexT"
											},
											{
												"type": "typeParameter",
												"name": "ValueT"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Series.head",
										"id": 2992
									},
									"implementationOf": {
										"type": "reference",
										"name": "IOrderedSeries.head",
										"id": 2669
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/series.ts",
									"line": 1447,
									"character": 8
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Series.head",
								"id": 2992
							},
							"implementationOf": {
								"type": "reference",
								"name": "IOrderedSeries.head",
								"id": 2668
							}
						},
						{
							"id": 3402,
							"name": "inflate",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"signatures": [
								{
									"id": 3403,
									"name": "inflate",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Inflate the series to a dataframe.",
										"returns": "Returns a new dataframe that has been created from the input series via the 'selector' function.\n"
									},
									"typeParameter": [
										{
											"id": 3404,
											"name": "ToT",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										}
									],
									"parameters": [
										{
											"id": 3405,
											"name": "selector",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "reference",
												"name": "SelectorWithIndexFn",
												"id": 3569,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "ValueT"
													},
													{
														"type": "typeParameter",
														"name": "ToT"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "IDataFrame",
										"id": 683,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "IndexT"
											},
											{
												"type": "typeParameter",
												"name": "ToT"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Series.inflate",
										"id": 3060
									},
									"implementationOf": {
										"type": "reference",
										"name": "IOrderedSeries.inflate",
										"id": 2720
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/series.ts",
									"line": 1865,
									"character": 11
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Series.inflate",
								"id": 3060
							},
							"implementationOf": {
								"type": "reference",
								"name": "IOrderedSeries.inflate",
								"id": 2719
							}
						},
						{
							"id": 3545,
							"name": "insertPair",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"signatures": [
								{
									"id": 3546,
									"name": "insertPair",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Insert a pair at the start of the series.",
										"returns": "Returns a new series with the specified pair inserted.\n"
									},
									"parameters": [
										{
											"id": 3547,
											"name": "pair",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The pair to insert.\n"
											},
											"type": {
												"type": "tuple",
												"elements": [
													{
														"type": "typeParameter",
														"name": "IndexT"
													},
													{
														"type": "typeParameter",
														"name": "ValueT"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "ISeries",
										"id": 2287,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "IndexT"
											},
											{
												"type": "typeParameter",
												"name": "ValueT"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Series.insertPair",
										"id": 3203
									},
									"implementationOf": {
										"type": "reference",
										"name": "IOrderedSeries.insertPair",
										"id": 2854
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/series.ts",
									"line": 2479,
									"character": 14
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Series.insertPair",
								"id": 3203
							},
							"implementationOf": {
								"type": "reference",
								"name": "IOrderedSeries.insertPair",
								"id": 2853
							}
						},
						{
							"id": 3486,
							"name": "intersection",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"signatures": [
								{
									"id": 3487,
									"name": "intersection",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Returns the intersection of values between two series.",
										"returns": "Returns the intersection of two series.\n"
									},
									"typeParameter": [
										{
											"id": 3488,
											"name": "InnerIndexT",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										},
										{
											"id": 3489,
											"name": "InnerValueT",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										},
										{
											"id": 3490,
											"name": "KeyT",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										}
									],
									"parameters": [
										{
											"id": 3491,
											"name": "inner",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The other series to combine."
											},
											"type": {
												"type": "reference",
												"name": "ISeries",
												"id": 2287,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "InnerIndexT"
													},
													{
														"type": "typeParameter",
														"name": "InnerValueT"
													}
												]
											}
										},
										{
											"id": 3492,
											"name": "outerSelector",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "reference",
												"name": "SelectorFn",
												"id": 3625,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "ValueT"
													},
													{
														"type": "typeParameter",
														"name": "KeyT"
													}
												]
											}
										},
										{
											"id": 3493,
											"name": "innerSelector",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "reference",
												"name": "SelectorFn",
												"id": 3625,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "InnerValueT"
													},
													{
														"type": "typeParameter",
														"name": "KeyT"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "ISeries",
										"id": 2287,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "IndexT"
											},
											{
												"type": "typeParameter",
												"name": "ValueT"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Series.intersection",
										"id": 3144
									},
									"implementationOf": {
										"type": "reference",
										"name": "IOrderedSeries.intersection",
										"id": 2795
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/series.ts",
									"line": 2202,
									"character": 16
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Series.intersection",
								"id": 3144
							},
							"implementationOf": {
								"type": "reference",
								"name": "IOrderedSeries.intersection",
								"id": 2794
							}
						},
						{
							"id": 3502,
							"name": "join",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"signatures": [
								{
									"id": 3503,
									"name": "join",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Correlates the elements of two series on matching keys.",
										"returns": "Returns the joined series.\n"
									},
									"typeParameter": [
										{
											"id": 3504,
											"name": "KeyT",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										},
										{
											"id": 3505,
											"name": "InnerIndexT",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										},
										{
											"id": 3506,
											"name": "InnerValueT",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										},
										{
											"id": 3507,
											"name": "ResultValueT",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										}
									],
									"parameters": [
										{
											"id": 3508,
											"name": "inner",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The inner series to join."
											},
											"type": {
												"type": "reference",
												"name": "ISeries",
												"id": 2287,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "InnerIndexT"
													},
													{
														"type": "typeParameter",
														"name": "InnerValueT"
													}
												]
											}
										},
										{
											"id": 3509,
											"name": "outerKeySelector",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Selector that chooses the join key from the outer sequence."
											},
											"type": {
												"type": "reference",
												"name": "SelectorFn",
												"id": 3625,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "ValueT"
													},
													{
														"type": "typeParameter",
														"name": "KeyT"
													}
												]
											}
										},
										{
											"id": 3510,
											"name": "innerKeySelector",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Selector that chooses the join key from the inner sequence."
											},
											"type": {
												"type": "reference",
												"name": "SelectorFn",
												"id": 3625,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "InnerValueT"
													},
													{
														"type": "typeParameter",
														"name": "KeyT"
													}
												]
											}
										},
										{
											"id": 3511,
											"name": "resultSelector",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Selector that defines how to merge outer and inner values.\n"
											},
											"type": {
												"type": "reference",
												"name": "JoinFn",
												"id": 3631,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "ValueT"
													},
													{
														"type": "typeParameter",
														"name": "InnerValueT"
													},
													{
														"type": "typeParameter",
														"name": "ResultValueT"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "ISeries",
										"id": 2287,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "number"
											},
											{
												"type": "typeParameter",
												"name": "ResultValueT"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Series.join",
										"id": 3160
									},
									"implementationOf": {
										"type": "reference",
										"name": "IOrderedSeries.join",
										"id": 2811
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/series.ts",
									"line": 2280,
									"character": 8
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Series.join",
								"id": 3160
							},
							"implementationOf": {
								"type": "reference",
								"name": "IOrderedSeries.join",
								"id": 2810
							}
						},
						{
							"id": 3512,
							"name": "joinOuter",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"signatures": [
								{
									"id": 3513,
									"name": "joinOuter",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Performs an outer join on two series. Correlates the elements based on matching keys.\nIncludes elements from both series that have no correlation in the other series.",
										"returns": "Returns the joined series.\n"
									},
									"typeParameter": [
										{
											"id": 3514,
											"name": "KeyT",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										},
										{
											"id": 3515,
											"name": "InnerIndexT",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										},
										{
											"id": 3516,
											"name": "InnerValueT",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										},
										{
											"id": 3517,
											"name": "ResultValueT",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										}
									],
									"parameters": [
										{
											"id": 3518,
											"name": "inner",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The inner series to join."
											},
											"type": {
												"type": "reference",
												"name": "ISeries",
												"id": 2287,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "InnerIndexT"
													},
													{
														"type": "typeParameter",
														"name": "InnerValueT"
													}
												]
											}
										},
										{
											"id": 3519,
											"name": "outerKeySelector",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Selector that chooses the join key from the outer sequence."
											},
											"type": {
												"type": "reference",
												"name": "SelectorFn",
												"id": 3625,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "ValueT"
													},
													{
														"type": "typeParameter",
														"name": "KeyT"
													}
												]
											}
										},
										{
											"id": 3520,
											"name": "innerKeySelector",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Selector that chooses the join key from the inner sequence."
											},
											"type": {
												"type": "reference",
												"name": "SelectorFn",
												"id": 3625,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "InnerValueT"
													},
													{
														"type": "typeParameter",
														"name": "KeyT"
													}
												]
											}
										},
										{
											"id": 3521,
											"name": "resultSelector",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Selector that defines how to merge outer and inner values.\n\nImplementation from here:\n\n\thttp://blogs.geniuscode.net/RyanDHatch/?p=116\n"
											},
											"type": {
												"type": "reference",
												"name": "JoinFn",
												"id": 3631,
												"typeArguments": [
													{
														"type": "union",
														"types": [
															{
																"type": "typeParameter",
																"name": "ValueT"
															},
															{
																"type": "intrinsic",
																"name": "null"
															}
														]
													},
													{
														"type": "union",
														"types": [
															{
																"type": "typeParameter",
																"name": "InnerValueT"
															},
															{
																"type": "intrinsic",
																"name": "null"
															}
														]
													},
													{
														"type": "typeParameter",
														"name": "ResultValueT"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "ISeries",
										"id": 2287,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "number"
											},
											{
												"type": "typeParameter",
												"name": "ResultValueT"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Series.joinOuter",
										"id": 3170
									},
									"implementationOf": {
										"type": "reference",
										"name": "IOrderedSeries.joinOuter",
										"id": 2821
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/series.ts",
									"line": 2337,
									"character": 13
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Series.joinOuter",
								"id": 3170
							},
							"implementationOf": {
								"type": "reference",
								"name": "IOrderedSeries.joinOuter",
								"id": 2820
							}
						},
						{
							"id": 3522,
							"name": "joinOuterLeft",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"signatures": [
								{
									"id": 3523,
									"name": "joinOuterLeft",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Performs a left outer join on two series. Correlates the elements based on matching keys.\nIncludes left elements that have no correlation.",
										"returns": "Returns the joined series.\n"
									},
									"typeParameter": [
										{
											"id": 3524,
											"name": "KeyT",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										},
										{
											"id": 3525,
											"name": "InnerIndexT",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										},
										{
											"id": 3526,
											"name": "InnerValueT",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										},
										{
											"id": 3527,
											"name": "ResultValueT",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										}
									],
									"parameters": [
										{
											"id": 3528,
											"name": "inner",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The inner series to join."
											},
											"type": {
												"type": "reference",
												"name": "ISeries",
												"id": 2287,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "InnerIndexT"
													},
													{
														"type": "typeParameter",
														"name": "InnerValueT"
													}
												]
											}
										},
										{
											"id": 3529,
											"name": "outerKeySelector",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Selector that chooses the join key from the outer sequence."
											},
											"type": {
												"type": "reference",
												"name": "SelectorFn",
												"id": 3625,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "ValueT"
													},
													{
														"type": "typeParameter",
														"name": "KeyT"
													}
												]
											}
										},
										{
											"id": 3530,
											"name": "innerKeySelector",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Selector that chooses the join key from the inner sequence."
											},
											"type": {
												"type": "reference",
												"name": "SelectorFn",
												"id": 3625,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "InnerValueT"
													},
													{
														"type": "typeParameter",
														"name": "KeyT"
													}
												]
											}
										},
										{
											"id": 3531,
											"name": "resultSelector",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Selector that defines how to merge outer and inner values.\n\nImplementation from here:\n\n\thttp://blogs.geniuscode.net/RyanDHatch/?p=116\n"
											},
											"type": {
												"type": "reference",
												"name": "JoinFn",
												"id": 3631,
												"typeArguments": [
													{
														"type": "union",
														"types": [
															{
																"type": "typeParameter",
																"name": "ValueT"
															},
															{
																"type": "intrinsic",
																"name": "null"
															}
														]
													},
													{
														"type": "union",
														"types": [
															{
																"type": "typeParameter",
																"name": "InnerValueT"
															},
															{
																"type": "intrinsic",
																"name": "null"
															}
														]
													},
													{
														"type": "typeParameter",
														"name": "ResultValueT"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "ISeries",
										"id": 2287,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "number"
											},
											{
												"type": "typeParameter",
												"name": "ResultValueT"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Series.joinOuterLeft",
										"id": 3180
									},
									"implementationOf": {
										"type": "reference",
										"name": "IOrderedSeries.joinOuterLeft",
										"id": 2831
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/series.ts",
									"line": 2384,
									"character": 17
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Series.joinOuterLeft",
								"id": 3180
							},
							"implementationOf": {
								"type": "reference",
								"name": "IOrderedSeries.joinOuterLeft",
								"id": 2830
							}
						},
						{
							"id": 3532,
							"name": "joinOuterRight",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"signatures": [
								{
									"id": 3533,
									"name": "joinOuterRight",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Performs a right outer join on two series. Correlates the elements based on matching keys.\nIncludes right elements that have no correlation.",
										"returns": "Returns the joined series.\n"
									},
									"typeParameter": [
										{
											"id": 3534,
											"name": "KeyT",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										},
										{
											"id": 3535,
											"name": "InnerIndexT",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										},
										{
											"id": 3536,
											"name": "InnerValueT",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										},
										{
											"id": 3537,
											"name": "ResultValueT",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										}
									],
									"parameters": [
										{
											"id": 3538,
											"name": "inner",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The inner series to join."
											},
											"type": {
												"type": "reference",
												"name": "ISeries",
												"id": 2287,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "InnerIndexT"
													},
													{
														"type": "typeParameter",
														"name": "InnerValueT"
													}
												]
											}
										},
										{
											"id": 3539,
											"name": "outerKeySelector",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Selector that chooses the join key from the outer sequence."
											},
											"type": {
												"type": "reference",
												"name": "SelectorFn",
												"id": 3625,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "ValueT"
													},
													{
														"type": "typeParameter",
														"name": "KeyT"
													}
												]
											}
										},
										{
											"id": 3540,
											"name": "innerKeySelector",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Selector that chooses the join key from the inner sequence."
											},
											"type": {
												"type": "reference",
												"name": "SelectorFn",
												"id": 3625,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "InnerValueT"
													},
													{
														"type": "typeParameter",
														"name": "KeyT"
													}
												]
											}
										},
										{
											"id": 3541,
											"name": "resultSelector",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Selector that defines how to merge outer and inner values.\n\nImplementation from here:\n\n\thttp://blogs.geniuscode.net/RyanDHatch/?p=116\n"
											},
											"type": {
												"type": "reference",
												"name": "JoinFn",
												"id": 3631,
												"typeArguments": [
													{
														"type": "union",
														"types": [
															{
																"type": "typeParameter",
																"name": "ValueT"
															},
															{
																"type": "intrinsic",
																"name": "null"
															}
														]
													},
													{
														"type": "union",
														"types": [
															{
																"type": "typeParameter",
																"name": "InnerValueT"
															},
															{
																"type": "intrinsic",
																"name": "null"
															}
														]
													},
													{
														"type": "typeParameter",
														"name": "ResultValueT"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "ISeries",
										"id": 2287,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "number"
											},
											{
												"type": "typeParameter",
												"name": "ResultValueT"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Series.joinOuterRight",
										"id": 3190
									},
									"implementationOf": {
										"type": "reference",
										"name": "IOrderedSeries.joinOuterRight",
										"id": 2841
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/series.ts",
									"line": 2425,
									"character": 18
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Series.joinOuterRight",
								"id": 3190
							},
							"implementationOf": {
								"type": "reference",
								"name": "IOrderedSeries.joinOuterRight",
								"id": 2840
							}
						},
						{
							"id": 3329,
							"name": "last",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"signatures": [
								{
									"id": 3330,
									"name": "last",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Get the last value of the series.",
										"returns": "Returns the last value of the series.\n"
									},
									"type": {
										"type": "typeParameter",
										"name": "ValueT"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Series.last",
										"id": 2987
									},
									"implementationOf": {
										"type": "reference",
										"name": "IOrderedSeries.last",
										"id": 2664
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/series.ts",
									"line": 1397,
									"character": 8
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Series.last",
								"id": 2987
							},
							"implementationOf": {
								"type": "reference",
								"name": "IOrderedSeries.last",
								"id": 2663
							}
						},
						{
							"id": 3414,
							"name": "max",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"signatures": [
								{
									"id": 3415,
									"name": "max",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Get the max value in the series.",
										"returns": "Returns the maximum of the number values in the series.\n"
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Series.max",
										"id": 3072
									},
									"implementationOf": {
										"type": "reference",
										"name": "IOrderedSeries.max",
										"id": 2732
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/series.ts",
									"line": 1961,
									"character": 7
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Series.max",
								"id": 3072
							},
							"implementationOf": {
								"type": "reference",
								"name": "IOrderedSeries.max",
								"id": 2731
							}
						},
						{
							"id": 3410,
							"name": "median",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"signatures": [
								{
									"id": 3411,
									"name": "median",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Get the median value in the series. Not this sorts the series, so can be expensive.",
										"returns": "Returns the median of the values in the series.\n"
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Series.median",
										"id": 3068
									},
									"implementationOf": {
										"type": "reference",
										"name": "IOrderedSeries.median",
										"id": 2728
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/series.ts",
									"line": 1921,
									"character": 10
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Series.median",
								"id": 3068
							},
							"implementationOf": {
								"type": "reference",
								"name": "IOrderedSeries.median",
								"id": 2727
							}
						},
						{
							"id": 3412,
							"name": "min",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"signatures": [
								{
									"id": 3413,
									"name": "min",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Get the min value in the series.",
										"returns": "Returns the minimum of the number values in the series.\n"
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Series.min",
										"id": 3070
									},
									"implementationOf": {
										"type": "reference",
										"name": "IOrderedSeries.min",
										"id": 2730
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/series.ts",
									"line": 1950,
									"character": 7
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Series.min",
								"id": 3070
							},
							"implementationOf": {
								"type": "reference",
								"name": "IOrderedSeries.min",
								"id": 2729
							}
						},
						{
							"id": 3352,
							"name": "none",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"signatures": [
								{
									"id": 3353,
									"name": "none",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Determine if the predicate returns truthy for none of the values in the series.\nReturns true for an empty series.\nReturns true if the predicate always returns falsy.\nOtherwise returns false.\nIf no predicate is specified the value itself is checked.",
										"returns": "Returns true if the predicate has returned truthy for no values in the series, otherwise returns false.\n"
									},
									"parameters": [
										{
											"id": 3354,
											"name": "predicate",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "reference",
												"name": "PredicateFn",
												"id": 3639,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "ValueT"
													}
												]
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Series.none",
										"id": 3010
									},
									"implementationOf": {
										"type": "reference",
										"name": "IOrderedSeries.none",
										"id": 2687
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/series.ts",
									"line": 1586,
									"character": 8
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Series.none",
								"id": 3010
							},
							"implementationOf": {
								"type": "reference",
								"name": "IOrderedSeries.none",
								"id": 2686
							}
						},
						{
							"id": 3473,
							"name": "orderBy",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"signatures": [
								{
									"id": 3474,
									"name": "orderBy",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Sorts the series by a value defined by the selector (ascending).",
										"returns": "Returns a new ordered series that has been sorted by the value returned by the selector.\n"
									},
									"typeParameter": [
										{
											"id": 3475,
											"name": "SortT",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										}
									],
									"parameters": [
										{
											"id": 3476,
											"name": "selector",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Selects the value to sort by.\n"
											},
											"type": {
												"type": "reference",
												"name": "SelectorWithIndexFn",
												"id": 3569,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "ValueT"
													},
													{
														"type": "typeParameter",
														"name": "SortT"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "IOrderedSeries",
										"id": 2574,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "IndexT"
											},
											{
												"type": "typeParameter",
												"name": "ValueT"
											},
											{
												"type": "typeParameter",
												"name": "SortT"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Series.orderBy",
										"id": 3131
									},
									"implementationOf": {
										"type": "reference",
										"name": "IOrderedSeries.orderBy",
										"id": 2782
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/series.ts",
									"line": 2156,
									"character": 11
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Series.orderBy",
								"id": 3131
							},
							"implementationOf": {
								"type": "reference",
								"name": "IOrderedSeries.orderBy",
								"id": 2781
							}
						},
						{
							"id": 3477,
							"name": "orderByDescending",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"signatures": [
								{
									"id": 3478,
									"name": "orderByDescending",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Sorts the series by a value defined by the selector (descending).",
										"returns": "Returns a new ordered series that has been sorted by the value returned by the selector.\n"
									},
									"typeParameter": [
										{
											"id": 3479,
											"name": "SortT",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										}
									],
									"parameters": [
										{
											"id": 3480,
											"name": "selector",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Selects the value to sort by.\n"
											},
											"type": {
												"type": "reference",
												"name": "SelectorWithIndexFn",
												"id": 3569,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "ValueT"
													},
													{
														"type": "typeParameter",
														"name": "SortT"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "IOrderedSeries",
										"id": 2574,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "IndexT"
											},
											{
												"type": "typeParameter",
												"name": "ValueT"
											},
											{
												"type": "typeParameter",
												"name": "SortT"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Series.orderByDescending",
										"id": 3135
									},
									"implementationOf": {
										"type": "reference",
										"name": "IOrderedSeries.orderByDescending",
										"id": 2786
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/series.ts",
									"line": 2168,
									"character": 21
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Series.orderByDescending",
								"id": 3135
							},
							"implementationOf": {
								"type": "reference",
								"name": "IOrderedSeries.orderByDescending",
								"id": 2785
							}
						},
						{
							"id": 3390,
							"name": "parseDates",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"signatures": [
								{
									"id": 3391,
									"name": "parseDates",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Parse a series with string values to a series with date values.",
										"returns": "Returns a new series where string values from the original series have been parsed to Date values.\n"
									},
									"parameters": [
										{
											"id": 3392,
											"name": "formatString",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "undefined"
													},
													{
														"type": "intrinsic",
														"name": "string"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "ISeries",
										"id": 2287,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "IndexT"
											},
											{
												"type": "reference",
												"name": "Date"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Series.parseDates",
										"id": 3048
									},
									"implementationOf": {
										"type": "reference",
										"name": "IOrderedSeries.parseDates",
										"id": 2712
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/series.ts",
									"line": 1793,
									"character": 14
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Series.parseDates",
								"id": 3048
							},
							"implementationOf": {
								"type": "reference",
								"name": "IOrderedSeries.parseDates",
								"id": 2711
							}
						},
						{
							"id": 3383,
							"name": "parseFloats",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"signatures": [
								{
									"id": 3384,
									"name": "parseFloats",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Parse a series with string values to a series with float values.",
										"returns": "Returns a new series where string values from the original series have been parsed to floating-point values.\n"
									},
									"type": {
										"type": "reference",
										"name": "ISeries",
										"id": 2287,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "IndexT"
											},
											{
												"type": "intrinsic",
												"name": "number"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Series.parseFloats",
										"id": 3041
									},
									"implementationOf": {
										"type": "reference",
										"name": "IOrderedSeries.parseFloats",
										"id": 2710
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/series.ts",
									"line": 1764,
									"character": 15
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Series.parseFloats",
								"id": 3041
							},
							"implementationOf": {
								"type": "reference",
								"name": "IOrderedSeries.parseFloats",
								"id": 2709
							}
						},
						{
							"id": 3377,
							"name": "parseInts",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"signatures": [
								{
									"id": 3378,
									"name": "parseInts",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Parse a series with string values to a series with int values.",
										"returns": "Returns a new series where string values from the original series have been parsed to integer values.\n"
									},
									"type": {
										"type": "reference",
										"name": "ISeries",
										"id": 2287,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "IndexT"
											},
											{
												"type": "intrinsic",
												"name": "number"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Series.parseInts",
										"id": 3035
									},
									"implementationOf": {
										"type": "reference",
										"name": "IOrderedSeries.parseInts",
										"id": 2708
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/series.ts",
									"line": 1737,
									"character": 13
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Series.parseInts",
								"id": 3035
							},
							"implementationOf": {
								"type": "reference",
								"name": "IOrderedSeries.parseInts",
								"id": 2707
							}
						},
						{
							"id": 3305,
							"name": "percentChange",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"signatures": [
								{
									"id": 3306,
									"name": "percentChange",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Compute the percent change between each pair of values.\nPercentages are expressed as 0-1 values.",
										"returns": "Returns a new series where each value indicates the percent change from the previous number value in the original series.\n"
									},
									"type": {
										"type": "reference",
										"name": "ISeries",
										"id": 2287,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "IndexT"
											},
											{
												"type": "intrinsic",
												"name": "number"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Series.percentChange",
										"id": 2963
									},
									"implementationOf": {
										"type": "reference",
										"name": "IOrderedSeries.percentChange",
										"id": 2640
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/series.ts",
									"line": 1261,
									"character": 17
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Series.percentChange",
								"id": 2963
							},
							"implementationOf": {
								"type": "reference",
								"name": "IOrderedSeries.percentChange",
								"id": 2639
							}
						},
						{
							"id": 3260,
							"name": "resetIndex",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"signatures": [
								{
									"id": 3261,
									"name": "resetIndex",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Resets the index of the series back to the default zero-based sequential integer index.",
										"returns": "Returns a new series with the index reset to the default zero-based index.\n"
									},
									"type": {
										"type": "reference",
										"name": "ISeries",
										"id": 2287,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "number"
											},
											{
												"type": "typeParameter",
												"name": "ValueT"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Series.resetIndex",
										"id": 2918
									},
									"implementationOf": {
										"type": "reference",
										"name": "IOrderedSeries.resetIndex",
										"id": 2595
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/series.ts",
									"line": 1058,
									"character": 14
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Series.resetIndex",
								"id": 2918
							},
							"implementationOf": {
								"type": "reference",
								"name": "IOrderedSeries.resetIndex",
								"id": 2594
							}
						},
						{
							"id": 3416,
							"name": "reverse",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"signatures": [
								{
									"id": 3417,
									"name": "reverse",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Reverse the series.",
										"returns": "Returns a new series that is the reverse of the input.\n"
									},
									"type": {
										"type": "reference",
										"name": "ISeries",
										"id": 2287,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "IndexT"
											},
											{
												"type": "typeParameter",
												"name": "ValueT"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Series.reverse",
										"id": 3074
									},
									"implementationOf": {
										"type": "reference",
										"name": "IOrderedSeries.reverse",
										"id": 2734
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/series.ts",
									"line": 1972,
									"character": 11
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Series.reverse",
								"id": 3074
							},
							"implementationOf": {
								"type": "reference",
								"name": "IOrderedSeries.reverse",
								"id": 2733
							}
						},
						{
							"id": 3290,
							"name": "rollingWindow",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"signatures": [
								{
									"id": 3291,
									"name": "rollingWindow",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Segment a series into 'rolling windows'. Returns a new series. Each value in the new series contains a 'window' (or segment) of the original series.",
										"returns": "Returns a new series, each value of which is a 'window' (or segment) of the original series.\n"
									},
									"parameters": [
										{
											"id": 3292,
											"name": "period",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The number of values in the window.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "ISeries",
										"id": 2287,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "number"
											},
											{
												"type": "reference",
												"name": "ISeries",
												"id": 2287,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "IndexT"
													},
													{
														"type": "typeParameter",
														"name": "ValueT"
													}
												]
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Series.rollingWindow",
										"id": 2948
									},
									"implementationOf": {
										"type": "reference",
										"name": "IOrderedSeries.rollingWindow",
										"id": 2625
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/series.ts",
									"line": 1180,
									"character": 17
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Series.rollingWindow",
								"id": 2948
							},
							"implementationOf": {
								"type": "reference",
								"name": "IOrderedSeries.rollingWindow",
								"id": 2624
							}
						},
						{
							"id": 3279,
							"name": "select",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"signatures": [
								{
									"id": 3280,
									"name": "select",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Generate a new series based by calling the selector function on each value.",
										"returns": "Returns a new series that has been transformed by the selector function.\n"
									},
									"typeParameter": [
										{
											"id": 3281,
											"name": "ToT",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										}
									],
									"parameters": [
										{
											"id": 3282,
											"name": "selector",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Selector function that transforms each value to create a new series.\n"
											},
											"type": {
												"type": "reference",
												"name": "SelectorWithIndexFn",
												"id": 3569,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "ValueT"
													},
													{
														"type": "typeParameter",
														"name": "ToT"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "ISeries",
										"id": 2287,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "IndexT"
											},
											{
												"type": "typeParameter",
												"name": "ToT"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Series.select",
										"id": 2937
									},
									"implementationOf": {
										"type": "reference",
										"name": "IOrderedSeries.select",
										"id": 2614
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/series.ts",
									"line": 1120,
									"character": 10
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Series.select",
								"id": 2937
							},
							"implementationOf": {
								"type": "reference",
								"name": "IOrderedSeries.select",
								"id": 2613
							}
						},
						{
							"id": 3283,
							"name": "selectMany",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"signatures": [
								{
									"id": 3284,
									"name": "selectMany",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Generate a new series based on the results of the selector function.",
										"returns": "Returns a new series with values that have been produced by the selector function.\n"
									},
									"typeParameter": [
										{
											"id": 3285,
											"name": "ToT",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										}
									],
									"parameters": [
										{
											"id": 3286,
											"name": "selector",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Selector function that transforms each value into a list of values.\n"
											},
											"type": {
												"type": "reference",
												"name": "SelectorWithIndexFn",
												"id": 3569,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "ValueT"
													},
													{
														"type": "reference",
														"name": "Iterable",
														"typeArguments": [
															{
																"type": "typeParameter",
																"name": "ToT"
															}
														]
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "ISeries",
										"id": 2287,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "IndexT"
											},
											{
												"type": "typeParameter",
												"name": "ToT"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Series.selectMany",
										"id": 2941
									},
									"implementationOf": {
										"type": "reference",
										"name": "IOrderedSeries.selectMany",
										"id": 2618
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/series.ts",
									"line": 1136,
									"character": 14
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Series.selectMany",
								"id": 2941
							},
							"implementationOf": {
								"type": "reference",
								"name": "IOrderedSeries.selectMany",
								"id": 2617
							}
						},
						{
							"id": 3296,
							"name": "sequentialDistinct",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"signatures": [
								{
									"id": 3297,
									"name": "sequentialDistinct",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Collapase distinct values that happen to be sequential.",
										"returns": "Returns a new series with duplicate values that are sequential removed.\n"
									},
									"typeParameter": [
										{
											"id": 3298,
											"name": "ToT",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										}
									],
									"parameters": [
										{
											"id": 3299,
											"name": "selector",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "reference",
												"name": "SelectorFn",
												"id": 3625,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "ValueT"
													},
													{
														"type": "typeParameter",
														"name": "ToT"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "ISeries",
										"id": 2287,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "IndexT"
											},
											{
												"type": "typeParameter",
												"name": "ValueT"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Series.sequentialDistinct",
										"id": 2954
									},
									"implementationOf": {
										"type": "reference",
										"name": "IOrderedSeries.sequentialDistinct",
										"id": 2631
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/series.ts",
									"line": 1212,
									"character": 22
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Series.sequentialDistinct",
								"id": 2954
							},
							"implementationOf": {
								"type": "reference",
								"name": "IOrderedSeries.sequentialDistinct",
								"id": 2630
							}
						},
						{
							"id": 3307,
							"name": "skip",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"signatures": [
								{
									"id": 3308,
									"name": "skip",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Skip a number of values in the series.",
										"returns": "Returns a new series or dataframe with the specified number of values skipped.\n"
									},
									"parameters": [
										{
											"id": 3309,
											"name": "numValues",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Number of values to skip.     *"
											},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "ISeries",
										"id": 2287,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "IndexT"
											},
											{
												"type": "typeParameter",
												"name": "ValueT"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Series.skip",
										"id": 2965
									},
									"implementationOf": {
										"type": "reference",
										"name": "IOrderedSeries.skip",
										"id": 2642
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/series.ts",
									"line": 1281,
									"character": 8
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Series.skip",
								"id": 2965
							},
							"implementationOf": {
								"type": "reference",
								"name": "IOrderedSeries.skip",
								"id": 2641
							}
						},
						{
							"id": 3313,
							"name": "skipUntil",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"signatures": [
								{
									"id": 3314,
									"name": "skipUntil",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Skips values in the series until a condition is met.",
										"returns": "Returns a new series with all initial sequential values removed that don't match the predicate.\n"
									},
									"parameters": [
										{
											"id": 3315,
											"name": "predicate",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Return true to indicate the condition met.\n"
											},
											"type": {
												"type": "reference",
												"name": "PredicateFn",
												"id": 3639,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "ValueT"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "ISeries",
										"id": 2287,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "IndexT"
											},
											{
												"type": "typeParameter",
												"name": "ValueT"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Series.skipUntil",
										"id": 2971
									},
									"implementationOf": {
										"type": "reference",
										"name": "IOrderedSeries.skipUntil",
										"id": 2648
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/series.ts",
									"line": 1312,
									"character": 13
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Series.skipUntil",
								"id": 2971
							},
							"implementationOf": {
								"type": "reference",
								"name": "IOrderedSeries.skipUntil",
								"id": 2647
							}
						},
						{
							"id": 3310,
							"name": "skipWhile",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"signatures": [
								{
									"id": 3311,
									"name": "skipWhile",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Skips values in the series while a condition is met.",
										"returns": "Returns a new series with all initial sequential values removed that match the predicate.\n"
									},
									"parameters": [
										{
											"id": 3312,
											"name": "predicate",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Return true to indicate the condition met.\n"
											},
											"type": {
												"type": "reference",
												"name": "PredicateFn",
												"id": 3639,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "ValueT"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "ISeries",
										"id": 2287,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "IndexT"
											},
											{
												"type": "typeParameter",
												"name": "ValueT"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Series.skipWhile",
										"id": 2968
									},
									"implementationOf": {
										"type": "reference",
										"name": "IOrderedSeries.skipWhile",
										"id": 2645
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/series.ts",
									"line": 1296,
									"character": 13
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Series.skipWhile",
								"id": 2968
							},
							"implementationOf": {
								"type": "reference",
								"name": "IOrderedSeries.skipWhile",
								"id": 2644
							}
						},
						{
							"id": 3355,
							"name": "startAt",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"signatures": [
								{
									"id": 3356,
									"name": "startAt",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Get a new series containing all values starting at and after the specified index value.",
										"returns": "Returns a new series containing all values starting at and after the specified index value.\n"
									},
									"parameters": [
										{
											"id": 3357,
											"name": "indexValue",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The index value to search for before starting the new series.\n"
											},
											"type": {
												"type": "typeParameter",
												"name": "IndexT"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "ISeries",
										"id": 2287,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "IndexT"
											},
											{
												"type": "typeParameter",
												"name": "ValueT"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Series.startAt",
										"id": 3013
									},
									"implementationOf": {
										"type": "reference",
										"name": "IOrderedSeries.startAt",
										"id": 2690
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/series.ts",
									"line": 1619,
									"character": 11
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Series.startAt",
								"id": 3013
							},
							"implementationOf": {
								"type": "reference",
								"name": "IOrderedSeries.startAt",
								"id": 2689
							}
						},
						{
							"id": 3406,
							"name": "sum",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"signatures": [
								{
									"id": 3407,
									"name": "sum",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Sum the values in a series.",
										"returns": "Returns the sum of the number values in the series.\n"
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Series.sum",
										"id": 3064
									},
									"implementationOf": {
										"type": "reference",
										"name": "IOrderedSeries.sum",
										"id": 2724
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/series.ts",
									"line": 1890,
									"character": 7
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Series.sum",
								"id": 3064
							},
							"implementationOf": {
								"type": "reference",
								"name": "IOrderedSeries.sum",
								"id": 2723
							}
						},
						{
							"id": 3337,
							"name": "tail",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"signatures": [
								{
									"id": 3338,
									"name": "tail",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Get X values from the end of the series.\nPass in a negative value to get all items at the tail except X values at the head.",
										"returns": "Returns a new series that has only the specified number of values taken from the end of the input sequence.\n"
									},
									"parameters": [
										{
											"id": 3339,
											"name": "numValues",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Number of values to take.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "ISeries",
										"id": 2287,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "IndexT"
											},
											{
												"type": "typeParameter",
												"name": "ValueT"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Series.tail",
										"id": 2995
									},
									"implementationOf": {
										"type": "reference",
										"name": "IOrderedSeries.tail",
										"id": 2672
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/series.ts",
									"line": 1467,
									"character": 8
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Series.tail",
								"id": 2995
							},
							"implementationOf": {
								"type": "reference",
								"name": "IOrderedSeries.tail",
								"id": 2671
							}
						},
						{
							"id": 3316,
							"name": "take",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"signatures": [
								{
									"id": 3317,
									"name": "take",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Take a number of rows in the series.",
										"returns": "Returns a new series with up to the specified number of values included.\n"
									},
									"parameters": [
										{
											"id": 3318,
											"name": "numRows",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Number of rows to take.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "ISeries",
										"id": 2287,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "IndexT"
											},
											{
												"type": "typeParameter",
												"name": "ValueT"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Series.take",
										"id": 2974
									},
									"implementationOf": {
										"type": "reference",
										"name": "IOrderedSeries.take",
										"id": 2651
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/series.ts",
									"line": 1325,
									"character": 8
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Series.take",
								"id": 2974
							},
							"implementationOf": {
								"type": "reference",
								"name": "IOrderedSeries.take",
								"id": 2650
							}
						},
						{
							"id": 3322,
							"name": "takeUntil",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"signatures": [
								{
									"id": 3323,
									"name": "takeUntil",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Take values from the series until a condition is met.",
										"returns": "Returns a new series or dataframe that only includes the initial sequential values that have not matched the predicate.\n"
									},
									"parameters": [
										{
											"id": 3324,
											"name": "predicate",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Return true to indicate the condition met.\n"
											},
											"type": {
												"type": "reference",
												"name": "PredicateFn",
												"id": 3639,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "ValueT"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "ISeries",
										"id": 2287,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "IndexT"
											},
											{
												"type": "typeParameter",
												"name": "ValueT"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Series.takeUntil",
										"id": 2980
									},
									"implementationOf": {
										"type": "reference",
										"name": "IOrderedSeries.takeUntil",
										"id": 2657
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/series.ts",
									"line": 1358,
									"character": 13
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Series.takeUntil",
								"id": 2980
							},
							"implementationOf": {
								"type": "reference",
								"name": "IOrderedSeries.takeUntil",
								"id": 2656
							}
						},
						{
							"id": 3319,
							"name": "takeWhile",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"signatures": [
								{
									"id": 3320,
									"name": "takeWhile",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Take values from the series while a condition is met.",
										"returns": "Returns a new series that only includes the initial sequential values that have matched the predicate.\n"
									},
									"parameters": [
										{
											"id": 3321,
											"name": "predicate",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Return true to indicate the condition met.\n"
											},
											"type": {
												"type": "reference",
												"name": "PredicateFn",
												"id": 3639,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "ValueT"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "ISeries",
										"id": 2287,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "IndexT"
											},
											{
												"type": "typeParameter",
												"name": "ValueT"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Series.takeWhile",
										"id": 2977
									},
									"implementationOf": {
										"type": "reference",
										"name": "IOrderedSeries.takeWhile",
										"id": 2654
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/series.ts",
									"line": 1342,
									"character": 13
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Series.takeWhile",
								"id": 2977
							},
							"implementationOf": {
								"type": "reference",
								"name": "IOrderedSeries.takeWhile",
								"id": 2653
							}
						},
						{
							"id": 3244,
							"name": "thenBy",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"signatures": [
								{
									"id": 3245,
									"name": "thenBy",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Performs additional sorting (ascending).",
										"returns": "Returns a new series has been additionally sorted by the value returned by the selector.\n"
									},
									"typeParameter": [
										{
											"id": 3246,
											"name": "SortT",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										}
									],
									"parameters": [
										{
											"id": 3247,
											"name": "selector",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Selects the value to sort by.\n"
											},
											"type": {
												"type": "reference",
												"name": "SelectorWithIndexFn",
												"id": 3569,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "ValueT"
													},
													{
														"type": "typeParameter",
														"name": "SortT"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "IOrderedSeries",
										"id": 2574,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "IndexT"
											},
											{
												"type": "typeParameter",
												"name": "ValueT"
											},
											{
												"type": "typeParameter",
												"name": "SortT"
											}
										]
									},
									"implementationOf": {
										"type": "reference",
										"name": "IOrderedSeries.thenBy",
										"id": 2579
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/series.ts",
									"line": 2704,
									"character": 10
								}
							],
							"implementationOf": {
								"type": "reference",
								"name": "IOrderedSeries.thenBy",
								"id": 2578
							}
						},
						{
							"id": 3248,
							"name": "thenByDescending",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"signatures": [
								{
									"id": 3249,
									"name": "thenByDescending",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Performs additional sorting (descending).",
										"returns": "Returns a new series has been additionally sorted by the value returned by the selector.\n"
									},
									"typeParameter": [
										{
											"id": 3250,
											"name": "SortT",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										}
									],
									"parameters": [
										{
											"id": 3251,
											"name": "selector",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Selects the value to sort by.\n"
											},
											"type": {
												"type": "reference",
												"name": "SelectorWithIndexFn",
												"id": 3569,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "ValueT"
													},
													{
														"type": "typeParameter",
														"name": "SortT"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "IOrderedSeries",
										"id": 2574,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "IndexT"
											},
											{
												"type": "typeParameter",
												"name": "ValueT"
											},
											{
												"type": "typeParameter",
												"name": "SortT"
											}
										]
									},
									"implementationOf": {
										"type": "reference",
										"name": "IOrderedSeries.thenByDescending",
										"id": 2583
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/series.ts",
									"line": 2716,
									"character": 20
								}
							],
							"implementationOf": {
								"type": "reference",
								"name": "IOrderedSeries.thenByDescending",
								"id": 2582
							}
						},
						{
							"id": 3262,
							"name": "toArray",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"signatures": [
								{
									"id": 3263,
									"name": "toArray",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Extract values from the series as an array.\nThis forces lazy evaluation to complete.",
										"returns": "Returns an array of values contained within the series.\n"
									},
									"type": {
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "any"
										}
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Series.toArray",
										"id": 2920
									},
									"implementationOf": {
										"type": "reference",
										"name": "IOrderedSeries.toArray",
										"id": 2597
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/series.ts",
									"line": 1070,
									"character": 11
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Series.toArray",
								"id": 2920
							},
							"implementationOf": {
								"type": "reference",
								"name": "IOrderedSeries.toArray",
								"id": 2596
							}
						},
						{
							"id": 3266,
							"name": "toObject",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"signatures": [
								{
									"id": 3267,
									"name": "toObject",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Convert the series to a JavaScript object.",
										"returns": "Returns a JavaScript object generated from the input sequence by the key and value selector funtions.\n"
									},
									"typeParameter": [
										{
											"id": 3268,
											"name": "KeyT",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										},
										{
											"id": 3269,
											"name": "FieldT",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										},
										{
											"id": 3270,
											"name": "OutT",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										}
									],
									"parameters": [
										{
											"id": 3271,
											"name": "keySelector",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Function that selects keys for the resulting object."
											},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 3272,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"signatures": [
														{
															"id": 3273,
															"name": "__call",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {},
															"parameters": [
																{
																	"id": 3274,
																	"name": "value",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {},
																	"type": {
																		"type": "typeParameter",
																		"name": "ValueT"
																	}
																}
															],
															"type": {
																"type": "typeParameter",
																"name": "KeyT"
															}
														}
													],
													"sources": [
														{
															"fileName": "lib/series.ts",
															"line": 1105,
															"character": 64
														}
													]
												}
											}
										},
										{
											"id": 3275,
											"name": "valueSelector",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Function that selects values for the resulting object.\n"
											},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 3276,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"signatures": [
														{
															"id": 3277,
															"name": "__call",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {},
															"parameters": [
																{
																	"id": 3278,
																	"name": "value",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {},
																	"type": {
																		"type": "typeParameter",
																		"name": "ValueT"
																	}
																}
															],
															"type": {
																"type": "typeParameter",
																"name": "FieldT"
															}
														}
													],
													"sources": [
														{
															"fileName": "lib/series.ts",
															"line": 1105,
															"character": 104
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "typeParameter",
										"name": "OutT"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Series.toObject",
										"id": 2924
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/series.ts",
									"line": 1105,
									"character": 12
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Series.toObject",
								"id": 2924
							},
							"implementationOf": {
								"type": "reference",
								"name": "IOrderedSeries.toObject",
								"id": 2600
							}
						},
						{
							"id": 3264,
							"name": "toPairs",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"signatures": [
								{
									"id": 3265,
									"name": "toPairs",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Retreive the index and values from the Series as an array of pairs.\nEach pair is [index, value].\nThis forces lazy evaluation to complete.",
										"returns": "Returns an array of pairs that contains the series content. Each pair is a two element array that contains an index and a value.\n"
									},
									"type": {
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "Object"
										}
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Series.toPairs",
										"id": 2922
									},
									"implementationOf": {
										"type": "reference",
										"name": "IOrderedSeries.toPairs",
										"id": 2599
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/series.ts",
									"line": 1087,
									"character": 11
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Series.toPairs",
								"id": 2922
							},
							"implementationOf": {
								"type": "reference",
								"name": "IOrderedSeries.toPairs",
								"id": 2598
							}
						},
						{
							"id": 3371,
							"name": "toString",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"signatures": [
								{
									"id": 3372,
									"name": "toString",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Format the series for display as a string.\nThis forces lazy evaluation to complete.",
										"returns": "Generates and returns a string representation of the series or dataframe.\n"
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Series.toString",
										"id": 3029
									},
									"implementationOf": {
										"type": "reference",
										"name": "IOrderedSeries.toString",
										"id": 2706
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/series.ts",
									"line": 1698,
									"character": 12
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Series.toString",
								"id": 3029
							},
							"implementationOf": {
								"type": "reference",
								"name": "IOrderedSeries.toString",
								"id": 2705
							}
						},
						{
							"id": 3397,
							"name": "toStrings",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"signatures": [
								{
									"id": 3398,
									"name": "toStrings",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Convert a series of values of different types to a series of string values.",
										"returns": "Returns a new series where the values from the original series have been stringified.\n"
									},
									"parameters": [
										{
											"id": 3399,
											"name": "formatString",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "undefined"
													},
													{
														"type": "intrinsic",
														"name": "string"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "ISeries",
										"id": 2287,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "IndexT"
											},
											{
												"type": "intrinsic",
												"name": "string"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Series.toStrings",
										"id": 3055
									},
									"implementationOf": {
										"type": "reference",
										"name": "IOrderedSeries.toStrings",
										"id": 2715
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/series.ts",
									"line": 1830,
									"character": 13
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Series.toStrings",
								"id": 3055
							},
							"implementationOf": {
								"type": "reference",
								"name": "IOrderedSeries.toStrings",
								"id": 2714
							}
						},
						{
							"id": 3542,
							"name": "truncateStrings",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"signatures": [
								{
									"id": 3543,
									"name": "truncateStrings",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Produces a new series with all string values truncated to the requested maximum length.",
										"returns": "Returns a new series with strings that are truncated to the specified maximum length.\n"
									},
									"parameters": [
										{
											"id": 3544,
											"name": "maxLength",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The maximum length of the string values after truncation.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "ISeries",
										"id": 2287,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "IndexT"
											},
											{
												"type": "typeParameter",
												"name": "ValueT"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Series.truncateStrings",
										"id": 3200
									},
									"implementationOf": {
										"type": "reference",
										"name": "IOrderedSeries.truncateStrings",
										"id": 2851
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/series.ts",
									"line": 2457,
									"character": 19
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Series.truncateStrings",
								"id": 3200
							},
							"implementationOf": {
								"type": "reference",
								"name": "IOrderedSeries.truncateStrings",
								"id": 2850
							}
						},
						{
							"id": 3481,
							"name": "union",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"signatures": [
								{
									"id": 3482,
									"name": "union",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Returns the unique union of values between two series.",
										"returns": "Returns the union of two series.\n"
									},
									"typeParameter": [
										{
											"id": 3483,
											"name": "KeyT",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										}
									],
									"parameters": [
										{
											"id": 3484,
											"name": "other",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The other series to combine."
											},
											"type": {
												"type": "reference",
												"name": "ISeries",
												"id": 2287,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "IndexT"
													},
													{
														"type": "typeParameter",
														"name": "ValueT"
													}
												]
											}
										},
										{
											"id": 3485,
											"name": "selector",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "reference",
												"name": "SelectorFn",
												"id": 3625,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "ValueT"
													},
													{
														"type": "typeParameter",
														"name": "KeyT"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "ISeries",
										"id": 2287,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "IndexT"
											},
											{
												"type": "typeParameter",
												"name": "ValueT"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Series.union",
										"id": 3139
									},
									"implementationOf": {
										"type": "reference",
										"name": "IOrderedSeries.union",
										"id": 2790
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/series.ts",
									"line": 2181,
									"character": 9
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Series.union",
								"id": 3139
							},
							"implementationOf": {
								"type": "reference",
								"name": "IOrderedSeries.union",
								"id": 2789
							}
						},
						{
							"id": 3293,
							"name": "variableWindow",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"signatures": [
								{
									"id": 3294,
									"name": "variableWindow",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Groups sequential values into variable length 'windows'.",
										"returns": "Returns a series of groups. Each group is itself a series that contains the values in the 'window'.\n"
									},
									"parameters": [
										{
											"id": 3295,
											"name": "comparer",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Predicate that compares two values and returns true if they should be in the same window.\n"
											},
											"type": {
												"type": "reference",
												"name": "ComparerFn",
												"id": 3651,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "ValueT"
													},
													{
														"type": "typeParameter",
														"name": "ValueT"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "ISeries",
										"id": 2287,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "number"
											},
											{
												"type": "reference",
												"name": "ISeries",
												"id": 2287,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "IndexT"
													},
													{
														"type": "typeParameter",
														"name": "ValueT"
													}
												]
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Series.variableWindow",
										"id": 2951
									},
									"implementationOf": {
										"type": "reference",
										"name": "IOrderedSeries.variableWindow",
										"id": 2628
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/series.ts",
									"line": 1196,
									"character": 18
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Series.variableWindow",
								"id": 2951
							},
							"implementationOf": {
								"type": "reference",
								"name": "IOrderedSeries.variableWindow",
								"id": 2627
							}
						},
						{
							"id": 3340,
							"name": "where",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"signatures": [
								{
									"id": 3341,
									"name": "where",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Filter a series by a predicate selector.",
										"returns": "Returns a new series containing only the values that match the predicate.\n"
									},
									"parameters": [
										{
											"id": 3342,
											"name": "predicate",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Predicte function to filter rows of the series.\n"
											},
											"type": {
												"type": "reference",
												"name": "PredicateFn",
												"id": 3639,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "ValueT"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "ISeries",
										"id": 2287,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "IndexT"
											},
											{
												"type": "typeParameter",
												"name": "ValueT"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Series.where",
										"id": 2998
									},
									"implementationOf": {
										"type": "reference",
										"name": "IOrderedSeries.where",
										"id": 2675
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/series.ts",
									"line": 1486,
									"character": 9
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Series.where",
								"id": 2998
							},
							"implementationOf": {
								"type": "reference",
								"name": "IOrderedSeries.where",
								"id": 2674
							}
						},
						{
							"id": 3287,
							"name": "window",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"signatures": [
								{
									"id": 3288,
									"name": "window",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Segment a series into 'windows'. Returns a new series. Each value in the new series contains a 'window' (or segment) of the original series.\nUse select or selectPairs to aggregate.",
										"returns": "Returns a new series, each value of which is a 'window' (or segment) of the original series.\n"
									},
									"parameters": [
										{
											"id": 3289,
											"name": "period",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The number of values in the window.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "ISeries",
										"id": 2287,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "number"
											},
											{
												"type": "reference",
												"name": "ISeries",
												"id": 2287,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "IndexT"
													},
													{
														"type": "typeParameter",
														"name": "ValueT"
													}
												]
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Series.window",
										"id": 2945
									},
									"implementationOf": {
										"type": "reference",
										"name": "IOrderedSeries.window",
										"id": 2622
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/series.ts",
									"line": 1164,
									"character": 10
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Series.window",
								"id": 2945
							},
							"implementationOf": {
								"type": "reference",
								"name": "IOrderedSeries.window",
								"id": 2621
							}
						},
						{
							"id": 3256,
							"name": "withIndex",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"signatures": [
								{
									"id": 3257,
									"name": "withIndex",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Apply a new index to the Series.",
										"returns": "Returns a new series with the specified index attached.\n"
									},
									"typeParameter": [
										{
											"id": 3258,
											"name": "NewIndexT",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										}
									],
									"parameters": [
										{
											"id": 3259,
											"name": "newIndex",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The new array or iterable to apply to the dataframe. Can also be a selector to choose the index for each row in the dataframe.\n"
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "reference",
														"name": "Iterable",
														"typeArguments": [
															{
																"type": "typeParameter",
																"name": "NewIndexT"
															}
														]
													},
													{
														"type": "reference",
														"name": "SelectorFn",
														"id": 3625,
														"typeArguments": [
															{
																"type": "typeParameter",
																"name": "ValueT"
															},
															{
																"type": "typeParameter",
																"name": "NewIndexT"
															}
														]
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "ISeries",
										"id": 2287,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "NewIndexT"
											},
											{
												"type": "typeParameter",
												"name": "ValueT"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Series.withIndex",
										"id": 2914
									},
									"implementationOf": {
										"type": "reference",
										"name": "IOrderedSeries.withIndex",
										"id": 2591
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/series.ts",
									"line": 1035,
									"character": 13
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Series.withIndex",
								"id": 2914
							},
							"implementationOf": {
								"type": "reference",
								"name": "IOrderedSeries.withIndex",
								"id": 2590
							}
						},
						{
							"id": 3445,
							"name": "zip",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"signatures": [
								{
									"id": 3446,
									"name": "zip",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Zip together multiple series to create a new series.\nPreserves the index of the first series.",
										"returns": "Returns a single series concatenated from multiple input series.\n"
									},
									"typeParameter": [
										{
											"id": 3447,
											"name": "Index2T",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										},
										{
											"id": 3448,
											"name": "Value2T",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										},
										{
											"id": 3449,
											"name": "ResultT",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										}
									],
									"parameters": [
										{
											"id": 3450,
											"name": "s2",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "ISeries",
												"id": 2287,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "Index2T"
													},
													{
														"type": "typeParameter",
														"name": "Value2T"
													}
												]
											}
										},
										{
											"id": 3451,
											"name": "zipper",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Zipper function that produces a new series based on the input series.\n"
											},
											"type": {
												"type": "reference",
												"name": "Zip2Fn",
												"id": 3582,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "ValueT"
													},
													{
														"type": "typeParameter",
														"name": "Value2T"
													},
													{
														"type": "typeParameter",
														"name": "ResultT"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "ISeries",
										"id": 2287,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "IndexT"
											},
											{
												"type": "typeParameter",
												"name": "ResultT"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Series.zip",
										"id": 3103
									},
									"implementationOf": {
										"type": "reference",
										"name": "IOrderedSeries.zip",
										"id": 2751
									}
								},
								{
									"id": 3452,
									"name": "zip",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"typeParameter": [
										{
											"id": 3453,
											"name": "Index2T",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										},
										{
											"id": 3454,
											"name": "Value2T",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										},
										{
											"id": 3455,
											"name": "Index3T",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										},
										{
											"id": 3456,
											"name": "Value3T",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										},
										{
											"id": 3457,
											"name": "ResultT",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										}
									],
									"parameters": [
										{
											"id": 3458,
											"name": "s2",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "ISeries",
												"id": 2287,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "Index2T"
													},
													{
														"type": "typeParameter",
														"name": "Value2T"
													}
												]
											}
										},
										{
											"id": 3459,
											"name": "s3",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "ISeries",
												"id": 2287,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "Index3T"
													},
													{
														"type": "typeParameter",
														"name": "Value3T"
													}
												]
											}
										},
										{
											"id": 3460,
											"name": "zipper",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Zip3Fn",
												"id": 3590,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "ValueT"
													},
													{
														"type": "typeParameter",
														"name": "Value2T"
													},
													{
														"type": "typeParameter",
														"name": "Value3T"
													},
													{
														"type": "typeParameter",
														"name": "ResultT"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "ISeries",
										"id": 2287,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "IndexT"
											},
											{
												"type": "typeParameter",
												"name": "ResultT"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Series.zip",
										"id": 3103
									},
									"implementationOf": {
										"type": "reference",
										"name": "IOrderedSeries.zip",
										"id": 2757
									}
								},
								{
									"id": 3461,
									"name": "zip",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"typeParameter": [
										{
											"id": 3462,
											"name": "Index2T",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										},
										{
											"id": 3463,
											"name": "Value2T",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										},
										{
											"id": 3464,
											"name": "Index3T",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										},
										{
											"id": 3465,
											"name": "Value3T",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										},
										{
											"id": 3466,
											"name": "Index4T",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										},
										{
											"id": 3467,
											"name": "Value4T",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										},
										{
											"id": 3468,
											"name": "ResultT",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										}
									],
									"parameters": [
										{
											"id": 3469,
											"name": "s2",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "ISeries",
												"id": 2287,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "Index2T"
													},
													{
														"type": "typeParameter",
														"name": "Value2T"
													}
												]
											}
										},
										{
											"id": 3470,
											"name": "s3",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "ISeries",
												"id": 2287,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "Index3T"
													},
													{
														"type": "typeParameter",
														"name": "Value3T"
													}
												]
											}
										},
										{
											"id": 3471,
											"name": "s4",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "ISeries",
												"id": 2287,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "Index4T"
													},
													{
														"type": "typeParameter",
														"name": "Value4T"
													}
												]
											}
										},
										{
											"id": 3472,
											"name": "zipper",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Zip3Fn",
												"id": 3590,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "ValueT"
													},
													{
														"type": "typeParameter",
														"name": "Value2T"
													},
													{
														"type": "typeParameter",
														"name": "Value3T"
													},
													{
														"type": "typeParameter",
														"name": "ResultT"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "ISeries",
										"id": 2287,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "IndexT"
											},
											{
												"type": "typeParameter",
												"name": "ResultT"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Series.zip",
										"id": 3103
									},
									"implementationOf": {
										"type": "reference",
										"name": "IOrderedSeries.zip",
										"id": 2766
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/series.ts",
									"line": 2139,
									"character": 7
								},
								{
									"fileName": "lib/series.ts",
									"line": 2140,
									"character": 7
								},
								{
									"fileName": "lib/series.ts",
									"line": 2141,
									"character": 7
								},
								{
									"fileName": "lib/series.ts",
									"line": 2142,
									"character": 7
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Series.zip",
								"id": 3103
							},
							"implementationOf": {
								"type": "reference",
								"name": "IOrderedSeries.zip",
								"id": 2750
							}
						},
						{
							"id": 3430,
							"name": "concat",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isStatic": true
							},
							"signatures": [
								{
									"id": 3431,
									"name": "concat",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Concatenate multiple series into a single series.",
										"returns": "Returns a single series concatenated from multiple input series.\n"
									},
									"typeParameter": [
										{
											"id": 3432,
											"name": "IndexT",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										},
										{
											"id": 3433,
											"name": "ValueT",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										}
									],
									"parameters": [
										{
											"id": 3434,
											"name": "series",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Array of series to concatenate.\n"
											},
											"type": {
												"type": "array",
												"elementType": {
													"type": "reference",
													"name": "ISeries",
													"id": 2287,
													"typeArguments": [
														{
															"type": "typeParameter",
															"name": "IndexT"
														},
														{
															"type": "typeParameter",
															"name": "ValueT"
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "ISeries",
										"id": 2287,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "IndexT"
											},
											{
												"type": "typeParameter",
												"name": "ValueT"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Series.concat",
										"id": 3088
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/series.ts",
									"line": 2060,
									"character": 17
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Series.concat",
								"id": 3088
							}
						},
						{
							"id": 3234,
							"name": "makePairsSelector",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isStatic": true,
								"isPrivate": true
							},
							"signatures": [
								{
									"id": 3235,
									"name": "makePairsSelector",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 3236,
											"name": "selector",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "SortSelectorFn"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "SortSelectorFn"
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/series.ts",
									"line": 2665,
									"character": 36
								}
							]
						},
						{
							"id": 3229,
							"name": "makeSortSpec",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isStatic": true,
								"isPrivate": true
							},
							"signatures": [
								{
									"id": 3230,
									"name": "makeSortSpec",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 3231,
											"name": "sortLevel",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										},
										{
											"id": 3232,
											"name": "selector",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "SortSelectorFn"
											}
										},
										{
											"id": 3233,
											"name": "direction",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Direction",
												"id": 390
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "ISortSpec",
										"id": 393
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/series.ts",
									"line": 2658,
									"character": 31
								}
							]
						},
						{
							"id": 3385,
							"name": "parseDate",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isStatic": true
							},
							"signatures": [
								{
									"id": 3386,
									"name": "parseDate",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 3387,
											"name": "value",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "any"
													},
													{
														"type": "intrinsic",
														"name": "undefined"
													}
												]
											}
										},
										{
											"id": 3388,
											"name": "valueIndex",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										},
										{
											"id": 3389,
											"name": "formatString",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "undefined"
													},
													{
														"type": "intrinsic",
														"name": "string"
													}
												]
											}
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"name": "Date"
											},
											{
												"type": "intrinsic",
												"name": "undefined"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Series.parseDate",
										"id": 3043
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/series.ts",
									"line": 1771,
									"character": 20
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Series.parseDate",
								"id": 3043
							}
						},
						{
							"id": 3379,
							"name": "parseFloat",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isStatic": true
							},
							"signatures": [
								{
									"id": 3380,
									"name": "parseFloat",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 3381,
											"name": "value",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "any"
													},
													{
														"type": "intrinsic",
														"name": "undefined"
													}
												]
											}
										},
										{
											"id": 3382,
											"name": "valueIndex",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "number"
											},
											{
												"type": "intrinsic",
												"name": "undefined"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Series.parseFloat",
										"id": 3037
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/series.ts",
									"line": 1744,
									"character": 21
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Series.parseFloat",
								"id": 3037
							}
						},
						{
							"id": 3373,
							"name": "parseInt",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isStatic": true
							},
							"signatures": [
								{
									"id": 3374,
									"name": "parseInt",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 3375,
											"name": "value",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "any"
													},
													{
														"type": "intrinsic",
														"name": "undefined"
													}
												]
											}
										},
										{
											"id": 3376,
											"name": "valueIndex",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "number"
											},
											{
												"type": "intrinsic",
												"name": "undefined"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Series.parseInt",
										"id": 3031
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/series.ts",
									"line": 1717,
									"character": 19
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Series.parseInt",
								"id": 3031
							}
						},
						{
							"id": 3393,
							"name": "toString",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isStatic": true
							},
							"signatures": [
								{
									"id": 3394,
									"name": "toString",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 3395,
											"name": "value",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "any"
													},
													{
														"type": "intrinsic",
														"name": "undefined"
													}
												]
											}
										},
										{
											"id": 3396,
											"name": "formatString",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "undefined"
													},
													{
														"type": "intrinsic",
														"name": "string"
													}
												]
											}
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "undefined"
											},
											{
												"type": "intrinsic",
												"name": "null"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Series.toString",
										"id": 3051
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/series.ts",
									"line": 1805,
									"character": 19
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Series.toString",
								"id": 3051
							}
						},
						{
							"id": 3438,
							"name": "zip",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isStatic": true
							},
							"signatures": [
								{
									"id": 3439,
									"name": "zip",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Zip together multiple series to create a new series.\nPreserves the index of the first series.",
										"returns": "Returns a single series zipped from multiple input series.\n"
									},
									"typeParameter": [
										{
											"id": 3440,
											"name": "IndexT",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										},
										{
											"id": 3441,
											"name": "ValueT",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										},
										{
											"id": 3442,
											"name": "ResultT",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										}
									],
									"parameters": [
										{
											"id": 3443,
											"name": "series",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Multiple arguments. Each can be either a series or an array of series."
											},
											"type": {
												"type": "array",
												"elementType": {
													"type": "reference",
													"name": "ISeries",
													"id": 2287,
													"typeArguments": [
														{
															"type": "typeParameter",
															"name": "IndexT"
														},
														{
															"type": "typeParameter",
															"name": "ValueT"
														}
													]
												}
											}
										},
										{
											"id": 3444,
											"name": "zipper",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Selector function that produces a new series based on the input series.\n"
											},
											"type": {
												"type": "reference",
												"name": "ZipNFn",
												"id": 3576,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "ValueT"
													},
													{
														"type": "typeParameter",
														"name": "ResultT"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "ISeries",
										"id": 2287,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "IndexT"
											},
											{
												"type": "typeParameter",
												"name": "ResultT"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Series.zip",
										"id": 3096
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/series.ts",
									"line": 2106,
									"character": 14
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Series.zip",
								"id": 3096
							}
						}
					],
					"groups": [
						{
							"title": "Constructors",
							"kind": 512,
							"children": [
								3237
							]
						},
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								3226,
								3228,
								3227,
								3224,
								3225
							]
						},
						{
							"title": "Methods",
							"kind": 2048,
							"children": [
								3252,
								3364,
								3300,
								3346,
								3349,
								3548,
								3331,
								3408,
								3400,
								3361,
								3367,
								3435,
								3325,
								3555,
								3558,
								3560,
								3418,
								3358,
								3494,
								3551,
								3327,
								3343,
								3254,
								3422,
								3426,
								3334,
								3402,
								3545,
								3486,
								3502,
								3512,
								3522,
								3532,
								3329,
								3414,
								3410,
								3412,
								3352,
								3473,
								3477,
								3390,
								3383,
								3377,
								3305,
								3260,
								3416,
								3290,
								3279,
								3283,
								3296,
								3307,
								3313,
								3310,
								3355,
								3406,
								3337,
								3316,
								3322,
								3319,
								3244,
								3248,
								3262,
								3266,
								3264,
								3371,
								3397,
								3542,
								3481,
								3293,
								3340,
								3287,
								3256,
								3445,
								3430,
								3234,
								3229,
								3385,
								3379,
								3373,
								3393,
								3438
							]
						}
					],
					"sources": [
						{
							"fileName": "lib/series.ts",
							"line": 2645,
							"character": 19
						}
					],
					"extendedTypes": [
						{
							"type": "reference",
							"name": "Series",
							"id": 2877,
							"typeArguments": [
								{
									"type": "typeParameter",
									"name": "IndexT"
								},
								{
									"type": "typeParameter",
									"name": "ValueT"
								}
							]
						}
					],
					"implementedTypes": [
						{
							"type": "reference",
							"name": "ISeries",
							"id": 2287,
							"typeArguments": [
								{
									"type": "typeParameter",
									"name": "IndexT"
								},
								{
									"type": "typeParameter",
									"name": "ValueT"
								}
							]
						},
						{
							"type": "reference",
							"name": "IOrderedSeries",
							"id": 2574,
							"typeArguments": [
								{
									"type": "typeParameter",
									"name": "IndexT"
								},
								{
									"type": "typeParameter",
									"name": "ValueT"
								},
								{
									"type": "typeParameter",
									"name": "SortT"
								}
							]
						}
					]
				},
				{
					"id": 2877,
					"name": "Series",
					"kind": 128,
					"kindString": "Class",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "Class that represents a series containing a sequence of indexed values."
					},
					"typeParameter": [
						{
							"id": 2878,
							"name": "IndexT",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {}
						},
						{
							"id": 2879,
							"name": "ValueT",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {}
						}
					],
					"children": [
						{
							"id": 2903,
							"name": "constructor",
							"kind": 512,
							"kindString": "Constructor",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "Create a series."
							},
							"signatures": [
								{
									"id": 2904,
									"name": "new Series",
									"kind": 16384,
									"kindString": "Constructor signature",
									"flags": {},
									"comment": {
										"shortText": "Create a series."
									},
									"parameters": [
										{
											"id": 2905,
											"name": "config",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"shortText": "This can be either an array or a config object the sets the values that the series contains.\nIf it is an array it specifies the values that the series contains.\nIf it is a config object that can contain:\n     values: Optional array or iterable of values that the series contains.\n     index: Optional array or iterable of values that index the series, defaults to a series of integers from 1 and counting upward.\n     pairs: Optional iterable of pairs (index and value) that the series contains.\n"
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "reference",
														"name": "Iterable",
														"typeArguments": [
															{
																"type": "typeParameter",
																"name": "ValueT"
															}
														]
													},
													{
														"type": "reference",
														"name": "ISeriesConfig",
														"id": 2274,
														"typeArguments": [
															{
																"type": "typeParameter",
																"name": "IndexT"
															},
															{
																"type": "typeParameter",
																"name": "ValueT"
															}
														]
													},
													{
														"type": "reference",
														"name": "SeriesConfigFn",
														"id": 3658,
														"typeArguments": [
															{
																"type": "typeParameter",
																"name": "IndexT"
															},
															{
																"type": "typeParameter",
																"name": "ValueT"
															}
														]
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Series",
										"id": 2877
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/series.ts",
									"line": 966,
									"character": 5
								}
							]
						},
						{
							"id": 2880,
							"name": "configFn",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPrivate": true,
								"isExported": true
							},
							"sources": [
								{
									"fileName": "lib/series.ts",
									"line": 863,
									"character": 20
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "reference",
										"name": "SeriesConfigFn",
										"id": 3658,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "IndexT"
											},
											{
												"type": "typeParameter",
												"name": "ValueT"
											}
										]
									},
									{
										"type": "intrinsic",
										"name": "null"
									}
								]
							},
							"defaultValue": " null"
						},
						{
							"id": 2881,
							"name": "content",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPrivate": true,
								"isExported": true
							},
							"sources": [
								{
									"fileName": "lib/series.ts",
									"line": 869,
									"character": 19
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "reference",
										"name": "ISeriesContent",
										"id": 2870,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "IndexT"
											},
											{
												"type": "typeParameter",
												"name": "ValueT"
											}
										]
									},
									{
										"type": "intrinsic",
										"name": "null"
									}
								]
							},
							"defaultValue": " null"
						},
						{
							"id": 2882,
							"name": "defaultCountIterable",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isStatic": true,
								"isPrivate": true,
								"isExported": true
							},
							"sources": [
								{
									"fileName": "lib/series.ts",
									"line": 871,
									"character": 48
								}
							],
							"type": {
								"type": "reference",
								"name": "CountIterable",
								"id": 34
							},
							"defaultValue": " new CountIterable()"
						},
						{
							"id": 2883,
							"name": "defaultEmptyIterable",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isStatic": true,
								"isPrivate": true,
								"isExported": true
							},
							"sources": [
								{
									"fileName": "lib/series.ts",
									"line": 872,
									"character": 48
								}
							],
							"type": {
								"type": "reference",
								"name": "EmptyIterable",
								"id": 25
							},
							"defaultValue": " new EmptyIterable()"
						},
						{
							"id": 2910,
							"name": "__@iterator",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 2911,
									"name": "__@iterator",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Get an iterator to enumerate the values of the series.\nEnumerating the iterator forces lazy evaluation to complete."
									},
									"type": {
										"type": "reference",
										"name": "Iterator",
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "ValueT"
											}
										]
									},
									"implementationOf": {
										"type": "reference",
										"name": "ISeries.__@iterator",
										"id": 2291
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/series.ts",
									"line": 1017,
									"character": 21
								}
							],
							"implementationOf": {
								"type": "reference",
								"name": "ISeries.__@iterator",
								"id": 2290
							}
						},
						{
							"id": 3022,
							"name": "after",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 3023,
									"name": "after",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Get a new series containing all values after the specified index value (exclusive).",
										"returns": "Returns a new series containing all values after the specified index value.\n"
									},
									"parameters": [
										{
											"id": 3024,
											"name": "indexValue",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The index value to search for.\n"
											},
											"type": {
												"type": "typeParameter",
												"name": "IndexT"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "ISeries",
										"id": 2287,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "IndexT"
											},
											{
												"type": "typeParameter",
												"name": "ValueT"
											}
										]
									},
									"implementationOf": {
										"type": "reference",
										"name": "ISeries.after",
										"id": 2403
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/series.ts",
									"line": 1670,
									"character": 9
								}
							],
							"implementationOf": {
								"type": "reference",
								"name": "ISeries.after",
								"id": 2402
							}
						},
						{
							"id": 2958,
							"name": "aggregate",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 2959,
									"name": "aggregate",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Aggregate the values in the series.",
										"returns": "Returns a new value that has been aggregated from the input sequence by the 'selector' function.\n"
									},
									"typeParameter": [
										{
											"id": 2960,
											"name": "ToT",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										}
									],
									"parameters": [
										{
											"id": 2961,
											"name": "seedOrSelector",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "reference",
														"name": "AggregateFn",
														"id": 3644,
														"typeArguments": [
															{
																"type": "typeParameter",
																"name": "ValueT"
															},
															{
																"type": "typeParameter",
																"name": "ToT"
															}
														]
													},
													{
														"type": "typeParameter",
														"name": "ToT"
													}
												]
											}
										},
										{
											"id": 2962,
											"name": "selector",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"text": "Function that takes the seed and then each value in the series and produces the aggregate value.\n"
											},
											"type": {
												"type": "reference",
												"name": "AggregateFn",
												"id": 3644,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "ValueT"
													},
													{
														"type": "typeParameter",
														"name": "ToT"
													}
												]
											}
										}
									],
									"type": {
										"type": "typeParameter",
										"name": "ToT"
									},
									"implementationOf": {
										"type": "reference",
										"name": "ISeries.aggregate",
										"id": 2339
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/series.ts",
									"line": 1237,
									"character": 13
								}
							],
							"implementationOf": {
								"type": "reference",
								"name": "ISeries.aggregate",
								"id": 2338
							}
						},
						{
							"id": 3004,
							"name": "all",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 3005,
									"name": "all",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Determine if the predicate returns truthy for all values in the series.\nReturns false as soon as the predicate evaluates to falsy.\nReturns true if the predicate returns truthy for all values in the series.\nReturns false if the series is empty.",
										"returns": "Returns true if the predicate has returned truthy for every value in the sequence, otherwise returns false.\n"
									},
									"parameters": [
										{
											"id": 3006,
											"name": "predicate",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Predicate function that receives each value in turn and returns truthy for a match, otherwise falsy.\n"
											},
											"type": {
												"type": "reference",
												"name": "PredicateFn",
												"id": 3639,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "ValueT"
													}
												]
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									},
									"implementationOf": {
										"type": "reference",
										"name": "ISeries.all",
										"id": 2385
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/series.ts",
									"line": 1524,
									"character": 7
								}
							],
							"implementationOf": {
								"type": "reference",
								"name": "ISeries.all",
								"id": 2384
							}
						},
						{
							"id": 3007,
							"name": "any",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 3008,
									"name": "any",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Determine if the predicate returns truthy for any of the values in the series.\nReturns true as soon as the predicate returns truthy.\nReturns false if the predicate never returns truthy.\nIf no predicate is specified the value itself is checked.",
										"returns": "Returns true if the predicate has returned truthy for any value in the sequence, otherwise returns false.\n"
									},
									"parameters": [
										{
											"id": 3009,
											"name": "predicate",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "reference",
												"name": "PredicateFn",
												"id": 3639,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "ValueT"
													}
												]
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									},
									"implementationOf": {
										"type": "reference",
										"name": "ISeries.any",
										"id": 2388
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/series.ts",
									"line": 1550,
									"character": 7
								}
							],
							"implementationOf": {
								"type": "reference",
								"name": "ISeries.any",
								"id": 2387
							}
						},
						{
							"id": 3206,
							"name": "appendPair",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 3207,
									"name": "appendPair",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Append a pair to the end of a Series.",
										"returns": "Returns a new series with the specified pair appended.\n"
									},
									"parameters": [
										{
											"id": 3208,
											"name": "pair",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The pair to append.\n"
											},
											"type": {
												"type": "tuple",
												"elements": [
													{
														"type": "typeParameter",
														"name": "IndexT"
													},
													{
														"type": "typeParameter",
														"name": "ValueT"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "ISeries",
										"id": 2287,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "IndexT"
											},
											{
												"type": "typeParameter",
												"name": "ValueT"
											}
										]
									},
									"implementationOf": {
										"type": "reference",
										"name": "ISeries.appendPair",
										"id": 2561
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/series.ts",
									"line": 2493,
									"character": 14
								}
							],
							"implementationOf": {
								"type": "reference",
								"name": "ISeries.appendPair",
								"id": 2560
							}
						},
						{
							"id": 2989,
							"name": "at",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 2990,
									"name": "at",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Get the value at a specified index.",
										"returns": "Returns the value from the specified index in the sequence or undefined if there is no such index in the series.\n"
									},
									"parameters": [
										{
											"id": 2991,
											"name": "index",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Index to for which to retreive the value.\n"
											},
											"type": {
												"type": "typeParameter",
												"name": "IndexT"
											}
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "typeParameter",
												"name": "ValueT"
											},
											{
												"type": "intrinsic",
												"name": "undefined"
											}
										]
									},
									"implementationOf": {
										"type": "reference",
										"name": "ISeries.at",
										"id": 2370
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/series.ts",
									"line": 1419,
									"character": 6
								}
							],
							"implementationOf": {
								"type": "reference",
								"name": "ISeries.at",
								"id": 2369
							}
						},
						{
							"id": 3066,
							"name": "average",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 3067,
									"name": "average",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Average the values in a series.",
										"returns": "Returns the average of the number values in the series.\n"
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									},
									"implementationOf": {
										"type": "reference",
										"name": "ISeries.average",
										"id": 2430
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/series.ts",
									"line": 1905,
									"character": 11
								}
							],
							"implementationOf": {
								"type": "reference",
								"name": "ISeries.average",
								"id": 2429
							}
						},
						{
							"id": 3058,
							"name": "bake",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 3059,
									"name": "bake",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Forces lazy evaluation to complete and 'bakes' the series into memory.",
										"returns": "Returns a series that has been 'baked', all lazy evaluation has completed.\n"
									},
									"type": {
										"type": "reference",
										"name": "ISeries",
										"id": 2287,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "IndexT"
											},
											{
												"type": "typeParameter",
												"name": "ValueT"
											}
										]
									},
									"implementationOf": {
										"type": "reference",
										"name": "ISeries.bake",
										"id": 2422
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/series.ts",
									"line": 1844,
									"character": 8
								}
							],
							"implementationOf": {
								"type": "reference",
								"name": "ISeries.bake",
								"id": 2421
							}
						},
						{
							"id": 3019,
							"name": "before",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 3020,
									"name": "before",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Get a new series containing all values up to the specified index value (exclusive).",
										"returns": "Returns a new series containing all values up to the specified inde value.\n"
									},
									"parameters": [
										{
											"id": 3021,
											"name": "indexValue",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The index value to search for before ending the new series.\n"
											},
											"type": {
												"type": "typeParameter",
												"name": "IndexT"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "ISeries",
										"id": 2287,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "IndexT"
											},
											{
												"type": "typeParameter",
												"name": "ValueT"
											}
										]
									},
									"implementationOf": {
										"type": "reference",
										"name": "ISeries.before",
										"id": 2400
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/series.ts",
									"line": 1653,
									"character": 10
								}
							],
							"implementationOf": {
								"type": "reference",
								"name": "ISeries.before",
								"id": 2399
							}
						},
						{
							"id": 3025,
							"name": "between",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 3026,
									"name": "between",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Get a new series containing all values between the specified index values (inclusive).",
										"returns": "Returns a new series containing all values between the specified index values (inclusive).\n"
									},
									"parameters": [
										{
											"id": 3027,
											"name": "startIndexValue",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The index where the new sequence starts."
											},
											"type": {
												"type": "typeParameter",
												"name": "IndexT"
											}
										},
										{
											"id": 3028,
											"name": "endIndexValue",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The index where the new sequence ends.\n"
											},
											"type": {
												"type": "typeParameter",
												"name": "IndexT"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "ISeries",
										"id": 2287,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "IndexT"
											},
											{
												"type": "typeParameter",
												"name": "ValueT"
											}
										]
									},
									"implementationOf": {
										"type": "reference",
										"name": "ISeries.between",
										"id": 2406
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/series.ts",
									"line": 1688,
									"character": 11
								}
							],
							"implementationOf": {
								"type": "reference",
								"name": "ISeries.between",
								"id": 2405
							}
						},
						{
							"id": 3093,
							"name": "concat",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 3094,
									"name": "concat",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Concatenate multiple other series onto this series.",
										"returns": "Returns a single series concatenated from multiple input series.\n"
									},
									"parameters": [
										{
											"id": 3095,
											"name": "series",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isRest": true
											},
											"comment": {
												"text": "Multiple arguments. Each can be either a series or an array of series.\n"
											},
											"type": {
												"type": "array",
												"elementType": {
													"type": "union",
													"types": [
														{
															"type": "reference",
															"name": "ISeries",
															"id": 2287,
															"typeArguments": [
																{
																	"type": "unknown",
																	"name": "IndexT"
																},
																{
																	"type": "unknown",
																	"name": "ValueT"
																}
															]
														},
														{
															"type": "array",
															"elementType": {
																"type": "reference",
																"name": "ISeries",
																"id": 2287,
																"typeArguments": [
																	{
																		"type": "unknown",
																		"name": "IndexT"
																	},
																	{
																		"type": "unknown",
																		"name": "ValueT"
																	}
																]
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "ISeries",
										"id": 2287,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "IndexT"
											},
											{
												"type": "typeParameter",
												"name": "ValueT"
											}
										]
									},
									"implementationOf": {
										"type": "reference",
										"name": "ISeries.concat",
										"id": 2452
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/series.ts",
									"line": 2080,
									"character": 10
								}
							],
							"implementationOf": {
								"type": "reference",
								"name": "ISeries.concat",
								"id": 2451
							}
						},
						{
							"id": 2983,
							"name": "count",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 2984,
									"name": "count",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Count the number of values in the series.",
										"returns": "Returns the count of all values in the series.\n"
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									},
									"implementationOf": {
										"type": "reference",
										"name": "ISeries.count",
										"id": 2364
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/series.ts",
									"line": 1369,
									"character": 9
								}
							],
							"implementationOf": {
								"type": "reference",
								"name": "ISeries.count",
								"id": 2363
							}
						},
						{
							"id": 3213,
							"name": "defaultIfEmpty",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 3214,
									"name": "defaultIfEmpty",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Returns the specified default sequence if the series is empty.",
										"returns": "Returns 'defaultSequence' if the series is empty.\n"
									},
									"parameters": [
										{
											"id": 3215,
											"name": "defaultSequence",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Default sequence to return if the series is empty.\n"
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "array",
														"elementType": {
															"type": "typeParameter",
															"name": "ValueT"
														}
													},
													{
														"type": "reference",
														"name": "ISeries",
														"id": 2287,
														"typeArguments": [
															{
																"type": "typeParameter",
																"name": "IndexT"
															},
															{
																"type": "typeParameter",
																"name": "ValueT"
															}
														]
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "ISeries",
										"id": 2287,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "IndexT"
											},
											{
												"type": "typeParameter",
												"name": "ValueT"
											}
										]
									},
									"implementationOf": {
										"type": "reference",
										"name": "ISeries.defaultIfEmpty",
										"id": 2568
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/series.ts",
									"line": 2538,
									"character": 18
								}
							],
							"implementationOf": {
								"type": "reference",
								"name": "ISeries.defaultIfEmpty",
								"id": 2567
							}
						},
						{
							"id": 3216,
							"name": "detectTypes",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 3217,
									"name": "detectTypes",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Detect the types of the values in the sequence.",
										"returns": "Returns a dataframe that describes the data types contained in the input series or dataframe.\n"
									},
									"type": {
										"type": "reference",
										"name": "IDataFrame",
										"id": 683,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "number"
											},
											{
												"type": "reference",
												"name": "ITypeFrequency",
												"id": 2281
											}
										]
									},
									"implementationOf": {
										"type": "reference",
										"name": "ISeries.detectTypes",
										"id": 2571
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/series.ts",
									"line": 2561,
									"character": 15
								}
							],
							"implementationOf": {
								"type": "reference",
								"name": "ISeries.detectTypes",
								"id": 2570
							}
						},
						{
							"id": 3218,
							"name": "detectValues",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 3219,
									"name": "detectValues",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Detect the frequency of values in the sequence.",
										"returns": "Returns a dataframe that describes the values contained in the input sequence.\n"
									},
									"type": {
										"type": "reference",
										"name": "IDataFrame",
										"id": 683,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "number"
											},
											{
												"type": "reference",
												"name": "IValueFrequency",
												"id": 2284
											}
										]
									},
									"implementationOf": {
										"type": "reference",
										"name": "ISeries.detectValues",
										"id": 2573
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/series.ts",
									"line": 2608,
									"character": 16
								}
							],
							"implementationOf": {
								"type": "reference",
								"name": "ISeries.detectValues",
								"id": 2572
							}
						},
						{
							"id": 3076,
							"name": "distinct",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 3077,
									"name": "distinct",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Returns only values in the series that have distinct values.",
										"returns": "Returns a series containing only unique values as determined by the 'selector' function.\n"
									},
									"typeParameter": [
										{
											"id": 3078,
											"name": "ToT",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										}
									],
									"parameters": [
										{
											"id": 3079,
											"name": "selector",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"text": "Selects the value used to compare for duplicates.\n"
											},
											"type": {
												"type": "reference",
												"name": "SelectorFn",
												"id": 3625,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "ValueT"
													},
													{
														"type": "typeParameter",
														"name": "ToT"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "ISeries",
										"id": 2287,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "IndexT"
											},
											{
												"type": "typeParameter",
												"name": "ValueT"
											}
										]
									},
									"implementationOf": {
										"type": "reference",
										"name": "ISeries.distinct",
										"id": 2440
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/series.ts",
									"line": 1988,
									"character": 12
								}
							],
							"implementationOf": {
								"type": "reference",
								"name": "ISeries.distinct",
								"id": 2439
							}
						},
						{
							"id": 3016,
							"name": "endAt",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 3017,
									"name": "endAt",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Get a new series containing all values up until and including the specified index value (inclusive).",
										"returns": "Returns a new series containing all values up until and including the specified index value.\n"
									},
									"parameters": [
										{
											"id": 3018,
											"name": "indexValue",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The index value to search for before ending the new series.\n"
											},
											"type": {
												"type": "typeParameter",
												"name": "IndexT"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "ISeries",
										"id": 2287,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "IndexT"
											},
											{
												"type": "typeParameter",
												"name": "ValueT"
											}
										]
									},
									"implementationOf": {
										"type": "reference",
										"name": "ISeries.endAt",
										"id": 2397
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/series.ts",
									"line": 1636,
									"character": 9
								}
							],
							"implementationOf": {
								"type": "reference",
								"name": "ISeries.endAt",
								"id": 2396
							}
						},
						{
							"id": 3152,
							"name": "except",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 3153,
									"name": "except",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Returns the exception of values between two series.",
										"returns": "Returns the difference between the two series.\n"
									},
									"typeParameter": [
										{
											"id": 3154,
											"name": "InnerIndexT",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										},
										{
											"id": 3155,
											"name": "InnerValueT",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										},
										{
											"id": 3156,
											"name": "KeyT",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										}
									],
									"parameters": [
										{
											"id": 3157,
											"name": "inner",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The other series to combine."
											},
											"type": {
												"type": "reference",
												"name": "ISeries",
												"id": 2287,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "InnerIndexT"
													},
													{
														"type": "typeParameter",
														"name": "InnerValueT"
													}
												]
											}
										},
										{
											"id": 3158,
											"name": "outerSelector",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "reference",
												"name": "SelectorFn",
												"id": 3625,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "ValueT"
													},
													{
														"type": "typeParameter",
														"name": "KeyT"
													}
												]
											}
										},
										{
											"id": 3159,
											"name": "innerSelector",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "reference",
												"name": "SelectorFn",
												"id": 3625,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "InnerValueT"
													},
													{
														"type": "typeParameter",
														"name": "KeyT"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "ISeries",
										"id": 2287,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "IndexT"
											},
											{
												"type": "typeParameter",
												"name": "ValueT"
											}
										]
									},
									"implementationOf": {
										"type": "reference",
										"name": "ISeries.except",
										"id": 2507
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/series.ts",
									"line": 2240,
									"character": 10
								}
							],
							"implementationOf": {
								"type": "reference",
								"name": "ISeries.except",
								"id": 2506
							}
						},
						{
							"id": 3209,
							"name": "fillGaps",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 3210,
									"name": "fillGaps",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Fill gaps in a series.",
										"returns": "Returns a new series with gaps filled in.\n"
									},
									"parameters": [
										{
											"id": 3211,
											"name": "comparer",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Comparer that is passed pairA and pairB, two consecutive rows, return truthy if there is a gap between the rows, or falsey if there is no gap."
											},
											"type": {
												"type": "reference",
												"name": "ComparerFn",
												"id": 3651,
												"typeArguments": [
													{
														"type": "tuple",
														"elements": [
															{
																"type": "typeParameter",
																"name": "IndexT"
															},
															{
																"type": "typeParameter",
																"name": "ValueT"
															}
														]
													},
													{
														"type": "tuple",
														"elements": [
															{
																"type": "typeParameter",
																"name": "IndexT"
															},
															{
																"type": "typeParameter",
																"name": "ValueT"
															}
														]
													}
												]
											}
										},
										{
											"id": 3212,
											"name": "generator",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Generator that is passed pairA and pairB, two consecutive rows, returns an array of pairs that fills the gap between the rows.\n"
											},
											"type": {
												"type": "reference",
												"name": "GapFillFn",
												"id": 3663,
												"typeArguments": [
													{
														"type": "tuple",
														"elements": [
															{
																"type": "typeParameter",
																"name": "IndexT"
															},
															{
																"type": "typeParameter",
																"name": "ValueT"
															}
														]
													},
													{
														"type": "tuple",
														"elements": [
															{
																"type": "typeParameter",
																"name": "IndexT"
															},
															{
																"type": "typeParameter",
																"name": "ValueT"
															}
														]
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "ISeries",
										"id": 2287,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "IndexT"
											},
											{
												"type": "typeParameter",
												"name": "ValueT"
											}
										]
									},
									"implementationOf": {
										"type": "reference",
										"name": "ISeries.fillGaps",
										"id": 2564
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/series.ts",
									"line": 2508,
									"character": 12
								}
							],
							"implementationOf": {
								"type": "reference",
								"name": "ISeries.fillGaps",
								"id": 2563
							}
						},
						{
							"id": 2985,
							"name": "first",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 2986,
									"name": "first",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Get the first value of the series.",
										"returns": "Returns the first value of the series.\n"
									},
									"type": {
										"type": "typeParameter",
										"name": "ValueT"
									},
									"implementationOf": {
										"type": "reference",
										"name": "ISeries.first",
										"id": 2366
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/series.ts",
									"line": 1383,
									"character": 9
								}
							],
							"implementationOf": {
								"type": "reference",
								"name": "ISeries.first",
								"id": 2365
							}
						},
						{
							"id": 3001,
							"name": "forEach",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 3002,
									"name": "forEach",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Invoke a callback function for each value in the series.",
										"returns": "Returns the input series with no modifications.\n"
									},
									"parameters": [
										{
											"id": 3003,
											"name": "callback",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The calback to invoke for each value.\n"
											},
											"type": {
												"type": "reference",
												"name": "CallbackFn",
												"id": 3563,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "ValueT"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "ISeries",
										"id": 2287,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "IndexT"
											},
											{
												"type": "typeParameter",
												"name": "ValueT"
											}
										]
									},
									"implementationOf": {
										"type": "reference",
										"name": "ISeries.forEach",
										"id": 2382
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/series.ts",
									"line": 1503,
									"character": 11
								}
							],
							"implementationOf": {
								"type": "reference",
								"name": "ISeries.forEach",
								"id": 2381
							}
						},
						{
							"id": 2908,
							"name": "getContent",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPrivate": true,
								"isExported": true
							},
							"signatures": [
								{
									"id": 2909,
									"name": "getContent",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "ISeriesContent",
										"id": 2870,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "IndexT"
											},
											{
												"type": "typeParameter",
												"name": "ValueT"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/series.ts",
									"line": 1008,
									"character": 22
								}
							]
						},
						{
							"id": 2912,
							"name": "getIndex",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 2913,
									"name": "getIndex",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Get the index for the series."
									},
									"type": {
										"type": "reference",
										"name": "IIndex",
										"id": 3671,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "IndexT"
											}
										]
									},
									"implementationOf": {
										"type": "reference",
										"name": "ISeries.getIndex",
										"id": 2293
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/series.ts",
									"line": 1024,
									"character": 12
								}
							],
							"implementationOf": {
								"type": "reference",
								"name": "ISeries.getIndex",
								"id": 2292
							}
						},
						{
							"id": 3080,
							"name": "groupBy",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 3081,
									"name": "groupBy",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Group the series according to the selector.",
										"returns": "Returns a series of groups. Each group is a series with values that have been grouped by the 'selector' function.\n"
									},
									"typeParameter": [
										{
											"id": 3082,
											"name": "GroupT",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										}
									],
									"parameters": [
										{
											"id": 3083,
											"name": "selector",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Selector that defines the value to group by.\n"
											},
											"type": {
												"type": "reference",
												"name": "SelectorWithIndexFn",
												"id": 3569,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "ValueT"
													},
													{
														"type": "typeParameter",
														"name": "GroupT"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "ISeries",
										"id": 2287,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "number"
											},
											{
												"type": "reference",
												"name": "ISeries",
												"id": 2287,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "IndexT"
													},
													{
														"type": "typeParameter",
														"name": "ValueT"
													}
												]
											}
										]
									},
									"implementationOf": {
										"type": "reference",
										"name": "ISeries.groupBy",
										"id": 2444
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/series.ts",
									"line": 2003,
									"character": 11
								}
							],
							"implementationOf": {
								"type": "reference",
								"name": "ISeries.groupBy",
								"id": 2443
							}
						},
						{
							"id": 3084,
							"name": "groupSequentialBy",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 3085,
									"name": "groupSequentialBy",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Group sequential values into a Series of windows.",
										"returns": "Returns a series of groups. Each group is a series with values that have been grouped by the 'selector' function.\n"
									},
									"typeParameter": [
										{
											"id": 3086,
											"name": "GroupT",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										}
									],
									"parameters": [
										{
											"id": 3087,
											"name": "selector",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"text": "Optional selector that defines the value to group by.\n"
											},
											"type": {
												"type": "reference",
												"name": "SelectorFn",
												"id": 3625,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "ValueT"
													},
													{
														"type": "typeParameter",
														"name": "GroupT"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "ISeries",
										"id": 2287,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "number"
											},
											{
												"type": "reference",
												"name": "ISeries",
												"id": 2287,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "IndexT"
													},
													{
														"type": "typeParameter",
														"name": "ValueT"
													}
												]
											}
										]
									},
									"implementationOf": {
										"type": "reference",
										"name": "ISeries.groupSequentialBy",
										"id": 2448
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/series.ts",
									"line": 2041,
									"character": 21
								}
							],
							"implementationOf": {
								"type": "reference",
								"name": "ISeries.groupSequentialBy",
								"id": 2447
							}
						},
						{
							"id": 2992,
							"name": "head",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 2993,
									"name": "head",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Get X values from the start of the series.\nPass in a negative value to get all items at the head except X values at the tail.",
										"returns": "Returns a new series that has only the specified number of values taken from the start of the input sequence.\n"
									},
									"parameters": [
										{
											"id": 2994,
											"name": "numValues",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Number of values to take.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "ISeries",
										"id": 2287,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "IndexT"
											},
											{
												"type": "typeParameter",
												"name": "ValueT"
											}
										]
									},
									"implementationOf": {
										"type": "reference",
										"name": "ISeries.head",
										"id": 2373
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/series.ts",
									"line": 1447,
									"character": 8
								}
							],
							"implementationOf": {
								"type": "reference",
								"name": "ISeries.head",
								"id": 2372
							}
						},
						{
							"id": 3060,
							"name": "inflate",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 3061,
									"name": "inflate",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Inflate the series to a dataframe.",
										"returns": "Returns a new dataframe that has been created from the input series via the 'selector' function.\n"
									},
									"typeParameter": [
										{
											"id": 3062,
											"name": "ToT",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										}
									],
									"parameters": [
										{
											"id": 3063,
											"name": "selector",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "reference",
												"name": "SelectorWithIndexFn",
												"id": 3569,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "ValueT"
													},
													{
														"type": "typeParameter",
														"name": "ToT"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "IDataFrame",
										"id": 683,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "IndexT"
											},
											{
												"type": "typeParameter",
												"name": "ToT"
											}
										]
									},
									"implementationOf": {
										"type": "reference",
										"name": "ISeries.inflate",
										"id": 2424
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/series.ts",
									"line": 1865,
									"character": 11
								}
							],
							"implementationOf": {
								"type": "reference",
								"name": "ISeries.inflate",
								"id": 2423
							}
						},
						{
							"id": 3203,
							"name": "insertPair",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 3204,
									"name": "insertPair",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Insert a pair at the start of the series.",
										"returns": "Returns a new series with the specified pair inserted.\n"
									},
									"parameters": [
										{
											"id": 3205,
											"name": "pair",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The pair to insert.\n"
											},
											"type": {
												"type": "tuple",
												"elements": [
													{
														"type": "typeParameter",
														"name": "IndexT"
													},
													{
														"type": "typeParameter",
														"name": "ValueT"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "ISeries",
										"id": 2287,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "IndexT"
											},
											{
												"type": "typeParameter",
												"name": "ValueT"
											}
										]
									},
									"implementationOf": {
										"type": "reference",
										"name": "ISeries.insertPair",
										"id": 2558
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/series.ts",
									"line": 2479,
									"character": 14
								}
							],
							"implementationOf": {
								"type": "reference",
								"name": "ISeries.insertPair",
								"id": 2557
							}
						},
						{
							"id": 3144,
							"name": "intersection",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 3145,
									"name": "intersection",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Returns the intersection of values between two series.",
										"returns": "Returns the intersection of two series.\n"
									},
									"typeParameter": [
										{
											"id": 3146,
											"name": "InnerIndexT",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										},
										{
											"id": 3147,
											"name": "InnerValueT",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										},
										{
											"id": 3148,
											"name": "KeyT",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										}
									],
									"parameters": [
										{
											"id": 3149,
											"name": "inner",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The other series to combine."
											},
											"type": {
												"type": "reference",
												"name": "ISeries",
												"id": 2287,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "InnerIndexT"
													},
													{
														"type": "typeParameter",
														"name": "InnerValueT"
													}
												]
											}
										},
										{
											"id": 3150,
											"name": "outerSelector",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "reference",
												"name": "SelectorFn",
												"id": 3625,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "ValueT"
													},
													{
														"type": "typeParameter",
														"name": "KeyT"
													}
												]
											}
										},
										{
											"id": 3151,
											"name": "innerSelector",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "reference",
												"name": "SelectorFn",
												"id": 3625,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "InnerValueT"
													},
													{
														"type": "typeParameter",
														"name": "KeyT"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "ISeries",
										"id": 2287,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "IndexT"
											},
											{
												"type": "typeParameter",
												"name": "ValueT"
											}
										]
									},
									"implementationOf": {
										"type": "reference",
										"name": "ISeries.intersection",
										"id": 2499
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/series.ts",
									"line": 2202,
									"character": 16
								}
							],
							"implementationOf": {
								"type": "reference",
								"name": "ISeries.intersection",
								"id": 2498
							}
						},
						{
							"id": 3160,
							"name": "join",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 3161,
									"name": "join",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Correlates the elements of two series on matching keys.",
										"returns": "Returns the joined series.\n"
									},
									"typeParameter": [
										{
											"id": 3162,
											"name": "KeyT",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										},
										{
											"id": 3163,
											"name": "InnerIndexT",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										},
										{
											"id": 3164,
											"name": "InnerValueT",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										},
										{
											"id": 3165,
											"name": "ResultValueT",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										}
									],
									"parameters": [
										{
											"id": 3166,
											"name": "inner",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The inner series to join."
											},
											"type": {
												"type": "reference",
												"name": "ISeries",
												"id": 2287,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "InnerIndexT"
													},
													{
														"type": "typeParameter",
														"name": "InnerValueT"
													}
												]
											}
										},
										{
											"id": 3167,
											"name": "outerKeySelector",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Selector that chooses the join key from the outer sequence."
											},
											"type": {
												"type": "reference",
												"name": "SelectorFn",
												"id": 3625,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "ValueT"
													},
													{
														"type": "typeParameter",
														"name": "KeyT"
													}
												]
											}
										},
										{
											"id": 3168,
											"name": "innerKeySelector",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Selector that chooses the join key from the inner sequence."
											},
											"type": {
												"type": "reference",
												"name": "SelectorFn",
												"id": 3625,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "InnerValueT"
													},
													{
														"type": "typeParameter",
														"name": "KeyT"
													}
												]
											}
										},
										{
											"id": 3169,
											"name": "resultSelector",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Selector that defines how to merge outer and inner values.\n"
											},
											"type": {
												"type": "reference",
												"name": "JoinFn",
												"id": 3631,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "ValueT"
													},
													{
														"type": "typeParameter",
														"name": "InnerValueT"
													},
													{
														"type": "typeParameter",
														"name": "ResultValueT"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "ISeries",
										"id": 2287,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "number"
											},
											{
												"type": "typeParameter",
												"name": "ResultValueT"
											}
										]
									},
									"implementationOf": {
										"type": "reference",
										"name": "ISeries.join",
										"id": 2515
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/series.ts",
									"line": 2280,
									"character": 8
								}
							],
							"implementationOf": {
								"type": "reference",
								"name": "ISeries.join",
								"id": 2514
							}
						},
						{
							"id": 3170,
							"name": "joinOuter",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 3171,
									"name": "joinOuter",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Performs an outer join on two series. Correlates the elements based on matching keys.\nIncludes elements from both series that have no correlation in the other series.",
										"returns": "Returns the joined series.\n"
									},
									"typeParameter": [
										{
											"id": 3172,
											"name": "KeyT",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										},
										{
											"id": 3173,
											"name": "InnerIndexT",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										},
										{
											"id": 3174,
											"name": "InnerValueT",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										},
										{
											"id": 3175,
											"name": "ResultValueT",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										}
									],
									"parameters": [
										{
											"id": 3176,
											"name": "inner",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The inner series to join."
											},
											"type": {
												"type": "reference",
												"name": "ISeries",
												"id": 2287,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "InnerIndexT"
													},
													{
														"type": "typeParameter",
														"name": "InnerValueT"
													}
												]
											}
										},
										{
											"id": 3177,
											"name": "outerKeySelector",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Selector that chooses the join key from the outer sequence."
											},
											"type": {
												"type": "reference",
												"name": "SelectorFn",
												"id": 3625,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "ValueT"
													},
													{
														"type": "typeParameter",
														"name": "KeyT"
													}
												]
											}
										},
										{
											"id": 3178,
											"name": "innerKeySelector",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Selector that chooses the join key from the inner sequence."
											},
											"type": {
												"type": "reference",
												"name": "SelectorFn",
												"id": 3625,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "InnerValueT"
													},
													{
														"type": "typeParameter",
														"name": "KeyT"
													}
												]
											}
										},
										{
											"id": 3179,
											"name": "resultSelector",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Selector that defines how to merge outer and inner values.\n\nImplementation from here:\n\n\thttp://blogs.geniuscode.net/RyanDHatch/?p=116\n"
											},
											"type": {
												"type": "reference",
												"name": "JoinFn",
												"id": 3631,
												"typeArguments": [
													{
														"type": "union",
														"types": [
															{
																"type": "typeParameter",
																"name": "ValueT"
															},
															{
																"type": "intrinsic",
																"name": "null"
															}
														]
													},
													{
														"type": "union",
														"types": [
															{
																"type": "typeParameter",
																"name": "InnerValueT"
															},
															{
																"type": "intrinsic",
																"name": "null"
															}
														]
													},
													{
														"type": "typeParameter",
														"name": "ResultValueT"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "ISeries",
										"id": 2287,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "number"
											},
											{
												"type": "typeParameter",
												"name": "ResultValueT"
											}
										]
									},
									"implementationOf": {
										"type": "reference",
										"name": "ISeries.joinOuter",
										"id": 2525
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/series.ts",
									"line": 2337,
									"character": 13
								}
							],
							"implementationOf": {
								"type": "reference",
								"name": "ISeries.joinOuter",
								"id": 2524
							}
						},
						{
							"id": 3180,
							"name": "joinOuterLeft",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 3181,
									"name": "joinOuterLeft",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Performs a left outer join on two series. Correlates the elements based on matching keys.\nIncludes left elements that have no correlation.",
										"returns": "Returns the joined series.\n"
									},
									"typeParameter": [
										{
											"id": 3182,
											"name": "KeyT",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										},
										{
											"id": 3183,
											"name": "InnerIndexT",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										},
										{
											"id": 3184,
											"name": "InnerValueT",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										},
										{
											"id": 3185,
											"name": "ResultValueT",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										}
									],
									"parameters": [
										{
											"id": 3186,
											"name": "inner",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The inner series to join."
											},
											"type": {
												"type": "reference",
												"name": "ISeries",
												"id": 2287,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "InnerIndexT"
													},
													{
														"type": "typeParameter",
														"name": "InnerValueT"
													}
												]
											}
										},
										{
											"id": 3187,
											"name": "outerKeySelector",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Selector that chooses the join key from the outer sequence."
											},
											"type": {
												"type": "reference",
												"name": "SelectorFn",
												"id": 3625,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "ValueT"
													},
													{
														"type": "typeParameter",
														"name": "KeyT"
													}
												]
											}
										},
										{
											"id": 3188,
											"name": "innerKeySelector",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Selector that chooses the join key from the inner sequence."
											},
											"type": {
												"type": "reference",
												"name": "SelectorFn",
												"id": 3625,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "InnerValueT"
													},
													{
														"type": "typeParameter",
														"name": "KeyT"
													}
												]
											}
										},
										{
											"id": 3189,
											"name": "resultSelector",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Selector that defines how to merge outer and inner values.\n\nImplementation from here:\n\n\thttp://blogs.geniuscode.net/RyanDHatch/?p=116\n"
											},
											"type": {
												"type": "reference",
												"name": "JoinFn",
												"id": 3631,
												"typeArguments": [
													{
														"type": "union",
														"types": [
															{
																"type": "typeParameter",
																"name": "ValueT"
															},
															{
																"type": "intrinsic",
																"name": "null"
															}
														]
													},
													{
														"type": "union",
														"types": [
															{
																"type": "typeParameter",
																"name": "InnerValueT"
															},
															{
																"type": "intrinsic",
																"name": "null"
															}
														]
													},
													{
														"type": "typeParameter",
														"name": "ResultValueT"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "ISeries",
										"id": 2287,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "number"
											},
											{
												"type": "typeParameter",
												"name": "ResultValueT"
											}
										]
									},
									"implementationOf": {
										"type": "reference",
										"name": "ISeries.joinOuterLeft",
										"id": 2535
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/series.ts",
									"line": 2384,
									"character": 17
								}
							],
							"implementationOf": {
								"type": "reference",
								"name": "ISeries.joinOuterLeft",
								"id": 2534
							}
						},
						{
							"id": 3190,
							"name": "joinOuterRight",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 3191,
									"name": "joinOuterRight",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Performs a right outer join on two series. Correlates the elements based on matching keys.\nIncludes right elements that have no correlation.",
										"returns": "Returns the joined series.\n"
									},
									"typeParameter": [
										{
											"id": 3192,
											"name": "KeyT",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										},
										{
											"id": 3193,
											"name": "InnerIndexT",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										},
										{
											"id": 3194,
											"name": "InnerValueT",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										},
										{
											"id": 3195,
											"name": "ResultValueT",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										}
									],
									"parameters": [
										{
											"id": 3196,
											"name": "inner",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The inner series to join."
											},
											"type": {
												"type": "reference",
												"name": "ISeries",
												"id": 2287,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "InnerIndexT"
													},
													{
														"type": "typeParameter",
														"name": "InnerValueT"
													}
												]
											}
										},
										{
											"id": 3197,
											"name": "outerKeySelector",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Selector that chooses the join key from the outer sequence."
											},
											"type": {
												"type": "reference",
												"name": "SelectorFn",
												"id": 3625,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "ValueT"
													},
													{
														"type": "typeParameter",
														"name": "KeyT"
													}
												]
											}
										},
										{
											"id": 3198,
											"name": "innerKeySelector",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Selector that chooses the join key from the inner sequence."
											},
											"type": {
												"type": "reference",
												"name": "SelectorFn",
												"id": 3625,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "InnerValueT"
													},
													{
														"type": "typeParameter",
														"name": "KeyT"
													}
												]
											}
										},
										{
											"id": 3199,
											"name": "resultSelector",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Selector that defines how to merge outer and inner values.\n\nImplementation from here:\n\n\thttp://blogs.geniuscode.net/RyanDHatch/?p=116\n"
											},
											"type": {
												"type": "reference",
												"name": "JoinFn",
												"id": 3631,
												"typeArguments": [
													{
														"type": "union",
														"types": [
															{
																"type": "typeParameter",
																"name": "ValueT"
															},
															{
																"type": "intrinsic",
																"name": "null"
															}
														]
													},
													{
														"type": "union",
														"types": [
															{
																"type": "typeParameter",
																"name": "InnerValueT"
															},
															{
																"type": "intrinsic",
																"name": "null"
															}
														]
													},
													{
														"type": "typeParameter",
														"name": "ResultValueT"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "ISeries",
										"id": 2287,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "number"
											},
											{
												"type": "typeParameter",
												"name": "ResultValueT"
											}
										]
									},
									"implementationOf": {
										"type": "reference",
										"name": "ISeries.joinOuterRight",
										"id": 2545
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/series.ts",
									"line": 2425,
									"character": 18
								}
							],
							"implementationOf": {
								"type": "reference",
								"name": "ISeries.joinOuterRight",
								"id": 2544
							}
						},
						{
							"id": 2987,
							"name": "last",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 2988,
									"name": "last",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Get the last value of the series.",
										"returns": "Returns the last value of the series.\n"
									},
									"type": {
										"type": "typeParameter",
										"name": "ValueT"
									},
									"implementationOf": {
										"type": "reference",
										"name": "ISeries.last",
										"id": 2368
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/series.ts",
									"line": 1397,
									"character": 8
								}
							],
							"implementationOf": {
								"type": "reference",
								"name": "ISeries.last",
								"id": 2367
							}
						},
						{
							"id": 2906,
							"name": "lazyInit",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPrivate": true,
								"isExported": true
							},
							"signatures": [
								{
									"id": 2907,
									"name": "lazyInit",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/series.ts",
									"line": 999,
									"character": 20
								}
							]
						},
						{
							"id": 3072,
							"name": "max",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 3073,
									"name": "max",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Get the max value in the series.",
										"returns": "Returns the maximum of the number values in the series.\n"
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									},
									"implementationOf": {
										"type": "reference",
										"name": "ISeries.max",
										"id": 2436
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/series.ts",
									"line": 1961,
									"character": 7
								}
							],
							"implementationOf": {
								"type": "reference",
								"name": "ISeries.max",
								"id": 2435
							}
						},
						{
							"id": 3068,
							"name": "median",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 3069,
									"name": "median",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Get the median value in the series. Not this sorts the series, so can be expensive.",
										"returns": "Returns the median of the values in the series.\n"
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									},
									"implementationOf": {
										"type": "reference",
										"name": "ISeries.median",
										"id": 2432
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/series.ts",
									"line": 1921,
									"character": 10
								}
							],
							"implementationOf": {
								"type": "reference",
								"name": "ISeries.median",
								"id": 2431
							}
						},
						{
							"id": 3070,
							"name": "min",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 3071,
									"name": "min",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Get the min value in the series.",
										"returns": "Returns the minimum of the number values in the series.\n"
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									},
									"implementationOf": {
										"type": "reference",
										"name": "ISeries.min",
										"id": 2434
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/series.ts",
									"line": 1950,
									"character": 7
								}
							],
							"implementationOf": {
								"type": "reference",
								"name": "ISeries.min",
								"id": 2433
							}
						},
						{
							"id": 3010,
							"name": "none",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 3011,
									"name": "none",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Determine if the predicate returns truthy for none of the values in the series.\nReturns true for an empty series.\nReturns true if the predicate always returns falsy.\nOtherwise returns false.\nIf no predicate is specified the value itself is checked.",
										"returns": "Returns true if the predicate has returned truthy for no values in the series, otherwise returns false.\n"
									},
									"parameters": [
										{
											"id": 3012,
											"name": "predicate",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "reference",
												"name": "PredicateFn",
												"id": 3639,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "ValueT"
													}
												]
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									},
									"implementationOf": {
										"type": "reference",
										"name": "ISeries.none",
										"id": 2391
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/series.ts",
									"line": 1586,
									"character": 8
								}
							],
							"implementationOf": {
								"type": "reference",
								"name": "ISeries.none",
								"id": 2390
							}
						},
						{
							"id": 3131,
							"name": "orderBy",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 3132,
									"name": "orderBy",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Sorts the series by a value defined by the selector (ascending).",
										"returns": "Returns a new ordered series that has been sorted by the value returned by the selector.\n"
									},
									"typeParameter": [
										{
											"id": 3133,
											"name": "SortT",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										}
									],
									"parameters": [
										{
											"id": 3134,
											"name": "selector",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Selects the value to sort by.\n"
											},
											"type": {
												"type": "reference",
												"name": "SelectorWithIndexFn",
												"id": 3569,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "ValueT"
													},
													{
														"type": "typeParameter",
														"name": "SortT"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "IOrderedSeries",
										"id": 2574,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "IndexT"
											},
											{
												"type": "typeParameter",
												"name": "ValueT"
											},
											{
												"type": "typeParameter",
												"name": "SortT"
											}
										]
									},
									"implementationOf": {
										"type": "reference",
										"name": "ISeries.orderBy",
										"id": 2486
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/series.ts",
									"line": 2156,
									"character": 11
								}
							],
							"implementationOf": {
								"type": "reference",
								"name": "ISeries.orderBy",
								"id": 2485
							}
						},
						{
							"id": 3135,
							"name": "orderByDescending",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 3136,
									"name": "orderByDescending",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Sorts the series by a value defined by the selector (descending).",
										"returns": "Returns a new ordered series that has been sorted by the value returned by the selector.\n"
									},
									"typeParameter": [
										{
											"id": 3137,
											"name": "SortT",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										}
									],
									"parameters": [
										{
											"id": 3138,
											"name": "selector",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Selects the value to sort by.\n"
											},
											"type": {
												"type": "reference",
												"name": "SelectorWithIndexFn",
												"id": 3569,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "ValueT"
													},
													{
														"type": "typeParameter",
														"name": "SortT"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "IOrderedSeries",
										"id": 2574,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "IndexT"
											},
											{
												"type": "typeParameter",
												"name": "ValueT"
											},
											{
												"type": "typeParameter",
												"name": "SortT"
											}
										]
									},
									"implementationOf": {
										"type": "reference",
										"name": "ISeries.orderByDescending",
										"id": 2490
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/series.ts",
									"line": 2168,
									"character": 21
								}
							],
							"implementationOf": {
								"type": "reference",
								"name": "ISeries.orderByDescending",
								"id": 2489
							}
						},
						{
							"id": 3048,
							"name": "parseDates",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 3049,
									"name": "parseDates",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Parse a series with string values to a series with date values.",
										"returns": "Returns a new series where string values from the original series have been parsed to Date values.\n"
									},
									"parameters": [
										{
											"id": 3050,
											"name": "formatString",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "undefined"
													},
													{
														"type": "intrinsic",
														"name": "string"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "ISeries",
										"id": 2287,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "IndexT"
											},
											{
												"type": "reference",
												"name": "Date"
											}
										]
									},
									"implementationOf": {
										"type": "reference",
										"name": "ISeries.parseDates",
										"id": 2416
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/series.ts",
									"line": 1793,
									"character": 14
								}
							],
							"implementationOf": {
								"type": "reference",
								"name": "ISeries.parseDates",
								"id": 2415
							}
						},
						{
							"id": 3041,
							"name": "parseFloats",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 3042,
									"name": "parseFloats",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Parse a series with string values to a series with float values.",
										"returns": "Returns a new series where string values from the original series have been parsed to floating-point values.\n"
									},
									"type": {
										"type": "reference",
										"name": "ISeries",
										"id": 2287,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "IndexT"
											},
											{
												"type": "intrinsic",
												"name": "number"
											}
										]
									},
									"implementationOf": {
										"type": "reference",
										"name": "ISeries.parseFloats",
										"id": 2414
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/series.ts",
									"line": 1764,
									"character": 15
								}
							],
							"implementationOf": {
								"type": "reference",
								"name": "ISeries.parseFloats",
								"id": 2413
							}
						},
						{
							"id": 3035,
							"name": "parseInts",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 3036,
									"name": "parseInts",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Parse a series with string values to a series with int values.",
										"returns": "Returns a new series where string values from the original series have been parsed to integer values.\n"
									},
									"type": {
										"type": "reference",
										"name": "ISeries",
										"id": 2287,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "IndexT"
											},
											{
												"type": "intrinsic",
												"name": "number"
											}
										]
									},
									"implementationOf": {
										"type": "reference",
										"name": "ISeries.parseInts",
										"id": 2412
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/series.ts",
									"line": 1737,
									"character": 13
								}
							],
							"implementationOf": {
								"type": "reference",
								"name": "ISeries.parseInts",
								"id": 2411
							}
						},
						{
							"id": 2963,
							"name": "percentChange",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 2964,
									"name": "percentChange",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Compute the percent change between each pair of values.\nPercentages are expressed as 0-1 values.",
										"returns": "Returns a new series where each value indicates the percent change from the previous number value in the original series.\n"
									},
									"type": {
										"type": "reference",
										"name": "ISeries",
										"id": 2287,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "IndexT"
											},
											{
												"type": "intrinsic",
												"name": "number"
											}
										]
									},
									"implementationOf": {
										"type": "reference",
										"name": "ISeries.percentChange",
										"id": 2344
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/series.ts",
									"line": 1261,
									"character": 17
								}
							],
							"implementationOf": {
								"type": "reference",
								"name": "ISeries.percentChange",
								"id": 2343
							}
						},
						{
							"id": 2918,
							"name": "resetIndex",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 2919,
									"name": "resetIndex",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Resets the index of the series back to the default zero-based sequential integer index.",
										"returns": "Returns a new series with the index reset to the default zero-based index.\n"
									},
									"type": {
										"type": "reference",
										"name": "ISeries",
										"id": 2287,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "number"
											},
											{
												"type": "typeParameter",
												"name": "ValueT"
											}
										]
									},
									"implementationOf": {
										"type": "reference",
										"name": "ISeries.resetIndex",
										"id": 2299
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/series.ts",
									"line": 1058,
									"character": 14
								}
							],
							"implementationOf": {
								"type": "reference",
								"name": "ISeries.resetIndex",
								"id": 2298
							}
						},
						{
							"id": 3074,
							"name": "reverse",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 3075,
									"name": "reverse",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Reverse the series.",
										"returns": "Returns a new series that is the reverse of the input.\n"
									},
									"type": {
										"type": "reference",
										"name": "ISeries",
										"id": 2287,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "IndexT"
											},
											{
												"type": "typeParameter",
												"name": "ValueT"
											}
										]
									},
									"implementationOf": {
										"type": "reference",
										"name": "ISeries.reverse",
										"id": 2438
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/series.ts",
									"line": 1972,
									"character": 11
								}
							],
							"implementationOf": {
								"type": "reference",
								"name": "ISeries.reverse",
								"id": 2437
							}
						},
						{
							"id": 2948,
							"name": "rollingWindow",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 2949,
									"name": "rollingWindow",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Segment a series into 'rolling windows'. Returns a new series. Each value in the new series contains a 'window' (or segment) of the original series.",
										"returns": "Returns a new series, each value of which is a 'window' (or segment) of the original series.\n"
									},
									"parameters": [
										{
											"id": 2950,
											"name": "period",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The number of values in the window.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "ISeries",
										"id": 2287,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "number"
											},
											{
												"type": "reference",
												"name": "ISeries",
												"id": 2287,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "IndexT"
													},
													{
														"type": "typeParameter",
														"name": "ValueT"
													}
												]
											}
										]
									},
									"implementationOf": {
										"type": "reference",
										"name": "ISeries.rollingWindow",
										"id": 2329
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/series.ts",
									"line": 1180,
									"character": 17
								}
							],
							"implementationOf": {
								"type": "reference",
								"name": "ISeries.rollingWindow",
								"id": 2328
							}
						},
						{
							"id": 2937,
							"name": "select",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 2938,
									"name": "select",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Generate a new series based by calling the selector function on each value.",
										"returns": "Returns a new series that has been transformed by the selector function.\n"
									},
									"typeParameter": [
										{
											"id": 2939,
											"name": "ToT",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										}
									],
									"parameters": [
										{
											"id": 2940,
											"name": "selector",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Selector function that transforms each value to create a new series.\n"
											},
											"type": {
												"type": "reference",
												"name": "SelectorWithIndexFn",
												"id": 3569,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "ValueT"
													},
													{
														"type": "typeParameter",
														"name": "ToT"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "ISeries",
										"id": 2287,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "IndexT"
											},
											{
												"type": "typeParameter",
												"name": "ToT"
											}
										]
									},
									"implementationOf": {
										"type": "reference",
										"name": "ISeries.select",
										"id": 2318
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/series.ts",
									"line": 1120,
									"character": 10
								}
							],
							"implementationOf": {
								"type": "reference",
								"name": "ISeries.select",
								"id": 2317
							}
						},
						{
							"id": 2941,
							"name": "selectMany",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 2942,
									"name": "selectMany",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Generate a new series based on the results of the selector function.",
										"returns": "Returns a new series with values that have been produced by the selector function.\n"
									},
									"typeParameter": [
										{
											"id": 2943,
											"name": "ToT",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										}
									],
									"parameters": [
										{
											"id": 2944,
											"name": "selector",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Selector function that transforms each value into a list of values.\n"
											},
											"type": {
												"type": "reference",
												"name": "SelectorWithIndexFn",
												"id": 3569,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "ValueT"
													},
													{
														"type": "reference",
														"name": "Iterable",
														"typeArguments": [
															{
																"type": "typeParameter",
																"name": "ToT"
															}
														]
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "ISeries",
										"id": 2287,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "IndexT"
											},
											{
												"type": "typeParameter",
												"name": "ToT"
											}
										]
									},
									"implementationOf": {
										"type": "reference",
										"name": "ISeries.selectMany",
										"id": 2322
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/series.ts",
									"line": 1136,
									"character": 14
								}
							],
							"implementationOf": {
								"type": "reference",
								"name": "ISeries.selectMany",
								"id": 2321
							}
						},
						{
							"id": 2954,
							"name": "sequentialDistinct",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 2955,
									"name": "sequentialDistinct",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Collapase distinct values that happen to be sequential.",
										"returns": "Returns a new series with duplicate values that are sequential removed.\n"
									},
									"typeParameter": [
										{
											"id": 2956,
											"name": "ToT",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										}
									],
									"parameters": [
										{
											"id": 2957,
											"name": "selector",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "reference",
												"name": "SelectorFn",
												"id": 3625,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "ValueT"
													},
													{
														"type": "typeParameter",
														"name": "ToT"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "ISeries",
										"id": 2287,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "IndexT"
											},
											{
												"type": "typeParameter",
												"name": "ValueT"
											}
										]
									},
									"implementationOf": {
										"type": "reference",
										"name": "ISeries.sequentialDistinct",
										"id": 2335
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/series.ts",
									"line": 1212,
									"character": 22
								}
							],
							"implementationOf": {
								"type": "reference",
								"name": "ISeries.sequentialDistinct",
								"id": 2334
							}
						},
						{
							"id": 2965,
							"name": "skip",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 2966,
									"name": "skip",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Skip a number of values in the series.",
										"returns": "Returns a new series or dataframe with the specified number of values skipped.\n"
									},
									"parameters": [
										{
											"id": 2967,
											"name": "numValues",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Number of values to skip.     *"
											},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "ISeries",
										"id": 2287,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "IndexT"
											},
											{
												"type": "typeParameter",
												"name": "ValueT"
											}
										]
									},
									"implementationOf": {
										"type": "reference",
										"name": "ISeries.skip",
										"id": 2346
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/series.ts",
									"line": 1281,
									"character": 8
								}
							],
							"implementationOf": {
								"type": "reference",
								"name": "ISeries.skip",
								"id": 2345
							}
						},
						{
							"id": 2971,
							"name": "skipUntil",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 2972,
									"name": "skipUntil",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Skips values in the series until a condition is met.",
										"returns": "Returns a new series with all initial sequential values removed that don't match the predicate.\n"
									},
									"parameters": [
										{
											"id": 2973,
											"name": "predicate",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Return true to indicate the condition met.\n"
											},
											"type": {
												"type": "reference",
												"name": "PredicateFn",
												"id": 3639,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "ValueT"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "ISeries",
										"id": 2287,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "IndexT"
											},
											{
												"type": "typeParameter",
												"name": "ValueT"
											}
										]
									},
									"implementationOf": {
										"type": "reference",
										"name": "ISeries.skipUntil",
										"id": 2352
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/series.ts",
									"line": 1312,
									"character": 13
								}
							],
							"implementationOf": {
								"type": "reference",
								"name": "ISeries.skipUntil",
								"id": 2351
							}
						},
						{
							"id": 2968,
							"name": "skipWhile",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 2969,
									"name": "skipWhile",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Skips values in the series while a condition is met.",
										"returns": "Returns a new series with all initial sequential values removed that match the predicate.\n"
									},
									"parameters": [
										{
											"id": 2970,
											"name": "predicate",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Return true to indicate the condition met.\n"
											},
											"type": {
												"type": "reference",
												"name": "PredicateFn",
												"id": 3639,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "ValueT"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "ISeries",
										"id": 2287,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "IndexT"
											},
											{
												"type": "typeParameter",
												"name": "ValueT"
											}
										]
									},
									"implementationOf": {
										"type": "reference",
										"name": "ISeries.skipWhile",
										"id": 2349
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/series.ts",
									"line": 1296,
									"character": 13
								}
							],
							"implementationOf": {
								"type": "reference",
								"name": "ISeries.skipWhile",
								"id": 2348
							}
						},
						{
							"id": 3013,
							"name": "startAt",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 3014,
									"name": "startAt",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Get a new series containing all values starting at and after the specified index value.",
										"returns": "Returns a new series containing all values starting at and after the specified index value.\n"
									},
									"parameters": [
										{
											"id": 3015,
											"name": "indexValue",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The index value to search for before starting the new series.\n"
											},
											"type": {
												"type": "typeParameter",
												"name": "IndexT"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "ISeries",
										"id": 2287,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "IndexT"
											},
											{
												"type": "typeParameter",
												"name": "ValueT"
											}
										]
									},
									"implementationOf": {
										"type": "reference",
										"name": "ISeries.startAt",
										"id": 2394
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/series.ts",
									"line": 1619,
									"character": 11
								}
							],
							"implementationOf": {
								"type": "reference",
								"name": "ISeries.startAt",
								"id": 2393
							}
						},
						{
							"id": 3064,
							"name": "sum",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 3065,
									"name": "sum",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Sum the values in a series.",
										"returns": "Returns the sum of the number values in the series.\n"
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									},
									"implementationOf": {
										"type": "reference",
										"name": "ISeries.sum",
										"id": 2428
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/series.ts",
									"line": 1890,
									"character": 7
								}
							],
							"implementationOf": {
								"type": "reference",
								"name": "ISeries.sum",
								"id": 2427
							}
						},
						{
							"id": 2995,
							"name": "tail",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 2996,
									"name": "tail",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Get X values from the end of the series.\nPass in a negative value to get all items at the tail except X values at the head.",
										"returns": "Returns a new series that has only the specified number of values taken from the end of the input sequence.\n"
									},
									"parameters": [
										{
											"id": 2997,
											"name": "numValues",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Number of values to take.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "ISeries",
										"id": 2287,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "IndexT"
											},
											{
												"type": "typeParameter",
												"name": "ValueT"
											}
										]
									},
									"implementationOf": {
										"type": "reference",
										"name": "ISeries.tail",
										"id": 2376
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/series.ts",
									"line": 1467,
									"character": 8
								}
							],
							"implementationOf": {
								"type": "reference",
								"name": "ISeries.tail",
								"id": 2375
							}
						},
						{
							"id": 2974,
							"name": "take",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 2975,
									"name": "take",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Take a number of rows in the series.",
										"returns": "Returns a new series with up to the specified number of values included.\n"
									},
									"parameters": [
										{
											"id": 2976,
											"name": "numRows",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Number of rows to take.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "ISeries",
										"id": 2287,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "IndexT"
											},
											{
												"type": "typeParameter",
												"name": "ValueT"
											}
										]
									},
									"implementationOf": {
										"type": "reference",
										"name": "ISeries.take",
										"id": 2355
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/series.ts",
									"line": 1325,
									"character": 8
								}
							],
							"implementationOf": {
								"type": "reference",
								"name": "ISeries.take",
								"id": 2354
							}
						},
						{
							"id": 2980,
							"name": "takeUntil",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 2981,
									"name": "takeUntil",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Take values from the series until a condition is met.",
										"returns": "Returns a new series or dataframe that only includes the initial sequential values that have not matched the predicate.\n"
									},
									"parameters": [
										{
											"id": 2982,
											"name": "predicate",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Return true to indicate the condition met.\n"
											},
											"type": {
												"type": "reference",
												"name": "PredicateFn",
												"id": 3639,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "ValueT"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "ISeries",
										"id": 2287,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "IndexT"
											},
											{
												"type": "typeParameter",
												"name": "ValueT"
											}
										]
									},
									"implementationOf": {
										"type": "reference",
										"name": "ISeries.takeUntil",
										"id": 2361
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/series.ts",
									"line": 1358,
									"character": 13
								}
							],
							"implementationOf": {
								"type": "reference",
								"name": "ISeries.takeUntil",
								"id": 2360
							}
						},
						{
							"id": 2977,
							"name": "takeWhile",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 2978,
									"name": "takeWhile",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Take values from the series while a condition is met.",
										"returns": "Returns a new series that only includes the initial sequential values that have matched the predicate.\n"
									},
									"parameters": [
										{
											"id": 2979,
											"name": "predicate",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Return true to indicate the condition met.\n"
											},
											"type": {
												"type": "reference",
												"name": "PredicateFn",
												"id": 3639,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "ValueT"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "ISeries",
										"id": 2287,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "IndexT"
											},
											{
												"type": "typeParameter",
												"name": "ValueT"
											}
										]
									},
									"implementationOf": {
										"type": "reference",
										"name": "ISeries.takeWhile",
										"id": 2358
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/series.ts",
									"line": 1342,
									"character": 13
								}
							],
							"implementationOf": {
								"type": "reference",
								"name": "ISeries.takeWhile",
								"id": 2357
							}
						},
						{
							"id": 2920,
							"name": "toArray",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 2921,
									"name": "toArray",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Extract values from the series as an array.\nThis forces lazy evaluation to complete.",
										"returns": "Returns an array of values contained within the series.\n"
									},
									"type": {
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "any"
										}
									},
									"implementationOf": {
										"type": "reference",
										"name": "ISeries.toArray",
										"id": 2301
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/series.ts",
									"line": 1070,
									"character": 11
								}
							],
							"implementationOf": {
								"type": "reference",
								"name": "ISeries.toArray",
								"id": 2300
							}
						},
						{
							"id": 2924,
							"name": "toObject",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 2925,
									"name": "toObject",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Convert the series to a JavaScript object.",
										"returns": "Returns a JavaScript object generated from the input sequence by the key and value selector funtions.\n"
									},
									"typeParameter": [
										{
											"id": 2926,
											"name": "KeyT",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										},
										{
											"id": 2927,
											"name": "FieldT",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										},
										{
											"id": 2928,
											"name": "OutT",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										}
									],
									"parameters": [
										{
											"id": 2929,
											"name": "keySelector",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Function that selects keys for the resulting object."
											},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 2930,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"signatures": [
														{
															"id": 2931,
															"name": "__call",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {},
															"parameters": [
																{
																	"id": 2932,
																	"name": "value",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {},
																	"type": {
																		"type": "typeParameter",
																		"name": "ValueT"
																	}
																}
															],
															"type": {
																"type": "typeParameter",
																"name": "KeyT"
															}
														}
													],
													"sources": [
														{
															"fileName": "lib/series.ts",
															"line": 1105,
															"character": 64
														}
													]
												}
											}
										},
										{
											"id": 2933,
											"name": "valueSelector",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Function that selects values for the resulting object.\n"
											},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 2934,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"signatures": [
														{
															"id": 2935,
															"name": "__call",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {},
															"parameters": [
																{
																	"id": 2936,
																	"name": "value",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {},
																	"type": {
																		"type": "typeParameter",
																		"name": "ValueT"
																	}
																}
															],
															"type": {
																"type": "typeParameter",
																"name": "FieldT"
															}
														}
													],
													"sources": [
														{
															"fileName": "lib/series.ts",
															"line": 1105,
															"character": 104
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "typeParameter",
										"name": "OutT"
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/series.ts",
									"line": 1105,
									"character": 12
								}
							],
							"implementationOf": {
								"type": "reference",
								"name": "ISeries.toObject",
								"id": 2304
							}
						},
						{
							"id": 2922,
							"name": "toPairs",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 2923,
									"name": "toPairs",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Retreive the index and values from the Series as an array of pairs.\nEach pair is [index, value].\nThis forces lazy evaluation to complete.",
										"returns": "Returns an array of pairs that contains the series content. Each pair is a two element array that contains an index and a value.\n"
									},
									"type": {
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "Object"
										}
									},
									"implementationOf": {
										"type": "reference",
										"name": "ISeries.toPairs",
										"id": 2303
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/series.ts",
									"line": 1087,
									"character": 11
								}
							],
							"implementationOf": {
								"type": "reference",
								"name": "ISeries.toPairs",
								"id": 2302
							}
						},
						{
							"id": 3029,
							"name": "toString",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 3030,
									"name": "toString",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Format the series for display as a string.\nThis forces lazy evaluation to complete.",
										"returns": "Generates and returns a string representation of the series or dataframe.\n"
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									},
									"implementationOf": {
										"type": "reference",
										"name": "ISeries.toString",
										"id": 2410
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/series.ts",
									"line": 1698,
									"character": 12
								}
							],
							"implementationOf": {
								"type": "reference",
								"name": "ISeries.toString",
								"id": 2409
							}
						},
						{
							"id": 3055,
							"name": "toStrings",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 3056,
									"name": "toStrings",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Convert a series of values of different types to a series of string values.",
										"returns": "Returns a new series where the values from the original series have been stringified.\n"
									},
									"parameters": [
										{
											"id": 3057,
											"name": "formatString",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "undefined"
													},
													{
														"type": "intrinsic",
														"name": "string"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "ISeries",
										"id": 2287,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "IndexT"
											},
											{
												"type": "intrinsic",
												"name": "string"
											}
										]
									},
									"implementationOf": {
										"type": "reference",
										"name": "ISeries.toStrings",
										"id": 2419
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/series.ts",
									"line": 1830,
									"character": 13
								}
							],
							"implementationOf": {
								"type": "reference",
								"name": "ISeries.toStrings",
								"id": 2418
							}
						},
						{
							"id": 3200,
							"name": "truncateStrings",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 3201,
									"name": "truncateStrings",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Produces a new series with all string values truncated to the requested maximum length.",
										"returns": "Returns a new series with strings that are truncated to the specified maximum length.\n"
									},
									"parameters": [
										{
											"id": 3202,
											"name": "maxLength",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The maximum length of the string values after truncation.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "ISeries",
										"id": 2287,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "IndexT"
											},
											{
												"type": "typeParameter",
												"name": "ValueT"
											}
										]
									},
									"implementationOf": {
										"type": "reference",
										"name": "ISeries.truncateStrings",
										"id": 2555
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/series.ts",
									"line": 2457,
									"character": 19
								}
							],
							"implementationOf": {
								"type": "reference",
								"name": "ISeries.truncateStrings",
								"id": 2554
							}
						},
						{
							"id": 3139,
							"name": "union",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 3140,
									"name": "union",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Returns the unique union of values between two series.",
										"returns": "Returns the union of two series.\n"
									},
									"typeParameter": [
										{
											"id": 3141,
											"name": "KeyT",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										}
									],
									"parameters": [
										{
											"id": 3142,
											"name": "other",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The other series to combine."
											},
											"type": {
												"type": "reference",
												"name": "ISeries",
												"id": 2287,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "IndexT"
													},
													{
														"type": "typeParameter",
														"name": "ValueT"
													}
												]
											}
										},
										{
											"id": 3143,
											"name": "selector",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "reference",
												"name": "SelectorFn",
												"id": 3625,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "ValueT"
													},
													{
														"type": "typeParameter",
														"name": "KeyT"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "ISeries",
										"id": 2287,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "IndexT"
											},
											{
												"type": "typeParameter",
												"name": "ValueT"
											}
										]
									},
									"implementationOf": {
										"type": "reference",
										"name": "ISeries.union",
										"id": 2494
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/series.ts",
									"line": 2181,
									"character": 9
								}
							],
							"implementationOf": {
								"type": "reference",
								"name": "ISeries.union",
								"id": 2493
							}
						},
						{
							"id": 2951,
							"name": "variableWindow",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 2952,
									"name": "variableWindow",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Groups sequential values into variable length 'windows'.",
										"returns": "Returns a series of groups. Each group is itself a series that contains the values in the 'window'.\n"
									},
									"parameters": [
										{
											"id": 2953,
											"name": "comparer",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Predicate that compares two values and returns true if they should be in the same window.\n"
											},
											"type": {
												"type": "reference",
												"name": "ComparerFn",
												"id": 3651,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "ValueT"
													},
													{
														"type": "typeParameter",
														"name": "ValueT"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "ISeries",
										"id": 2287,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "number"
											},
											{
												"type": "reference",
												"name": "ISeries",
												"id": 2287,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "IndexT"
													},
													{
														"type": "typeParameter",
														"name": "ValueT"
													}
												]
											}
										]
									},
									"implementationOf": {
										"type": "reference",
										"name": "ISeries.variableWindow",
										"id": 2332
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/series.ts",
									"line": 1196,
									"character": 18
								}
							],
							"implementationOf": {
								"type": "reference",
								"name": "ISeries.variableWindow",
								"id": 2331
							}
						},
						{
							"id": 2998,
							"name": "where",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 2999,
									"name": "where",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Filter a series by a predicate selector.",
										"returns": "Returns a new series containing only the values that match the predicate.\n"
									},
									"parameters": [
										{
											"id": 3000,
											"name": "predicate",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Predicte function to filter rows of the series.\n"
											},
											"type": {
												"type": "reference",
												"name": "PredicateFn",
												"id": 3639,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "ValueT"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "ISeries",
										"id": 2287,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "IndexT"
											},
											{
												"type": "typeParameter",
												"name": "ValueT"
											}
										]
									},
									"implementationOf": {
										"type": "reference",
										"name": "ISeries.where",
										"id": 2379
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/series.ts",
									"line": 1486,
									"character": 9
								}
							],
							"implementationOf": {
								"type": "reference",
								"name": "ISeries.where",
								"id": 2378
							}
						},
						{
							"id": 2945,
							"name": "window",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 2946,
									"name": "window",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Segment a series into 'windows'. Returns a new series. Each value in the new series contains a 'window' (or segment) of the original series.\nUse select or selectPairs to aggregate.",
										"returns": "Returns a new series, each value of which is a 'window' (or segment) of the original series.\n"
									},
									"parameters": [
										{
											"id": 2947,
											"name": "period",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The number of values in the window.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "ISeries",
										"id": 2287,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "number"
											},
											{
												"type": "reference",
												"name": "ISeries",
												"id": 2287,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "IndexT"
													},
													{
														"type": "typeParameter",
														"name": "ValueT"
													}
												]
											}
										]
									},
									"implementationOf": {
										"type": "reference",
										"name": "ISeries.window",
										"id": 2326
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/series.ts",
									"line": 1164,
									"character": 10
								}
							],
							"implementationOf": {
								"type": "reference",
								"name": "ISeries.window",
								"id": 2325
							}
						},
						{
							"id": 2914,
							"name": "withIndex",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 2915,
									"name": "withIndex",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Apply a new index to the Series.",
										"returns": "Returns a new series with the specified index attached.\n"
									},
									"typeParameter": [
										{
											"id": 2916,
											"name": "NewIndexT",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										}
									],
									"parameters": [
										{
											"id": 2917,
											"name": "newIndex",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The new array or iterable to apply to the dataframe. Can also be a selector to choose the index for each row in the dataframe.\n"
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "reference",
														"name": "Iterable",
														"typeArguments": [
															{
																"type": "typeParameter",
																"name": "NewIndexT"
															}
														]
													},
													{
														"type": "reference",
														"name": "SelectorFn",
														"id": 3625,
														"typeArguments": [
															{
																"type": "typeParameter",
																"name": "ValueT"
															},
															{
																"type": "typeParameter",
																"name": "NewIndexT"
															}
														]
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "ISeries",
										"id": 2287,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "NewIndexT"
											},
											{
												"type": "typeParameter",
												"name": "ValueT"
											}
										]
									},
									"implementationOf": {
										"type": "reference",
										"name": "ISeries.withIndex",
										"id": 2295
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/series.ts",
									"line": 1035,
									"character": 13
								}
							],
							"implementationOf": {
								"type": "reference",
								"name": "ISeries.withIndex",
								"id": 2294
							}
						},
						{
							"id": 3103,
							"name": "zip",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 3104,
									"name": "zip",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Zip together multiple series to create a new series.\nPreserves the index of the first series.",
										"returns": "Returns a single series concatenated from multiple input series.\n"
									},
									"typeParameter": [
										{
											"id": 3105,
											"name": "Index2T",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										},
										{
											"id": 3106,
											"name": "Value2T",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										},
										{
											"id": 3107,
											"name": "ResultT",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										}
									],
									"parameters": [
										{
											"id": 3108,
											"name": "s2",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "ISeries",
												"id": 2287,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "Index2T"
													},
													{
														"type": "typeParameter",
														"name": "Value2T"
													}
												]
											}
										},
										{
											"id": 3109,
											"name": "zipper",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Zipper function that produces a new series based on the input series.\n"
											},
											"type": {
												"type": "reference",
												"name": "Zip2Fn",
												"id": 3582,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "ValueT"
													},
													{
														"type": "typeParameter",
														"name": "Value2T"
													},
													{
														"type": "typeParameter",
														"name": "ResultT"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "ISeries",
										"id": 2287,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "IndexT"
											},
											{
												"type": "typeParameter",
												"name": "ResultT"
											}
										]
									},
									"implementationOf": {
										"type": "reference",
										"name": "ISeries.zip",
										"id": 2455
									}
								},
								{
									"id": 3110,
									"name": "zip",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"typeParameter": [
										{
											"id": 3111,
											"name": "Index2T",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										},
										{
											"id": 3112,
											"name": "Value2T",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										},
										{
											"id": 3113,
											"name": "Index3T",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										},
										{
											"id": 3114,
											"name": "Value3T",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										},
										{
											"id": 3115,
											"name": "ResultT",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										}
									],
									"parameters": [
										{
											"id": 3116,
											"name": "s2",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "ISeries",
												"id": 2287,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "Index2T"
													},
													{
														"type": "typeParameter",
														"name": "Value2T"
													}
												]
											}
										},
										{
											"id": 3117,
											"name": "s3",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "ISeries",
												"id": 2287,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "Index3T"
													},
													{
														"type": "typeParameter",
														"name": "Value3T"
													}
												]
											}
										},
										{
											"id": 3118,
											"name": "zipper",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Zip3Fn",
												"id": 3590,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "ValueT"
													},
													{
														"type": "typeParameter",
														"name": "Value2T"
													},
													{
														"type": "typeParameter",
														"name": "Value3T"
													},
													{
														"type": "typeParameter",
														"name": "ResultT"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "ISeries",
										"id": 2287,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "IndexT"
											},
											{
												"type": "typeParameter",
												"name": "ResultT"
											}
										]
									},
									"implementationOf": {
										"type": "reference",
										"name": "ISeries.zip",
										"id": 2461
									}
								},
								{
									"id": 3119,
									"name": "zip",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"typeParameter": [
										{
											"id": 3120,
											"name": "Index2T",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										},
										{
											"id": 3121,
											"name": "Value2T",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										},
										{
											"id": 3122,
											"name": "Index3T",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										},
										{
											"id": 3123,
											"name": "Value3T",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										},
										{
											"id": 3124,
											"name": "Index4T",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										},
										{
											"id": 3125,
											"name": "Value4T",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										},
										{
											"id": 3126,
											"name": "ResultT",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										}
									],
									"parameters": [
										{
											"id": 3127,
											"name": "s2",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "ISeries",
												"id": 2287,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "Index2T"
													},
													{
														"type": "typeParameter",
														"name": "Value2T"
													}
												]
											}
										},
										{
											"id": 3128,
											"name": "s3",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "ISeries",
												"id": 2287,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "Index3T"
													},
													{
														"type": "typeParameter",
														"name": "Value3T"
													}
												]
											}
										},
										{
											"id": 3129,
											"name": "s4",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "ISeries",
												"id": 2287,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "Index4T"
													},
													{
														"type": "typeParameter",
														"name": "Value4T"
													}
												]
											}
										},
										{
											"id": 3130,
											"name": "zipper",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Zip3Fn",
												"id": 3590,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "ValueT"
													},
													{
														"type": "typeParameter",
														"name": "Value2T"
													},
													{
														"type": "typeParameter",
														"name": "Value3T"
													},
													{
														"type": "typeParameter",
														"name": "ResultT"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "ISeries",
										"id": 2287,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "IndexT"
											},
											{
												"type": "typeParameter",
												"name": "ResultT"
											}
										]
									},
									"implementationOf": {
										"type": "reference",
										"name": "ISeries.zip",
										"id": 2470
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/series.ts",
									"line": 2139,
									"character": 7
								},
								{
									"fileName": "lib/series.ts",
									"line": 2140,
									"character": 7
								},
								{
									"fileName": "lib/series.ts",
									"line": 2141,
									"character": 7
								},
								{
									"fileName": "lib/series.ts",
									"line": 2142,
									"character": 7
								}
							],
							"implementationOf": {
								"type": "reference",
								"name": "ISeries.zip",
								"id": 2454
							}
						},
						{
							"id": 2893,
							"name": "checkIterable",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isStatic": true,
								"isPrivate": true,
								"isExported": true
							},
							"signatures": [
								{
									"id": 2894,
									"name": "checkIterable",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"typeParameter": [
										{
											"id": 2895,
											"name": "T",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										}
									],
									"parameters": [
										{
											"id": 2896,
											"name": "input",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "array",
														"elementType": {
															"type": "typeParameter",
															"name": "T"
														}
													},
													{
														"type": "reference",
														"name": "Iterable",
														"typeArguments": [
															{
																"type": "typeParameter",
																"name": "T"
															}
														]
													}
												]
											}
										},
										{
											"id": 2897,
											"name": "fieldName",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/series.ts",
									"line": 901,
									"character": 32
								}
							]
						},
						{
							"id": 3088,
							"name": "concat",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isStatic": true,
								"isExported": true
							},
							"signatures": [
								{
									"id": 3089,
									"name": "concat",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Concatenate multiple series into a single series.",
										"returns": "Returns a single series concatenated from multiple input series.\n"
									},
									"typeParameter": [
										{
											"id": 3090,
											"name": "IndexT",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										},
										{
											"id": 3091,
											"name": "ValueT",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										}
									],
									"parameters": [
										{
											"id": 3092,
											"name": "series",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Array of series to concatenate.\n"
											},
											"type": {
												"type": "array",
												"elementType": {
													"type": "reference",
													"name": "ISeries",
													"id": 2287,
													"typeArguments": [
														{
															"type": "typeParameter",
															"name": "IndexT"
														},
														{
															"type": "typeParameter",
															"name": "ValueT"
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "ISeries",
										"id": 2287,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "IndexT"
											},
											{
												"type": "typeParameter",
												"name": "ValueT"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/series.ts",
									"line": 2060,
									"character": 17
								}
							]
						},
						{
							"id": 2889,
							"name": "initEmpty",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isStatic": true,
								"isPrivate": true,
								"isExported": true
							},
							"signatures": [
								{
									"id": 2890,
									"name": "initEmpty",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"typeParameter": [
										{
											"id": 2891,
											"name": "IndexT",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										},
										{
											"id": 2892,
											"name": "ValueT",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										}
									],
									"type": {
										"type": "reference",
										"name": "ISeriesContent",
										"id": 2870,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "IndexT"
											},
											{
												"type": "typeParameter",
												"name": "ValueT"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/series.ts",
									"line": 889,
									"character": 28
								}
							]
						},
						{
							"id": 2884,
							"name": "initFromArray",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isStatic": true,
								"isPrivate": true,
								"isExported": true
							},
							"signatures": [
								{
									"id": 2885,
									"name": "initFromArray",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"typeParameter": [
										{
											"id": 2886,
											"name": "IndexT",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										},
										{
											"id": 2887,
											"name": "ValueT",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										}
									],
									"parameters": [
										{
											"id": 2888,
											"name": "arr",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Iterable",
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "ValueT"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "ISeriesContent",
										"id": 2870,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "IndexT"
											},
											{
												"type": "typeParameter",
												"name": "ValueT"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/series.ts",
									"line": 877,
									"character": 32
								}
							]
						},
						{
							"id": 2898,
							"name": "initFromConfig",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isStatic": true,
								"isPrivate": true,
								"isExported": true
							},
							"signatures": [
								{
									"id": 2899,
									"name": "initFromConfig",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"typeParameter": [
										{
											"id": 2900,
											"name": "IndexT",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										},
										{
											"id": 2901,
											"name": "ValueT",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										}
									],
									"parameters": [
										{
											"id": 2902,
											"name": "config",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "ISeriesConfig",
												"id": 2274,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "IndexT"
													},
													{
														"type": "typeParameter",
														"name": "ValueT"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "ISeriesContent",
										"id": 2870,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "IndexT"
											},
											{
												"type": "typeParameter",
												"name": "ValueT"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/series.ts",
									"line": 918,
									"character": 33
								}
							]
						},
						{
							"id": 3043,
							"name": "parseDate",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isStatic": true,
								"isExported": true
							},
							"signatures": [
								{
									"id": 3044,
									"name": "parseDate",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 3045,
											"name": "value",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "any"
													},
													{
														"type": "intrinsic",
														"name": "undefined"
													}
												]
											}
										},
										{
											"id": 3046,
											"name": "valueIndex",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										},
										{
											"id": 3047,
											"name": "formatString",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "undefined"
													},
													{
														"type": "intrinsic",
														"name": "string"
													}
												]
											}
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"name": "Date"
											},
											{
												"type": "intrinsic",
												"name": "undefined"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/series.ts",
									"line": 1771,
									"character": 20
								}
							]
						},
						{
							"id": 3037,
							"name": "parseFloat",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isStatic": true,
								"isExported": true
							},
							"signatures": [
								{
									"id": 3038,
									"name": "parseFloat",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 3039,
											"name": "value",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "any"
													},
													{
														"type": "intrinsic",
														"name": "undefined"
													}
												]
											}
										},
										{
											"id": 3040,
											"name": "valueIndex",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "number"
											},
											{
												"type": "intrinsic",
												"name": "undefined"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/series.ts",
									"line": 1744,
									"character": 21
								}
							]
						},
						{
							"id": 3031,
							"name": "parseInt",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isStatic": true,
								"isExported": true
							},
							"signatures": [
								{
									"id": 3032,
									"name": "parseInt",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 3033,
											"name": "value",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "any"
													},
													{
														"type": "intrinsic",
														"name": "undefined"
													}
												]
											}
										},
										{
											"id": 3034,
											"name": "valueIndex",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "number"
											},
											{
												"type": "intrinsic",
												"name": "undefined"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/series.ts",
									"line": 1717,
									"character": 19
								}
							]
						},
						{
							"id": 3051,
							"name": "toString",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isStatic": true,
								"isExported": true
							},
							"signatures": [
								{
									"id": 3052,
									"name": "toString",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 3053,
											"name": "value",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "any"
													},
													{
														"type": "intrinsic",
														"name": "undefined"
													}
												]
											}
										},
										{
											"id": 3054,
											"name": "formatString",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "undefined"
													},
													{
														"type": "intrinsic",
														"name": "string"
													}
												]
											}
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "undefined"
											},
											{
												"type": "intrinsic",
												"name": "null"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/series.ts",
									"line": 1805,
									"character": 19
								}
							]
						},
						{
							"id": 3096,
							"name": "zip",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isStatic": true,
								"isExported": true
							},
							"signatures": [
								{
									"id": 3097,
									"name": "zip",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Zip together multiple series to create a new series.\nPreserves the index of the first series.",
										"returns": "Returns a single series zipped from multiple input series.\n"
									},
									"typeParameter": [
										{
											"id": 3098,
											"name": "IndexT",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										},
										{
											"id": 3099,
											"name": "ValueT",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										},
										{
											"id": 3100,
											"name": "ResultT",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										}
									],
									"parameters": [
										{
											"id": 3101,
											"name": "series",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Multiple arguments. Each can be either a series or an array of series."
											},
											"type": {
												"type": "array",
												"elementType": {
													"type": "reference",
													"name": "ISeries",
													"id": 2287,
													"typeArguments": [
														{
															"type": "typeParameter",
															"name": "IndexT"
														},
														{
															"type": "typeParameter",
															"name": "ValueT"
														}
													]
												}
											}
										},
										{
											"id": 3102,
											"name": "zipper",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Selector function that produces a new series based on the input series.\n"
											},
											"type": {
												"type": "reference",
												"name": "ZipNFn",
												"id": 3576,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "ValueT"
													},
													{
														"type": "typeParameter",
														"name": "ResultT"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "ISeries",
										"id": 2287,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "IndexT"
											},
											{
												"type": "typeParameter",
												"name": "ResultT"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/series.ts",
									"line": 2106,
									"character": 14
								}
							]
						}
					],
					"groups": [
						{
							"title": "Constructors",
							"kind": 512,
							"children": [
								2903
							]
						},
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								2880,
								2881,
								2882,
								2883
							]
						},
						{
							"title": "Methods",
							"kind": 2048,
							"children": [
								2910,
								3022,
								2958,
								3004,
								3007,
								3206,
								2989,
								3066,
								3058,
								3019,
								3025,
								3093,
								2983,
								3213,
								3216,
								3218,
								3076,
								3016,
								3152,
								3209,
								2985,
								3001,
								2908,
								2912,
								3080,
								3084,
								2992,
								3060,
								3203,
								3144,
								3160,
								3170,
								3180,
								3190,
								2987,
								2906,
								3072,
								3068,
								3070,
								3010,
								3131,
								3135,
								3048,
								3041,
								3035,
								2963,
								2918,
								3074,
								2948,
								2937,
								2941,
								2954,
								2965,
								2971,
								2968,
								3013,
								3064,
								2995,
								2974,
								2980,
								2977,
								2920,
								2924,
								2922,
								3029,
								3055,
								3200,
								3139,
								2951,
								2998,
								2945,
								2914,
								3103,
								2893,
								3088,
								2889,
								2884,
								2898,
								3043,
								3037,
								3031,
								3051,
								3096
							]
						}
					],
					"sources": [
						{
							"fileName": "lib/series.ts",
							"line": 858,
							"character": 19
						}
					],
					"extendedBy": [
						{
							"type": "reference",
							"name": "OrderedSeries",
							"id": 3220
						},
						{
							"type": "reference",
							"name": "Index",
							"id": 3965
						}
					],
					"implementedTypes": [
						{
							"type": "reference",
							"name": "ISeries",
							"id": 2287,
							"typeArguments": [
								{
									"type": "typeParameter",
									"name": "IndexT"
								},
								{
									"type": "typeParameter",
									"name": "ValueT"
								}
							]
						}
					]
				},
				{
					"id": 2574,
					"name": "IOrderedSeries",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "Interface to a series that has been ordered."
					},
					"typeParameter": [
						{
							"id": 2575,
							"name": "IndexT",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {}
						},
						{
							"id": 2576,
							"name": "ValueT",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {}
						},
						{
							"id": 2577,
							"name": "SortT",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {}
						}
					],
					"children": [
						{
							"id": 2586,
							"name": "__@iterator",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 2587,
									"name": "__@iterator",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Get an iterator to enumerate the values of the series."
									},
									"type": {
										"type": "reference",
										"name": "Iterator",
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "ValueT"
											}
										]
									},
									"overwrites": {
										"type": "reference",
										"name": "Iterable.[Symbol.iterator]"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "ISeries.[Symbol.iterator]",
										"id": 2290
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/series.ts",
									"line": 134,
									"character": 21
								}
							],
							"overwrites": {
								"type": "reference",
								"name": "Iterable.[Symbol.iterator]"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "ISeries.[Symbol.iterator]",
								"id": 2290
							}
						},
						{
							"id": 2698,
							"name": "after",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 2699,
									"name": "after",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Get a new series containing all values after the specified index value (exclusive).",
										"returns": "Returns a new series containing all values after the specified index value.\n"
									},
									"parameters": [
										{
											"id": 2700,
											"name": "indexValue",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The index value to search for.\n"
											},
											"type": {
												"type": "typeParameter",
												"name": "IndexT"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "ISeries",
										"id": 2287,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "IndexT"
											},
											{
												"type": "typeParameter",
												"name": "ValueT"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "ISeries.after",
										"id": 2402
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/series.ts",
									"line": 448,
									"character": 9
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "ISeries.after",
								"id": 2402
							}
						},
						{
							"id": 2634,
							"name": "aggregate",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 2635,
									"name": "aggregate",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Aggregate the values in the series.",
										"returns": "Returns a new value that has been aggregated from the input sequence by the 'selector' function.\n"
									},
									"typeParameter": [
										{
											"id": 2636,
											"name": "ToT",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										}
									],
									"parameters": [
										{
											"id": 2637,
											"name": "seedOrSelector",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "reference",
														"name": "AggregateFn",
														"id": 3644,
														"typeArguments": [
															{
																"type": "typeParameter",
																"name": "ValueT"
															},
															{
																"type": "typeParameter",
																"name": "ToT"
															}
														]
													},
													{
														"type": "typeParameter",
														"name": "ToT"
													}
												]
											}
										},
										{
											"id": 2638,
											"name": "selector",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"text": "Function that takes the seed and then each value in the series and produces the aggregate value.\n"
											},
											"type": {
												"type": "reference",
												"name": "AggregateFn",
												"id": 3644,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "ValueT"
													},
													{
														"type": "typeParameter",
														"name": "ToT"
													}
												]
											}
										}
									],
									"type": {
										"type": "typeParameter",
										"name": "ToT"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "ISeries.aggregate",
										"id": 2338
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/series.ts",
									"line": 246,
									"character": 13
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "ISeries.aggregate",
								"id": 2338
							}
						},
						{
							"id": 2680,
							"name": "all",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 2681,
									"name": "all",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Determine if the predicate returns truthy for all values in the series.\nReturns false as soon as the predicate evaluates to falsy.\nReturns true if the predicate returns truthy for all values in the series.\nReturns false if the series is empty.",
										"text": "TODO: Should predicate here by optional  as well same as in any and none?\n",
										"returns": "Returns true if the predicate has returned truthy for every value in the sequence, otherwise returns false.\n"
									},
									"parameters": [
										{
											"id": 2682,
											"name": "predicate",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Predicate function that receives each value in turn and returns truthy for a match, otherwise falsy.\n"
											},
											"type": {
												"type": "reference",
												"name": "PredicateFn",
												"id": 3639,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "ValueT"
													}
												]
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "ISeries.all",
										"id": 2384
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/series.ts",
									"line": 387,
									"character": 7
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "ISeries.all",
								"id": 2384
							}
						},
						{
							"id": 2683,
							"name": "any",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 2684,
									"name": "any",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Determine if the predicate returns truthy for any of the values in the series.\nReturns true as soon as the predicate returns truthy.\nReturns false if the predicate never returns truthy.\nIf no predicate is specified the value itself is checked.",
										"returns": "Returns true if the predicate has returned truthy for any value in the sequence, otherwise returns false.\n"
									},
									"parameters": [
										{
											"id": 2685,
											"name": "predicate",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "reference",
												"name": "PredicateFn",
												"id": 3639,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "ValueT"
													}
												]
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "ISeries.any",
										"id": 2387
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/series.ts",
									"line": 399,
									"character": 7
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "ISeries.any",
								"id": 2387
							}
						},
						{
							"id": 2856,
							"name": "appendPair",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 2857,
									"name": "appendPair",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Append a pair to the end of a Series.",
										"returns": "Returns a new series with the specified pair appended.\n"
									},
									"parameters": [
										{
											"id": 2858,
											"name": "pair",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The pair to append.\n"
											},
											"type": {
												"type": "tuple",
												"elements": [
													{
														"type": "typeParameter",
														"name": "IndexT"
													},
													{
														"type": "typeParameter",
														"name": "ValueT"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "ISeries",
										"id": 2287,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "IndexT"
											},
											{
												"type": "typeParameter",
												"name": "ValueT"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "ISeries.appendPair",
										"id": 2560
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/series.ts",
									"line": 781,
									"character": 14
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "ISeries.appendPair",
								"id": 2560
							}
						},
						{
							"id": 2665,
							"name": "at",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 2666,
									"name": "at",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Get the value at a specified index.",
										"returns": "Returns the value from the specified index in the sequence or undefined if there is no such index in the series.\n"
									},
									"parameters": [
										{
											"id": 2667,
											"name": "index",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Index to for which to retreive the value.\n"
											},
											"type": {
												"type": "typeParameter",
												"name": "IndexT"
											}
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "typeParameter",
												"name": "ValueT"
											},
											{
												"type": "intrinsic",
												"name": "undefined"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "ISeries.at",
										"id": 2369
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/series.ts",
									"line": 337,
									"character": 6
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "ISeries.at",
								"id": 2369
							}
						},
						{
							"id": 2725,
							"name": "average",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 2726,
									"name": "average",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Average the values in a series.",
										"returns": "Returns the average of the number values in the series.\n"
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "ISeries.average",
										"id": 2429
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/series.ts",
									"line": 528,
									"character": 11
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "ISeries.average",
								"id": 2429
							}
						},
						{
							"id": 2717,
							"name": "bake",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 2718,
									"name": "bake",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Forces lazy evaluation to complete and 'bakes' the series into memory.",
										"returns": "Returns a series that has been 'baked', all lazy evaluation has completed.\n"
									},
									"type": {
										"type": "reference",
										"name": "ISeries",
										"id": 2287,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "IndexT"
											},
											{
												"type": "typeParameter",
												"name": "ValueT"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "ISeries.bake",
										"id": 2421
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/series.ts",
									"line": 505,
									"character": 8
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "ISeries.bake",
								"id": 2421
							}
						},
						{
							"id": 2695,
							"name": "before",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 2696,
									"name": "before",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Get a new series containing all values up to the specified index value (exclusive).",
										"returns": "Returns a new series containing all values up to the specified inde value.\n"
									},
									"parameters": [
										{
											"id": 2697,
											"name": "indexValue",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The index value to search for before ending the new series.\n"
											},
											"type": {
												"type": "typeParameter",
												"name": "IndexT"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "ISeries",
										"id": 2287,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "IndexT"
											},
											{
												"type": "typeParameter",
												"name": "ValueT"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "ISeries.before",
										"id": 2399
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/series.ts",
									"line": 439,
									"character": 10
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "ISeries.before",
								"id": 2399
							}
						},
						{
							"id": 2701,
							"name": "between",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 2702,
									"name": "between",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Get a new series containing all values between the specified index values (inclusive).",
										"returns": "Returns a new series containing all values between the specified index values (inclusive).\n"
									},
									"parameters": [
										{
											"id": 2703,
											"name": "startIndexValue",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The index where the new sequence starts."
											},
											"type": {
												"type": "typeParameter",
												"name": "IndexT"
											}
										},
										{
											"id": 2704,
											"name": "endIndexValue",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The index where the new sequence ends.\n"
											},
											"type": {
												"type": "typeParameter",
												"name": "IndexT"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "ISeries",
										"id": 2287,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "IndexT"
											},
											{
												"type": "typeParameter",
												"name": "ValueT"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "ISeries.between",
										"id": 2405
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/series.ts",
									"line": 458,
									"character": 11
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "ISeries.between",
								"id": 2405
							}
						},
						{
							"id": 2747,
							"name": "concat",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 2748,
									"name": "concat",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Concatenate multiple other series onto this series.",
										"returns": "Returns a single series concatenated from multiple input series.\n"
									},
									"parameters": [
										{
											"id": 2749,
											"name": "series",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isRest": true
											},
											"comment": {
												"text": "Multiple arguments. Each can be either a series or an array of series.\n"
											},
											"type": {
												"type": "array",
												"elementType": {
													"type": "union",
													"types": [
														{
															"type": "reference",
															"name": "ISeries",
															"id": 2287,
															"typeArguments": [
																{
																	"type": "unknown",
																	"name": "IndexT"
																},
																{
																	"type": "unknown",
																	"name": "ValueT"
																}
															]
														},
														{
															"type": "array",
															"elementType": {
																"type": "reference",
																"name": "ISeries",
																"id": 2287,
																"typeArguments": [
																	{
																		"type": "unknown",
																		"name": "IndexT"
																	},
																	{
																		"type": "unknown",
																		"name": "ValueT"
																	}
																]
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "ISeries",
										"id": 2287,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "IndexT"
											},
											{
												"type": "typeParameter",
												"name": "ValueT"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "ISeries.concat",
										"id": 2451
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/series.ts",
									"line": 592,
									"character": 10
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "ISeries.concat",
								"id": 2451
							}
						},
						{
							"id": 2659,
							"name": "count",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 2660,
									"name": "count",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Count the number of values in the series.",
										"returns": "Returns the count of all values in the series.\n"
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "ISeries.count",
										"id": 2363
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/series.ts",
									"line": 314,
									"character": 9
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "ISeries.count",
								"id": 2363
							}
						},
						{
							"id": 2863,
							"name": "defaultIfEmpty",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 2864,
									"name": "defaultIfEmpty",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Returns the specified default sequence if the series is empty.",
										"returns": "Returns 'defaultSequence' if the series is empty.\n"
									},
									"parameters": [
										{
											"id": 2865,
											"name": "defaultSequence",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Default sequence to return if the series is empty.\n"
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "array",
														"elementType": {
															"type": "typeParameter",
															"name": "ValueT"
														}
													},
													{
														"type": "reference",
														"name": "ISeries",
														"id": 2287,
														"typeArguments": [
															{
																"type": "typeParameter",
																"name": "IndexT"
															},
															{
																"type": "typeParameter",
																"name": "ValueT"
															}
														]
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "ISeries",
										"id": 2287,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "IndexT"
											},
											{
												"type": "typeParameter",
												"name": "ValueT"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "ISeries.defaultIfEmpty",
										"id": 2567
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/series.ts",
									"line": 800,
									"character": 18
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "ISeries.defaultIfEmpty",
								"id": 2567
							}
						},
						{
							"id": 2866,
							"name": "detectTypes",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 2867,
									"name": "detectTypes",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Detect the types of the values in the sequence.",
										"returns": "Returns a dataframe that describes the data types contained in the input series or dataframe.\n"
									},
									"type": {
										"type": "reference",
										"name": "IDataFrame",
										"id": 683,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "number"
											},
											{
												"type": "reference",
												"name": "ITypeFrequency",
												"id": 2281
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "ISeries.detectTypes",
										"id": 2570
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/series.ts",
									"line": 807,
									"character": 15
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "ISeries.detectTypes",
								"id": 2570
							}
						},
						{
							"id": 2868,
							"name": "detectValues",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 2869,
									"name": "detectValues",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Detect the frequency of values in the sequence.",
										"returns": "Returns a dataframe that describes the values contained in the input sequence.\n"
									},
									"type": {
										"type": "reference",
										"name": "IDataFrame",
										"id": 683,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "number"
											},
											{
												"type": "reference",
												"name": "IValueFrequency",
												"id": 2284
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "ISeries.detectValues",
										"id": 2572
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/series.ts",
									"line": 814,
									"character": 16
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "ISeries.detectValues",
								"id": 2572
							}
						},
						{
							"id": 2735,
							"name": "distinct",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 2736,
									"name": "distinct",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Returns only values in the series that have distinct values.",
										"returns": "Returns a series containing only unique values as determined by the 'selector' function.\n"
									},
									"typeParameter": [
										{
											"id": 2737,
											"name": "ToT",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										}
									],
									"parameters": [
										{
											"id": 2738,
											"name": "selector",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"text": "Selects the value used to compare for duplicates.\n"
											},
											"type": {
												"type": "reference",
												"name": "SelectorFn",
												"id": 3625,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "ValueT"
													},
													{
														"type": "typeParameter",
														"name": "ToT"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "ISeries",
										"id": 2287,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "IndexT"
											},
											{
												"type": "typeParameter",
												"name": "ValueT"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "ISeries.distinct",
										"id": 2439
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/series.ts",
									"line": 565,
									"character": 12
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "ISeries.distinct",
								"id": 2439
							}
						},
						{
							"id": 2692,
							"name": "endAt",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 2693,
									"name": "endAt",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Get a new series containing all values up until and including the specified index value (inclusive).",
										"returns": "Returns a new series containing all values up until and including the specified index value.\n"
									},
									"parameters": [
										{
											"id": 2694,
											"name": "indexValue",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The index value to search for before ending the new series.\n"
											},
											"type": {
												"type": "typeParameter",
												"name": "IndexT"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "ISeries",
										"id": 2287,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "IndexT"
											},
											{
												"type": "typeParameter",
												"name": "ValueT"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "ISeries.endAt",
										"id": 2396
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/series.ts",
									"line": 430,
									"character": 9
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "ISeries.endAt",
								"id": 2396
							}
						},
						{
							"id": 2802,
							"name": "except",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 2803,
									"name": "except",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Returns the exception of values between two series.",
										"returns": "Returns the difference between the two series.\n"
									},
									"typeParameter": [
										{
											"id": 2804,
											"name": "InnerIndexT",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										},
										{
											"id": 2805,
											"name": "InnerValueT",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										},
										{
											"id": 2806,
											"name": "KeyT",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										}
									],
									"parameters": [
										{
											"id": 2807,
											"name": "inner",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The other series to combine."
											},
											"type": {
												"type": "reference",
												"name": "ISeries",
												"id": 2287,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "InnerIndexT"
													},
													{
														"type": "typeParameter",
														"name": "InnerValueT"
													}
												]
											}
										},
										{
											"id": 2808,
											"name": "outerSelector",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "reference",
												"name": "SelectorFn",
												"id": 3625,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "ValueT"
													},
													{
														"type": "typeParameter",
														"name": "KeyT"
													}
												]
											}
										},
										{
											"id": 2809,
											"name": "innerSelector",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "reference",
												"name": "SelectorFn",
												"id": 3625,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "InnerValueT"
													},
													{
														"type": "typeParameter",
														"name": "KeyT"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "ISeries",
										"id": 2287,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "IndexT"
											},
											{
												"type": "typeParameter",
												"name": "ValueT"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "ISeries.except",
										"id": 2506
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/series.ts",
									"line": 663,
									"character": 10
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "ISeries.except",
								"id": 2506
							}
						},
						{
							"id": 2859,
							"name": "fillGaps",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 2860,
									"name": "fillGaps",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Fill gaps in a series or dataframe.",
										"returns": "Returns a new series with gaps filled in.\n"
									},
									"parameters": [
										{
											"id": 2861,
											"name": "comparer",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Comparer that is passed pairA and pairB, two consecutive rows, return truthy if there is a gap between the rows, or falsey if there is no gap."
											},
											"type": {
												"type": "reference",
												"name": "ComparerFn",
												"id": 3651,
												"typeArguments": [
													{
														"type": "tuple",
														"elements": [
															{
																"type": "typeParameter",
																"name": "IndexT"
															},
															{
																"type": "typeParameter",
																"name": "ValueT"
															}
														]
													},
													{
														"type": "tuple",
														"elements": [
															{
																"type": "typeParameter",
																"name": "IndexT"
															},
															{
																"type": "typeParameter",
																"name": "ValueT"
															}
														]
													}
												]
											}
										},
										{
											"id": 2862,
											"name": "generator",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Generator that is passed pairA and pairB, two consecutive rows, returns an array of pairs that fills the gap between the rows.\n"
											},
											"type": {
												"type": "reference",
												"name": "GapFillFn",
												"id": 3663,
												"typeArguments": [
													{
														"type": "tuple",
														"elements": [
															{
																"type": "typeParameter",
																"name": "IndexT"
															},
															{
																"type": "typeParameter",
																"name": "ValueT"
															}
														]
													},
													{
														"type": "tuple",
														"elements": [
															{
																"type": "typeParameter",
																"name": "IndexT"
															},
															{
																"type": "typeParameter",
																"name": "ValueT"
															}
														]
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "ISeries",
										"id": 2287,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "IndexT"
											},
											{
												"type": "typeParameter",
												"name": "ValueT"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "ISeries.fillGaps",
										"id": 2563
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/series.ts",
									"line": 791,
									"character": 12
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "ISeries.fillGaps",
								"id": 2563
							}
						},
						{
							"id": 2661,
							"name": "first",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 2662,
									"name": "first",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Get the first value of the series.",
										"returns": "Returns the first value of the series.\n"
									},
									"type": {
										"type": "typeParameter",
										"name": "ValueT"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "ISeries.first",
										"id": 2365
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/series.ts",
									"line": 321,
									"character": 9
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "ISeries.first",
								"id": 2365
							}
						},
						{
							"id": 2677,
							"name": "forEach",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 2678,
									"name": "forEach",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Invoke a callback function for each value in the series.",
										"returns": "Returns the input series with no modifications.\n"
									},
									"parameters": [
										{
											"id": 2679,
											"name": "callback",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The calback to invoke for each value.\n"
											},
											"type": {
												"type": "reference",
												"name": "CallbackFn",
												"id": 3563,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "ValueT"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "ISeries",
										"id": 2287,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "IndexT"
											},
											{
												"type": "typeParameter",
												"name": "ValueT"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "ISeries.forEach",
										"id": 2381
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/series.ts",
									"line": 373,
									"character": 11
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "ISeries.forEach",
								"id": 2381
							}
						},
						{
							"id": 2588,
							"name": "getIndex",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 2589,
									"name": "getIndex",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Get the index for the series."
									},
									"type": {
										"type": "reference",
										"name": "IIndex",
										"id": 3671,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "IndexT"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "ISeries.getIndex",
										"id": 2292
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/series.ts",
									"line": 139,
									"character": 12
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "ISeries.getIndex",
								"id": 2292
							}
						},
						{
							"id": 2739,
							"name": "groupBy",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 2740,
									"name": "groupBy",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Group the series according to the selector.",
										"returns": "Returns a series of groups. Each group is a series with values that have been grouped by the 'selector' function.\n"
									},
									"typeParameter": [
										{
											"id": 2741,
											"name": "GroupT",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										}
									],
									"parameters": [
										{
											"id": 2742,
											"name": "selector",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Selector that defines the value to group by.\n"
											},
											"type": {
												"type": "reference",
												"name": "SelectorFn",
												"id": 3625,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "ValueT"
													},
													{
														"type": "typeParameter",
														"name": "GroupT"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "ISeries",
										"id": 2287,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "number"
											},
											{
												"type": "reference",
												"name": "ISeries",
												"id": 2287,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "IndexT"
													},
													{
														"type": "typeParameter",
														"name": "ValueT"
													}
												]
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "ISeries.groupBy",
										"id": 2443
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/series.ts",
									"line": 574,
									"character": 11
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "ISeries.groupBy",
								"id": 2443
							}
						},
						{
							"id": 2743,
							"name": "groupSequentialBy",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 2744,
									"name": "groupSequentialBy",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Group sequential values into a Series of windows.",
										"returns": "Returns a series of groups. Each group is a series with values that have been grouped by the 'selector' function.\n"
									},
									"typeParameter": [
										{
											"id": 2745,
											"name": "GroupT",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										}
									],
									"parameters": [
										{
											"id": 2746,
											"name": "selector",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"text": "Optional selector that defines the value to group by.\n"
											},
											"type": {
												"type": "reference",
												"name": "SelectorFn",
												"id": 3625,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "ValueT"
													},
													{
														"type": "typeParameter",
														"name": "GroupT"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "ISeries",
										"id": 2287,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "number"
											},
											{
												"type": "reference",
												"name": "ISeries",
												"id": 2287,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "IndexT"
													},
													{
														"type": "typeParameter",
														"name": "ValueT"
													}
												]
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "ISeries.groupSequentialBy",
										"id": 2447
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/series.ts",
									"line": 583,
									"character": 21
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "ISeries.groupSequentialBy",
								"id": 2447
							}
						},
						{
							"id": 2668,
							"name": "head",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 2669,
									"name": "head",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Get X values from the start of the series.",
										"returns": "Returns a new series that has only the specified number of values taken from the start of the input sequence.\n"
									},
									"parameters": [
										{
											"id": 2670,
											"name": "numValues",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Number of values to take.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "ISeries",
										"id": 2287,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "IndexT"
											},
											{
												"type": "typeParameter",
												"name": "ValueT"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "ISeries.head",
										"id": 2372
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/series.ts",
									"line": 346,
									"character": 8
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "ISeries.head",
								"id": 2372
							}
						},
						{
							"id": 2719,
							"name": "inflate",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 2720,
									"name": "inflate",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Inflate the series to a dataframe.",
										"returns": "Returns a new dataframe that has been created from the input series via the 'selector' function.\n"
									},
									"typeParameter": [
										{
											"id": 2721,
											"name": "ToT",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										}
									],
									"parameters": [
										{
											"id": 2722,
											"name": "selector",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "reference",
												"name": "SelectorWithIndexFn",
												"id": 3569,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "ValueT"
													},
													{
														"type": "typeParameter",
														"name": "ToT"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "IDataFrame",
										"id": 683,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "IndexT"
											},
											{
												"type": "typeParameter",
												"name": "ToT"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "ISeries.inflate",
										"id": 2423
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/series.ts",
									"line": 514,
									"character": 11
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "ISeries.inflate",
								"id": 2423
							}
						},
						{
							"id": 2853,
							"name": "insertPair",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 2854,
									"name": "insertPair",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Insert a pair at the start of the series.",
										"returns": "Returns a new series with the specified pair inserted.\n"
									},
									"parameters": [
										{
											"id": 2855,
											"name": "pair",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The pair to insert.\n"
											},
											"type": {
												"type": "tuple",
												"elements": [
													{
														"type": "typeParameter",
														"name": "IndexT"
													},
													{
														"type": "typeParameter",
														"name": "ValueT"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "ISeries",
										"id": 2287,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "IndexT"
											},
											{
												"type": "typeParameter",
												"name": "ValueT"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "ISeries.insertPair",
										"id": 2557
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/series.ts",
									"line": 772,
									"character": 14
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "ISeries.insertPair",
								"id": 2557
							}
						},
						{
							"id": 2794,
							"name": "intersection",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 2795,
									"name": "intersection",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Returns the intersection of values between two series.",
										"returns": "Returns the intersection of two series.\n"
									},
									"typeParameter": [
										{
											"id": 2796,
											"name": "InnerIndexT",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										},
										{
											"id": 2797,
											"name": "InnerValueT",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										},
										{
											"id": 2798,
											"name": "KeyT",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										}
									],
									"parameters": [
										{
											"id": 2799,
											"name": "inner",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The other series to combine."
											},
											"type": {
												"type": "reference",
												"name": "ISeries",
												"id": 2287,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "InnerIndexT"
													},
													{
														"type": "typeParameter",
														"name": "InnerValueT"
													}
												]
											}
										},
										{
											"id": 2800,
											"name": "outerSelector",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "reference",
												"name": "SelectorFn",
												"id": 3625,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "ValueT"
													},
													{
														"type": "typeParameter",
														"name": "KeyT"
													}
												]
											}
										},
										{
											"id": 2801,
											"name": "innerSelector",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "reference",
												"name": "SelectorFn",
												"id": 3625,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "InnerValueT"
													},
													{
														"type": "typeParameter",
														"name": "KeyT"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "ISeries",
										"id": 2287,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "IndexT"
											},
											{
												"type": "typeParameter",
												"name": "ValueT"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "ISeries.intersection",
										"id": 2498
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/series.ts",
									"line": 648,
									"character": 16
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "ISeries.intersection",
								"id": 2498
							}
						},
						{
							"id": 2810,
							"name": "join",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 2811,
									"name": "join",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Correlates the elements of two series on matching keys.",
										"returns": "Returns the joined series.\n"
									},
									"typeParameter": [
										{
											"id": 2812,
											"name": "KeyT",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										},
										{
											"id": 2813,
											"name": "InnerIndexT",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										},
										{
											"id": 2814,
											"name": "InnerValueT",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										},
										{
											"id": 2815,
											"name": "ResultValueT",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										}
									],
									"parameters": [
										{
											"id": 2816,
											"name": "inner",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The inner Series or DataFrame to join."
											},
											"type": {
												"type": "reference",
												"name": "ISeries",
												"id": 2287,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "InnerIndexT"
													},
													{
														"type": "typeParameter",
														"name": "InnerValueT"
													}
												]
											}
										},
										{
											"id": 2817,
											"name": "outerKeySelector",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Selector that chooses the join key from the outer sequence."
											},
											"type": {
												"type": "reference",
												"name": "SelectorFn",
												"id": 3625,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "ValueT"
													},
													{
														"type": "typeParameter",
														"name": "KeyT"
													}
												]
											}
										},
										{
											"id": 2818,
											"name": "innerKeySelector",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Selector that chooses the join key from the inner sequence."
											},
											"type": {
												"type": "reference",
												"name": "SelectorFn",
												"id": 3625,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "InnerValueT"
													},
													{
														"type": "typeParameter",
														"name": "KeyT"
													}
												]
											}
										},
										{
											"id": 2819,
											"name": "resultSelector",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Selector that defines how to merge outer and inner values.\n"
											},
											"type": {
												"type": "reference",
												"name": "JoinFn",
												"id": 3631,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "ValueT"
													},
													{
														"type": "typeParameter",
														"name": "InnerValueT"
													},
													{
														"type": "typeParameter",
														"name": "ResultValueT"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "ISeries",
										"id": 2287,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "number"
											},
											{
												"type": "typeParameter",
												"name": "ResultValueT"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "ISeries.join",
										"id": 2514
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/series.ts",
									"line": 680,
									"character": 8
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "ISeries.join",
								"id": 2514
							}
						},
						{
							"id": 2820,
							"name": "joinOuter",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 2821,
									"name": "joinOuter",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Performs an outer join on two series. Correlates the elements based on matching keys.\nIncludes elements from both series that have no correlation in the other series.",
										"returns": "Returns the joined series.\n"
									},
									"typeParameter": [
										{
											"id": 2822,
											"name": "KeyT",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										},
										{
											"id": 2823,
											"name": "InnerIndexT",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										},
										{
											"id": 2824,
											"name": "InnerValueT",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										},
										{
											"id": 2825,
											"name": "ResultValueT",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										}
									],
									"parameters": [
										{
											"id": 2826,
											"name": "inner",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The inner series to join."
											},
											"type": {
												"type": "reference",
												"name": "ISeries",
												"id": 2287,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "InnerIndexT"
													},
													{
														"type": "typeParameter",
														"name": "InnerValueT"
													}
												]
											}
										},
										{
											"id": 2827,
											"name": "outerKeySelector",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Selector that chooses the join key from the outer sequence."
											},
											"type": {
												"type": "reference",
												"name": "SelectorFn",
												"id": 3625,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "ValueT"
													},
													{
														"type": "typeParameter",
														"name": "KeyT"
													}
												]
											}
										},
										{
											"id": 2828,
											"name": "innerKeySelector",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Selector that chooses the join key from the inner sequence."
											},
											"type": {
												"type": "reference",
												"name": "SelectorFn",
												"id": 3625,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "InnerValueT"
													},
													{
														"type": "typeParameter",
														"name": "KeyT"
													}
												]
											}
										},
										{
											"id": 2829,
											"name": "resultSelector",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Selector that defines how to merge outer and inner values.\n\nImplementation from here:\n\n\thttp://blogs.geniuscode.net/RyanDHatch/?p=116\n"
											},
											"type": {
												"type": "reference",
												"name": "JoinFn",
												"id": 3631,
												"typeArguments": [
													{
														"type": "union",
														"types": [
															{
																"type": "typeParameter",
																"name": "ValueT"
															},
															{
																"type": "intrinsic",
																"name": "null"
															}
														]
													},
													{
														"type": "union",
														"types": [
															{
																"type": "typeParameter",
																"name": "InnerValueT"
															},
															{
																"type": "intrinsic",
																"name": "null"
															}
														]
													},
													{
														"type": "typeParameter",
														"name": "ResultValueT"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "ISeries",
										"id": 2287,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "number"
											},
											{
												"type": "typeParameter",
												"name": "ResultValueT"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "ISeries.joinOuter",
										"id": 2524
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/series.ts",
									"line": 703,
									"character": 13
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "ISeries.joinOuter",
								"id": 2524
							}
						},
						{
							"id": 2830,
							"name": "joinOuterLeft",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 2831,
									"name": "joinOuterLeft",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Performs a left outer join on two series. Correlates the elements based on matching keys.\nIncludes left elements that have no correlation.",
										"returns": "Returns the joined series or dataframe.\n"
									},
									"typeParameter": [
										{
											"id": 2832,
											"name": "KeyT",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										},
										{
											"id": 2833,
											"name": "InnerIndexT",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										},
										{
											"id": 2834,
											"name": "InnerValueT",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										},
										{
											"id": 2835,
											"name": "ResultValueT",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										}
									],
									"parameters": [
										{
											"id": 2836,
											"name": "inner",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The inner Series or DataFrame to join."
											},
											"type": {
												"type": "reference",
												"name": "ISeries",
												"id": 2287,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "InnerIndexT"
													},
													{
														"type": "typeParameter",
														"name": "InnerValueT"
													}
												]
											}
										},
										{
											"id": 2837,
											"name": "outerKeySelector",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Selector that chooses the join key from the outer sequence."
											},
											"type": {
												"type": "reference",
												"name": "SelectorFn",
												"id": 3625,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "ValueT"
													},
													{
														"type": "typeParameter",
														"name": "KeyT"
													}
												]
											}
										},
										{
											"id": 2838,
											"name": "innerKeySelector",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Selector that chooses the join key from the inner sequence."
											},
											"type": {
												"type": "reference",
												"name": "SelectorFn",
												"id": 3625,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "InnerValueT"
													},
													{
														"type": "typeParameter",
														"name": "KeyT"
													}
												]
											}
										},
										{
											"id": 2839,
											"name": "resultSelector",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Selector that defines how to merge outer and inner values.\n\nImplementation from here:\n\n\thttp://blogs.geniuscode.net/RyanDHatch/?p=116\n"
											},
											"type": {
												"type": "reference",
												"name": "JoinFn",
												"id": 3631,
												"typeArguments": [
													{
														"type": "union",
														"types": [
															{
																"type": "typeParameter",
																"name": "ValueT"
															},
															{
																"type": "intrinsic",
																"name": "null"
															}
														]
													},
													{
														"type": "union",
														"types": [
															{
																"type": "typeParameter",
																"name": "InnerValueT"
															},
															{
																"type": "intrinsic",
																"name": "null"
															}
														]
													},
													{
														"type": "typeParameter",
														"name": "ResultValueT"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "ISeries",
										"id": 2287,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "number"
											},
											{
												"type": "typeParameter",
												"name": "ResultValueT"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "ISeries.joinOuterLeft",
										"id": 2534
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/series.ts",
									"line": 726,
									"character": 17
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "ISeries.joinOuterLeft",
								"id": 2534
							}
						},
						{
							"id": 2840,
							"name": "joinOuterRight",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 2841,
									"name": "joinOuterRight",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Performs a right outer join on two series. Correlates the elements based on matching keys.\nIncludes right elements that have no correlation.",
										"returns": "Returns the joined series or dataframe.\n"
									},
									"typeParameter": [
										{
											"id": 2842,
											"name": "KeyT",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										},
										{
											"id": 2843,
											"name": "InnerIndexT",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										},
										{
											"id": 2844,
											"name": "InnerValueT",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										},
										{
											"id": 2845,
											"name": "ResultValueT",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										}
									],
									"parameters": [
										{
											"id": 2846,
											"name": "inner",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The inner Series or DataFrame to join."
											},
											"type": {
												"type": "reference",
												"name": "ISeries",
												"id": 2287,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "InnerIndexT"
													},
													{
														"type": "typeParameter",
														"name": "InnerValueT"
													}
												]
											}
										},
										{
											"id": 2847,
											"name": "outerKeySelector",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Selector that chooses the join key from the outer sequence."
											},
											"type": {
												"type": "reference",
												"name": "SelectorFn",
												"id": 3625,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "ValueT"
													},
													{
														"type": "typeParameter",
														"name": "KeyT"
													}
												]
											}
										},
										{
											"id": 2848,
											"name": "innerKeySelector",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Selector that chooses the join key from the inner sequence."
											},
											"type": {
												"type": "reference",
												"name": "SelectorFn",
												"id": 3625,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "InnerValueT"
													},
													{
														"type": "typeParameter",
														"name": "KeyT"
													}
												]
											}
										},
										{
											"id": 2849,
											"name": "resultSelector",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Selector that defines how to merge outer and inner values.\n\nImplementation from here:\n\n\thttp://blogs.geniuscode.net/RyanDHatch/?p=116\n"
											},
											"type": {
												"type": "reference",
												"name": "JoinFn",
												"id": 3631,
												"typeArguments": [
													{
														"type": "union",
														"types": [
															{
																"type": "typeParameter",
																"name": "ValueT"
															},
															{
																"type": "intrinsic",
																"name": "null"
															}
														]
													},
													{
														"type": "union",
														"types": [
															{
																"type": "typeParameter",
																"name": "InnerValueT"
															},
															{
																"type": "intrinsic",
																"name": "null"
															}
														]
													},
													{
														"type": "typeParameter",
														"name": "ResultValueT"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "ISeries",
										"id": 2287,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "number"
											},
											{
												"type": "typeParameter",
												"name": "ResultValueT"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "ISeries.joinOuterRight",
										"id": 2544
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/series.ts",
									"line": 749,
									"character": 18
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "ISeries.joinOuterRight",
								"id": 2544
							}
						},
						{
							"id": 2663,
							"name": "last",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 2664,
									"name": "last",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Get the last value of the series.",
										"returns": "Returns the last value of the series.\n"
									},
									"type": {
										"type": "typeParameter",
										"name": "ValueT"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "ISeries.last",
										"id": 2367
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/series.ts",
									"line": 328,
									"character": 8
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "ISeries.last",
								"id": 2367
							}
						},
						{
							"id": 2731,
							"name": "max",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 2732,
									"name": "max",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Get the max value in the series.",
										"returns": "Returns the maximum of the number values in the series.\n"
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "ISeries.max",
										"id": 2435
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/series.ts",
									"line": 549,
									"character": 7
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "ISeries.max",
								"id": 2435
							}
						},
						{
							"id": 2727,
							"name": "median",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 2728,
									"name": "median",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Get the median value in the series. Not this sorts the series, so can be expensive.",
										"returns": "Returns the median of the values in the series.\n"
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "ISeries.median",
										"id": 2431
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/series.ts",
									"line": 535,
									"character": 10
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "ISeries.median",
								"id": 2431
							}
						},
						{
							"id": 2729,
							"name": "min",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 2730,
									"name": "min",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Get the min value in the series.",
										"returns": "Returns the minimum of the number values in the series.\n"
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "ISeries.min",
										"id": 2433
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/series.ts",
									"line": 542,
									"character": 7
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "ISeries.min",
								"id": 2433
							}
						},
						{
							"id": 2686,
							"name": "none",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 2687,
									"name": "none",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Determine if the predicate returns truthy for none of the values in the series.\nReturns true for an empty series.\nReturns true if the predicate always returns falsy.\nOtherwise returns false.\nIf no predicate is specified the value itself is checked.",
										"returns": "Returns true if the predicate has returned truthy for no values in the series, otherwise returns false.\n"
									},
									"parameters": [
										{
											"id": 2688,
											"name": "predicate",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "reference",
												"name": "PredicateFn",
												"id": 3639,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "ValueT"
													}
												]
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "ISeries.none",
										"id": 2390
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/series.ts",
									"line": 412,
									"character": 8
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "ISeries.none",
								"id": 2390
							}
						},
						{
							"id": 2781,
							"name": "orderBy",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 2782,
									"name": "orderBy",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Sorts the series by a value defined by the selector (ascending).",
										"returns": "Returns a new ordered series that has been sorted by the value returned by the selector.\n"
									},
									"typeParameter": [
										{
											"id": 2783,
											"name": "SortT",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										}
									],
									"parameters": [
										{
											"id": 2784,
											"name": "selector",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Selects the value to sort by.\n"
											},
											"type": {
												"type": "reference",
												"name": "SelectorWithIndexFn",
												"id": 3569,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "ValueT"
													},
													{
														"type": "typeParameter",
														"name": "SortT"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "IOrderedSeries",
										"id": 2574,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "IndexT"
											},
											{
												"type": "typeParameter",
												"name": "ValueT"
											},
											{
												"type": "typeParameter",
												"name": "SortT"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "ISeries.orderBy",
										"id": 2485
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/series.ts",
									"line": 615,
									"character": 11
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "ISeries.orderBy",
								"id": 2485
							}
						},
						{
							"id": 2785,
							"name": "orderByDescending",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 2786,
									"name": "orderByDescending",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Sorts the series by a value defined by the selector (descending).",
										"returns": "Returns a new ordered series that has been sorted by the value returned by the selector.\n"
									},
									"typeParameter": [
										{
											"id": 2787,
											"name": "SortT",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										}
									],
									"parameters": [
										{
											"id": 2788,
											"name": "selector",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Selects the value to sort by.\n"
											},
											"type": {
												"type": "reference",
												"name": "SelectorWithIndexFn",
												"id": 3569,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "ValueT"
													},
													{
														"type": "typeParameter",
														"name": "SortT"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "IOrderedSeries",
										"id": 2574,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "IndexT"
											},
											{
												"type": "typeParameter",
												"name": "ValueT"
											},
											{
												"type": "typeParameter",
												"name": "SortT"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "ISeries.orderByDescending",
										"id": 2489
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/series.ts",
									"line": 624,
									"character": 21
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "ISeries.orderByDescending",
								"id": 2489
							}
						},
						{
							"id": 2711,
							"name": "parseDates",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 2712,
									"name": "parseDates",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Parse a series with string values to a series with date values.",
										"returns": "Returns a new series where string values from the original series have been parsed to Date values.\n"
									},
									"parameters": [
										{
											"id": 2713,
											"name": "formatString",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "undefined"
													},
													{
														"type": "intrinsic",
														"name": "string"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "ISeries",
										"id": 2287,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "IndexT"
											},
											{
												"type": "reference",
												"name": "Date"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "ISeries.parseDates",
										"id": 2415
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/series.ts",
									"line": 489,
									"character": 14
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "ISeries.parseDates",
								"id": 2415
							}
						},
						{
							"id": 2709,
							"name": "parseFloats",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 2710,
									"name": "parseFloats",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Parse a series with string values to a series with float values.",
										"returns": "Returns a new series where string values from the original series have been parsed to floating-point values.\n"
									},
									"type": {
										"type": "reference",
										"name": "ISeries",
										"id": 2287,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "IndexT"
											},
											{
												"type": "intrinsic",
												"name": "number"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "ISeries.parseFloats",
										"id": 2413
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/series.ts",
									"line": 480,
									"character": 15
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "ISeries.parseFloats",
								"id": 2413
							}
						},
						{
							"id": 2707,
							"name": "parseInts",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 2708,
									"name": "parseInts",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Parse a series with string values to a series with int values.",
										"returns": "Returns a new series where string values from the original series have been parsed to integer values.\n"
									},
									"type": {
										"type": "reference",
										"name": "ISeries",
										"id": 2287,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "IndexT"
											},
											{
												"type": "intrinsic",
												"name": "number"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "ISeries.parseInts",
										"id": 2411
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/series.ts",
									"line": 473,
									"character": 13
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "ISeries.parseInts",
								"id": 2411
							}
						},
						{
							"id": 2639,
							"name": "percentChange",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 2640,
									"name": "percentChange",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Compute the percent change between each pair of values.\nPercentages are expressed as 0-1 values.",
										"returns": "Returns a new series where each value indicates the percent change from the previous number value in the original series.\n"
									},
									"type": {
										"type": "reference",
										"name": "ISeries",
										"id": 2287,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "IndexT"
											},
											{
												"type": "intrinsic",
												"name": "number"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "ISeries.percentChange",
										"id": 2343
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/series.ts",
									"line": 254,
									"character": 17
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "ISeries.percentChange",
								"id": 2343
							}
						},
						{
							"id": 2594,
							"name": "resetIndex",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 2595,
									"name": "resetIndex",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Resets the index of the series back to the default zero-based sequential integer index.",
										"returns": "Returns a new series with the index reset to the default zero-based index.\n"
									},
									"type": {
										"type": "reference",
										"name": "ISeries",
										"id": 2287,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "number"
											},
											{
												"type": "typeParameter",
												"name": "ValueT"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "ISeries.resetIndex",
										"id": 2298
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/series.ts",
									"line": 155,
									"character": 14
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "ISeries.resetIndex",
								"id": 2298
							}
						},
						{
							"id": 2733,
							"name": "reverse",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 2734,
									"name": "reverse",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Reverse the series.",
										"returns": "Returns a new series that is the reverse of the input.\n"
									},
									"type": {
										"type": "reference",
										"name": "ISeries",
										"id": 2287,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "IndexT"
											},
											{
												"type": "typeParameter",
												"name": "ValueT"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "ISeries.reverse",
										"id": 2437
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/series.ts",
									"line": 556,
									"character": 11
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "ISeries.reverse",
								"id": 2437
							}
						},
						{
							"id": 2624,
							"name": "rollingWindow",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 2625,
									"name": "rollingWindow",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Segment a Series into 'rolling windows'. Returns a new Series. Each value in the new Series contains a 'window' (or segment) of the original series.",
										"returns": "Returns a new series, each value of which is a 'window' (or segment) of the original series.\n"
									},
									"parameters": [
										{
											"id": 2626,
											"name": "period",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The number of values in the window.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "ISeries",
										"id": 2287,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "number"
											},
											{
												"type": "reference",
												"name": "ISeries",
												"id": 2287,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "IndexT"
													},
													{
														"type": "typeParameter",
														"name": "ValueT"
													}
												]
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "ISeries.rollingWindow",
										"id": 2328
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/series.ts",
									"line": 218,
									"character": 17
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "ISeries.rollingWindow",
								"id": 2328
							}
						},
						{
							"id": 2613,
							"name": "select",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 2614,
									"name": "select",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Generate a new series based by calling the selector function on each value.",
										"returns": "Returns a new series that has been transformed by the selector function.\n"
									},
									"typeParameter": [
										{
											"id": 2615,
											"name": "ToT",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										}
									],
									"parameters": [
										{
											"id": 2616,
											"name": "selector",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Selector function that transforms each value to create a new series or dataframe.\n"
											},
											"type": {
												"type": "reference",
												"name": "SelectorWithIndexFn",
												"id": 3569,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "ValueT"
													},
													{
														"type": "typeParameter",
														"name": "ToT"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "ISeries",
										"id": 2287,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "IndexT"
											},
											{
												"type": "typeParameter",
												"name": "ToT"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "ISeries.select",
										"id": 2317
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/series.ts",
									"line": 190,
									"character": 10
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "ISeries.select",
								"id": 2317
							}
						},
						{
							"id": 2617,
							"name": "selectMany",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 2618,
									"name": "selectMany",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Generate a new series based on the results of the selector function.",
										"returns": "Returns a new series with values that have been produced by the selector function.\n"
									},
									"typeParameter": [
										{
											"id": 2619,
											"name": "ToT",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										}
									],
									"parameters": [
										{
											"id": 2620,
											"name": "selector",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Selector function that transforms each value into a list of values.\n"
											},
											"type": {
												"type": "reference",
												"name": "SelectorWithIndexFn",
												"id": 3569,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "ValueT"
													},
													{
														"type": "reference",
														"name": "Iterable",
														"typeArguments": [
															{
																"type": "typeParameter",
																"name": "ToT"
															}
														]
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "ISeries",
										"id": 2287,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "IndexT"
											},
											{
												"type": "typeParameter",
												"name": "ToT"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "ISeries.selectMany",
										"id": 2321
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/series.ts",
									"line": 199,
									"character": 14
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "ISeries.selectMany",
								"id": 2321
							}
						},
						{
							"id": 2630,
							"name": "sequentialDistinct",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 2631,
									"name": "sequentialDistinct",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Group sequential duplicate values into a Series of windows.",
										"returns": "Returns a series of groups. Each group is itself a series.\n"
									},
									"typeParameter": [
										{
											"id": 2632,
											"name": "ToT",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										}
									],
									"parameters": [
										{
											"id": 2633,
											"name": "selector",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Selects the value used to compare for duplicates.\n"
											},
											"type": {
												"type": "reference",
												"name": "SelectorFn",
												"id": 3625,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "ValueT"
													},
													{
														"type": "typeParameter",
														"name": "ToT"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "ISeries",
										"id": 2287,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "IndexT"
											},
											{
												"type": "typeParameter",
												"name": "ValueT"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "ISeries.sequentialDistinct",
										"id": 2334
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/series.ts",
									"line": 236,
									"character": 22
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "ISeries.sequentialDistinct",
								"id": 2334
							}
						},
						{
							"id": 2641,
							"name": "skip",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 2642,
									"name": "skip",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Skip a number of values in the series.",
										"returns": "Returns a new series with the specified number of values skipped.\n"
									},
									"parameters": [
										{
											"id": 2643,
											"name": "numValues",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Number of values to skip."
											},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "ISeries",
										"id": 2287,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "IndexT"
											},
											{
												"type": "typeParameter",
												"name": "ValueT"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "ISeries.skip",
										"id": 2345
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/series.ts",
									"line": 262,
									"character": 8
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "ISeries.skip",
								"id": 2345
							}
						},
						{
							"id": 2647,
							"name": "skipUntil",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 2648,
									"name": "skipUntil",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Skips values in the series until a condition is met.",
										"returns": "Returns a new series with all initial sequential values removed that don't match the predicate.\n"
									},
									"parameters": [
										{
											"id": 2649,
											"name": "predicate",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Return true to indicate the condition met.\n"
											},
											"type": {
												"type": "reference",
												"name": "PredicateFn",
												"id": 3639,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "ValueT"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "ISeries",
										"id": 2287,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "IndexT"
											},
											{
												"type": "typeParameter",
												"name": "ValueT"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "ISeries.skipUntil",
										"id": 2351
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/series.ts",
									"line": 280,
									"character": 13
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "ISeries.skipUntil",
								"id": 2351
							}
						},
						{
							"id": 2644,
							"name": "skipWhile",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 2645,
									"name": "skipWhile",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Skips values in the series while a condition is met.",
										"returns": "Returns a new series with all initial sequential values removed that match the predicate.\n"
									},
									"parameters": [
										{
											"id": 2646,
											"name": "predicate",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Return true to indicate the condition met.\n"
											},
											"type": {
												"type": "reference",
												"name": "PredicateFn",
												"id": 3639,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "ValueT"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "ISeries",
										"id": 2287,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "IndexT"
											},
											{
												"type": "typeParameter",
												"name": "ValueT"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "ISeries.skipWhile",
										"id": 2348
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/series.ts",
									"line": 271,
									"character": 13
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "ISeries.skipWhile",
								"id": 2348
							}
						},
						{
							"id": 2689,
							"name": "startAt",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 2690,
									"name": "startAt",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Get a new series containing all values starting at and after the specified index value.",
										"returns": "Returns a new series containing all values starting at and after the specified index value.\n"
									},
									"parameters": [
										{
											"id": 2691,
											"name": "indexValue",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The index value to search for before starting the new series.\n"
											},
											"type": {
												"type": "typeParameter",
												"name": "IndexT"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "ISeries",
										"id": 2287,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "IndexT"
											},
											{
												"type": "typeParameter",
												"name": "ValueT"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "ISeries.startAt",
										"id": 2393
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/series.ts",
									"line": 421,
									"character": 11
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "ISeries.startAt",
								"id": 2393
							}
						},
						{
							"id": 2723,
							"name": "sum",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 2724,
									"name": "sum",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Sum the values in a series.",
										"returns": "Returns the sum of the number values in the series.\n"
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "ISeries.sum",
										"id": 2427
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/series.ts",
									"line": 521,
									"character": 7
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "ISeries.sum",
								"id": 2427
							}
						},
						{
							"id": 2671,
							"name": "tail",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 2672,
									"name": "tail",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Get X values from the end of the series.",
										"returns": "Returns a new series that has only the specified number of values taken from the end of the input sequence.\n"
									},
									"parameters": [
										{
											"id": 2673,
											"name": "numValues",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Number of values to take.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "ISeries",
										"id": 2287,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "IndexT"
											},
											{
												"type": "typeParameter",
												"name": "ValueT"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "ISeries.tail",
										"id": 2375
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/series.ts",
									"line": 355,
									"character": 8
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "ISeries.tail",
								"id": 2375
							}
						},
						{
							"id": 2650,
							"name": "take",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 2651,
									"name": "take",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Take a number of rows in the series.",
										"returns": "Returns a new series with up to the specified number of values included.\n"
									},
									"parameters": [
										{
											"id": 2652,
											"name": "numRows",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Number of rows to take.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "ISeries",
										"id": 2287,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "IndexT"
											},
											{
												"type": "typeParameter",
												"name": "ValueT"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "ISeries.take",
										"id": 2354
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/series.ts",
									"line": 289,
									"character": 8
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "ISeries.take",
								"id": 2354
							}
						},
						{
							"id": 2656,
							"name": "takeUntil",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 2657,
									"name": "takeUntil",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Take values from the series until a condition is met.",
										"returns": "Returns a new series or dataframe that only includes the initial sequential values that have not matched the predicate.\n"
									},
									"parameters": [
										{
											"id": 2658,
											"name": "predicate",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Return true to indicate the condition met.\n"
											},
											"type": {
												"type": "reference",
												"name": "PredicateFn",
												"id": 3639,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "ValueT"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "ISeries",
										"id": 2287,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "IndexT"
											},
											{
												"type": "typeParameter",
												"name": "ValueT"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "ISeries.takeUntil",
										"id": 2360
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/series.ts",
									"line": 307,
									"character": 13
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "ISeries.takeUntil",
								"id": 2360
							}
						},
						{
							"id": 2653,
							"name": "takeWhile",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 2654,
									"name": "takeWhile",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Take values from the series while a condition is met.",
										"returns": "Returns a new series that only includes the initial sequential values that have matched the predicate.\n"
									},
									"parameters": [
										{
											"id": 2655,
											"name": "predicate",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Return true to indicate the condition met.\n"
											},
											"type": {
												"type": "reference",
												"name": "PredicateFn",
												"id": 3639,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "ValueT"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "ISeries",
										"id": 2287,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "IndexT"
											},
											{
												"type": "typeParameter",
												"name": "ValueT"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "ISeries.takeWhile",
										"id": 2357
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/series.ts",
									"line": 298,
									"character": 13
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "ISeries.takeWhile",
								"id": 2357
							}
						},
						{
							"id": 2578,
							"name": "thenBy",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 2579,
									"name": "thenBy",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Performs additional sorting (ascending).",
										"returns": "Returns a new series has been additionally sorted by the value returned by the selector.\n"
									},
									"typeParameter": [
										{
											"id": 2580,
											"name": "SortT",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										}
									],
									"parameters": [
										{
											"id": 2581,
											"name": "selector",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Selects the value to sort by.\n"
											},
											"type": {
												"type": "reference",
												"name": "SelectorWithIndexFn",
												"id": 3569,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "ValueT"
													},
													{
														"type": "typeParameter",
														"name": "SortT"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "IOrderedSeries",
										"id": 2574,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "IndexT"
											},
											{
												"type": "typeParameter",
												"name": "ValueT"
											},
											{
												"type": "typeParameter",
												"name": "SortT"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/series.ts",
									"line": 829,
									"character": 10
								}
							]
						},
						{
							"id": 2582,
							"name": "thenByDescending",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 2583,
									"name": "thenByDescending",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Performs additional sorting (descending).",
										"returns": "Returns a new series has been additionally sorted by the value returned by the selector.\n"
									},
									"typeParameter": [
										{
											"id": 2584,
											"name": "SortT",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										}
									],
									"parameters": [
										{
											"id": 2585,
											"name": "selector",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Selects the value to sort by.\n"
											},
											"type": {
												"type": "reference",
												"name": "SelectorWithIndexFn",
												"id": 3569,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "ValueT"
													},
													{
														"type": "typeParameter",
														"name": "SortT"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "IOrderedSeries",
										"id": 2574,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "IndexT"
											},
											{
												"type": "typeParameter",
												"name": "ValueT"
											},
											{
												"type": "typeParameter",
												"name": "SortT"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/series.ts",
									"line": 838,
									"character": 20
								}
							]
						},
						{
							"id": 2596,
							"name": "toArray",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 2597,
									"name": "toArray",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Extract values from the series as an array.\nThis forces lazy evaluation to complete.",
										"returns": "Returns an array of values contained within the series.\n"
									},
									"type": {
										"type": "array",
										"elementType": {
											"type": "typeParameter",
											"name": "ValueT"
										}
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "ISeries.toArray",
										"id": 2300
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/series.ts",
									"line": 163,
									"character": 11
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "ISeries.toArray",
								"id": 2300
							}
						},
						{
							"id": 2600,
							"name": "toObject",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 2601,
									"name": "toObject",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Convert the series to a JavaScript object.",
										"returns": "Returns a JavaScript object generated from the input sequence by the key and value selector funtions.\n"
									},
									"typeParameter": [
										{
											"id": 2602,
											"name": "KeyT",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										},
										{
											"id": 2603,
											"name": "FieldT",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										},
										{
											"id": 2604,
											"name": "OutT",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										}
									],
									"parameters": [
										{
											"id": 2605,
											"name": "keySelector",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Function that selects keys for the resulting object."
											},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 2606,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"signatures": [
														{
															"id": 2607,
															"name": "__call",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {},
															"parameters": [
																{
																	"id": 2608,
																	"name": "value",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {},
																	"type": {
																		"type": "typeParameter",
																		"name": "ValueT"
																	}
																}
															],
															"type": {
																"type": "typeParameter",
																"name": "KeyT"
															}
														}
													],
													"sources": [
														{
															"fileName": "lib/series.ts",
															"line": 181,
															"character": 64
														}
													]
												}
											}
										},
										{
											"id": 2609,
											"name": "valueSelector",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Function that selects values for the resulting object.\n"
											},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 2610,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"signatures": [
														{
															"id": 2611,
															"name": "__call",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {},
															"parameters": [
																{
																	"id": 2612,
																	"name": "value",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {},
																	"type": {
																		"type": "typeParameter",
																		"name": "ValueT"
																	}
																}
															],
															"type": {
																"type": "typeParameter",
																"name": "FieldT"
															}
														}
													],
													"sources": [
														{
															"fileName": "lib/series.ts",
															"line": 181,
															"character": 104
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "typeParameter",
										"name": "OutT"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "ISeries.toObject",
										"id": 2304
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/series.ts",
									"line": 181,
									"character": 12
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "ISeries.toObject",
								"id": 2304
							}
						},
						{
							"id": 2598,
							"name": "toPairs",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 2599,
									"name": "toPairs",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Retreive the index and values from the Series as an array of pairs.\nEach pairs is [index, value].",
										"returns": "Returns an array of pairs that contains the series content. Each pair is a two element array that contains an index and a value.\n"
									},
									"type": {
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "Object"
										}
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "ISeries.toPairs",
										"id": 2302
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/series.ts",
									"line": 171,
									"character": 11
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "ISeries.toPairs",
								"id": 2302
							}
						},
						{
							"id": 2705,
							"name": "toString",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 2706,
									"name": "toString",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Format the series for display as a string.\nThis forces lazy evaluation to complete.",
										"returns": "Generates and returns a string representation of the series or dataframe.\n"
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "ISeries.toString",
										"id": 2409
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/series.ts",
									"line": 466,
									"character": 12
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "ISeries.toString",
								"id": 2409
							}
						},
						{
							"id": 2714,
							"name": "toStrings",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 2715,
									"name": "toStrings",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Convert a series of values of different types to a series of string values.",
										"returns": "Returns a new series where the values from the original series have been stringified.\n"
									},
									"parameters": [
										{
											"id": 2716,
											"name": "formatString",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "undefined"
													},
													{
														"type": "intrinsic",
														"name": "string"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "ISeries",
										"id": 2287,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "IndexT"
											},
											{
												"type": "intrinsic",
												"name": "string"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "ISeries.toStrings",
										"id": 2418
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/series.ts",
									"line": 498,
									"character": 13
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "ISeries.toStrings",
								"id": 2418
							}
						},
						{
							"id": 2850,
							"name": "truncateStrings",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 2851,
									"name": "truncateStrings",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Produces a new series with all string values truncated to the requested maximum length.",
										"returns": "Returns a new series with strings that are truncated to the specified maximum length.\n"
									},
									"parameters": [
										{
											"id": 2852,
											"name": "maxLength",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The maximum length of the string values after truncation.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "ISeries",
										"id": 2287,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "IndexT"
											},
											{
												"type": "typeParameter",
												"name": "ValueT"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "ISeries.truncateStrings",
										"id": 2554
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/series.ts",
									"line": 763,
									"character": 19
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "ISeries.truncateStrings",
								"id": 2554
							}
						},
						{
							"id": 2789,
							"name": "union",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 2790,
									"name": "union",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Returns the unique union of values between two series.",
										"returns": "Returns the union of two series.\n"
									},
									"typeParameter": [
										{
											"id": 2791,
											"name": "KeyT",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										}
									],
									"parameters": [
										{
											"id": 2792,
											"name": "other",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The other Series or DataFrame to combine."
											},
											"type": {
												"type": "reference",
												"name": "ISeries",
												"id": 2287,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "IndexT"
													},
													{
														"type": "typeParameter",
														"name": "ValueT"
													}
												]
											}
										},
										{
											"id": 2793,
											"name": "selector",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "reference",
												"name": "SelectorFn",
												"id": 3625,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "ValueT"
													},
													{
														"type": "typeParameter",
														"name": "KeyT"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "ISeries",
										"id": 2287,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "IndexT"
											},
											{
												"type": "typeParameter",
												"name": "ValueT"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "ISeries.union",
										"id": 2493
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/series.ts",
									"line": 634,
									"character": 9
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "ISeries.union",
								"id": 2493
							}
						},
						{
							"id": 2627,
							"name": "variableWindow",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 2628,
									"name": "variableWindow",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Groups sequential values into variable length 'windows'.",
										"returns": "Returns a series of groups. Each group is itself a series that contains the values in the 'window'.\n"
									},
									"parameters": [
										{
											"id": 2629,
											"name": "comparer",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Predicate that compares two values and returns true if they should be in the same window.\n"
											},
											"type": {
												"type": "reference",
												"name": "ComparerFn",
												"id": 3651,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "ValueT"
													},
													{
														"type": "typeParameter",
														"name": "ValueT"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "ISeries",
										"id": 2287,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "number"
											},
											{
												"type": "reference",
												"name": "ISeries",
												"id": 2287,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "IndexT"
													},
													{
														"type": "typeParameter",
														"name": "ValueT"
													}
												]
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "ISeries.variableWindow",
										"id": 2331
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/series.ts",
									"line": 227,
									"character": 18
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "ISeries.variableWindow",
								"id": 2331
							}
						},
						{
							"id": 2674,
							"name": "where",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 2675,
									"name": "where",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Filter a series by a predicate selector.",
										"returns": "Returns a new series containing only the values that match the predicate.\n"
									},
									"parameters": [
										{
											"id": 2676,
											"name": "predicate",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Predicte function to filter rows of the series.\n"
											},
											"type": {
												"type": "reference",
												"name": "PredicateFn",
												"id": 3639,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "ValueT"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "ISeries",
										"id": 2287,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "IndexT"
											},
											{
												"type": "typeParameter",
												"name": "ValueT"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "ISeries.where",
										"id": 2378
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/series.ts",
									"line": 364,
									"character": 9
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "ISeries.where",
								"id": 2378
							}
						},
						{
							"id": 2621,
							"name": "window",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 2622,
									"name": "window",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Segment a Series into 'windows'. Returns a new Series. Each value in the new Series contains a 'window' (or segment) of the original series.\nUse select or selectPairs to aggregate.",
										"returns": "Returns a new series, each value of which is a 'window' (or segment) of the original series.\n"
									},
									"parameters": [
										{
											"id": 2623,
											"name": "period",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The number of values in the window.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "ISeries",
										"id": 2287,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "number"
											},
											{
												"type": "reference",
												"name": "ISeries",
												"id": 2287,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "IndexT"
													},
													{
														"type": "typeParameter",
														"name": "ValueT"
													}
												]
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "ISeries.window",
										"id": 2325
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/series.ts",
									"line": 209,
									"character": 10
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "ISeries.window",
								"id": 2325
							}
						},
						{
							"id": 2590,
							"name": "withIndex",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 2591,
									"name": "withIndex",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Apply a new index to the series.",
										"returns": "Returns a new series with the specified index attached.\n"
									},
									"typeParameter": [
										{
											"id": 2592,
											"name": "NewIndexT",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										}
									],
									"parameters": [
										{
											"id": 2593,
											"name": "newIndex",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The new array or iterable to apply to the dataframe. Can also be a selector to choose the index for each row in the dataframe.\n"
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "reference",
														"name": "Iterable",
														"typeArguments": [
															{
																"type": "typeParameter",
																"name": "NewIndexT"
															}
														]
													},
													{
														"type": "reference",
														"name": "SelectorFn",
														"id": 3625,
														"typeArguments": [
															{
																"type": "typeParameter",
																"name": "ValueT"
															},
															{
																"type": "typeParameter",
																"name": "NewIndexT"
															}
														]
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "ISeries",
										"id": 2287,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "NewIndexT"
											},
											{
												"type": "typeParameter",
												"name": "ValueT"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "ISeries.withIndex",
										"id": 2294
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/series.ts",
									"line": 148,
									"character": 13
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "ISeries.withIndex",
								"id": 2294
							}
						},
						{
							"id": 2750,
							"name": "zip",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 2751,
									"name": "zip",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Zip together multiple series to create a new series.\nPreserves the index of the first series.",
										"returns": "Returns a single series concatenated from multiple input series.\n"
									},
									"typeParameter": [
										{
											"id": 2752,
											"name": "Index2T",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										},
										{
											"id": 2753,
											"name": "Value2T",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										},
										{
											"id": 2754,
											"name": "ResultT",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										}
									],
									"parameters": [
										{
											"id": 2755,
											"name": "s2",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "ISeries",
												"id": 2287,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "Index2T"
													},
													{
														"type": "typeParameter",
														"name": "Value2T"
													}
												]
											}
										},
										{
											"id": 2756,
											"name": "zipper",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Zipper function that produces a new series based on the input series.\n"
											},
											"type": {
												"type": "reference",
												"name": "Zip2Fn",
												"id": 3582,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "ValueT"
													},
													{
														"type": "typeParameter",
														"name": "Value2T"
													},
													{
														"type": "typeParameter",
														"name": "ResultT"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "ISeries",
										"id": 2287,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "IndexT"
											},
											{
												"type": "typeParameter",
												"name": "ResultT"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "ISeries.zip",
										"id": 2454
									}
								},
								{
									"id": 2757,
									"name": "zip",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"typeParameter": [
										{
											"id": 2758,
											"name": "Index2T",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										},
										{
											"id": 2759,
											"name": "Value2T",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										},
										{
											"id": 2760,
											"name": "Index3T",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										},
										{
											"id": 2761,
											"name": "Value3T",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										},
										{
											"id": 2762,
											"name": "ResultT",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										}
									],
									"parameters": [
										{
											"id": 2763,
											"name": "s2",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "ISeries",
												"id": 2287,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "Index2T"
													},
													{
														"type": "typeParameter",
														"name": "Value2T"
													}
												]
											}
										},
										{
											"id": 2764,
											"name": "s3",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "ISeries",
												"id": 2287,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "Index3T"
													},
													{
														"type": "typeParameter",
														"name": "Value3T"
													}
												]
											}
										},
										{
											"id": 2765,
											"name": "zipper",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Zip3Fn",
												"id": 3590,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "ValueT"
													},
													{
														"type": "typeParameter",
														"name": "Value2T"
													},
													{
														"type": "typeParameter",
														"name": "Value3T"
													},
													{
														"type": "typeParameter",
														"name": "ResultT"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "ISeries",
										"id": 2287,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "IndexT"
											},
											{
												"type": "typeParameter",
												"name": "ResultT"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "ISeries.zip",
										"id": 2454
									}
								},
								{
									"id": 2766,
									"name": "zip",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"typeParameter": [
										{
											"id": 2767,
											"name": "Index2T",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										},
										{
											"id": 2768,
											"name": "Value2T",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										},
										{
											"id": 2769,
											"name": "Index3T",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										},
										{
											"id": 2770,
											"name": "Value3T",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										},
										{
											"id": 2771,
											"name": "Index4T",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										},
										{
											"id": 2772,
											"name": "Value4T",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										},
										{
											"id": 2773,
											"name": "ResultT",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										}
									],
									"parameters": [
										{
											"id": 2774,
											"name": "s2",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "ISeries",
												"id": 2287,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "Index2T"
													},
													{
														"type": "typeParameter",
														"name": "Value2T"
													}
												]
											}
										},
										{
											"id": 2775,
											"name": "s3",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "ISeries",
												"id": 2287,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "Index3T"
													},
													{
														"type": "typeParameter",
														"name": "Value3T"
													}
												]
											}
										},
										{
											"id": 2776,
											"name": "s4",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "ISeries",
												"id": 2287,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "Index4T"
													},
													{
														"type": "typeParameter",
														"name": "Value4T"
													}
												]
											}
										},
										{
											"id": 2777,
											"name": "zipper",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Zip3Fn",
												"id": 3590,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "ValueT"
													},
													{
														"type": "typeParameter",
														"name": "Value2T"
													},
													{
														"type": "typeParameter",
														"name": "Value3T"
													},
													{
														"type": "typeParameter",
														"name": "ResultT"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "ISeries",
										"id": 2287,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "IndexT"
											},
											{
												"type": "typeParameter",
												"name": "ResultT"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "ISeries.zip",
										"id": 2454
									}
								},
								{
									"id": 2778,
									"name": "zip",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"typeParameter": [
										{
											"id": 2779,
											"name": "ResultT",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										}
									],
									"parameters": [
										{
											"id": 2780,
											"name": "args",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isRest": true
											},
											"type": {
												"type": "array",
												"elementType": {
													"type": "intrinsic",
													"name": "any"
												}
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "ISeries",
										"id": 2287,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "IndexT"
											},
											{
												"type": "typeParameter",
												"name": "ResultT"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "ISeries.zip",
										"id": 2454
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/series.ts",
									"line": 603,
									"character": 6
								},
								{
									"fileName": "lib/series.ts",
									"line": 604,
									"character": 6
								},
								{
									"fileName": "lib/series.ts",
									"line": 605,
									"character": 6
								},
								{
									"fileName": "lib/series.ts",
									"line": 606,
									"character": 6
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "ISeries.zip",
								"id": 2454
							}
						}
					],
					"groups": [
						{
							"title": "Methods",
							"kind": 2048,
							"children": [
								2586,
								2698,
								2634,
								2680,
								2683,
								2856,
								2665,
								2725,
								2717,
								2695,
								2701,
								2747,
								2659,
								2863,
								2866,
								2868,
								2735,
								2692,
								2802,
								2859,
								2661,
								2677,
								2588,
								2739,
								2743,
								2668,
								2719,
								2853,
								2794,
								2810,
								2820,
								2830,
								2840,
								2663,
								2731,
								2727,
								2729,
								2686,
								2781,
								2785,
								2711,
								2709,
								2707,
								2639,
								2594,
								2733,
								2624,
								2613,
								2617,
								2630,
								2641,
								2647,
								2644,
								2689,
								2723,
								2671,
								2650,
								2656,
								2653,
								2578,
								2582,
								2596,
								2600,
								2598,
								2705,
								2714,
								2850,
								2789,
								2627,
								2674,
								2621,
								2590,
								2750
							]
						}
					],
					"sources": [
						{
							"fileName": "lib/series.ts",
							"line": 820,
							"character": 31
						}
					],
					"extendedTypes": [
						{
							"type": "reference",
							"name": "ISeries",
							"id": 2287,
							"typeArguments": [
								{
									"type": "typeParameter",
									"name": "IndexT"
								},
								{
									"type": "typeParameter",
									"name": "ValueT"
								}
							]
						}
					],
					"implementedBy": [
						{
							"type": "reference",
							"name": "OrderedSeries",
							"id": 3220
						}
					]
				},
				{
					"id": 2287,
					"name": "ISeries",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "Interface that represents a series containing a sequence of indexed values."
					},
					"typeParameter": [
						{
							"id": 2288,
							"name": "IndexT",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {}
						},
						{
							"id": 2289,
							"name": "ValueT",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {}
						}
					],
					"children": [
						{
							"id": 2290,
							"name": "__@iterator",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 2291,
									"name": "__@iterator",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Get an iterator to enumerate the values of the series."
									},
									"type": {
										"type": "reference",
										"name": "Iterator",
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "ValueT"
											}
										]
									},
									"overwrites": {
										"type": "reference",
										"name": "Iterable.[Symbol.iterator]"
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/series.ts",
									"line": 134,
									"character": 21
								}
							],
							"overwrites": {
								"type": "reference",
								"name": "Iterable.[Symbol.iterator]"
							}
						},
						{
							"id": 2402,
							"name": "after",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 2403,
									"name": "after",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Get a new series containing all values after the specified index value (exclusive).",
										"returns": "Returns a new series containing all values after the specified index value.\n"
									},
									"parameters": [
										{
											"id": 2404,
											"name": "indexValue",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The index value to search for.\n"
											},
											"type": {
												"type": "typeParameter",
												"name": "IndexT"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "ISeries",
										"id": 2287,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "IndexT"
											},
											{
												"type": "typeParameter",
												"name": "ValueT"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/series.ts",
									"line": 448,
									"character": 9
								}
							]
						},
						{
							"id": 2338,
							"name": "aggregate",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 2339,
									"name": "aggregate",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Aggregate the values in the series.",
										"returns": "Returns a new value that has been aggregated from the input sequence by the 'selector' function.\n"
									},
									"typeParameter": [
										{
											"id": 2340,
											"name": "ToT",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										}
									],
									"parameters": [
										{
											"id": 2341,
											"name": "seedOrSelector",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "reference",
														"name": "AggregateFn",
														"id": 3644,
														"typeArguments": [
															{
																"type": "typeParameter",
																"name": "ValueT"
															},
															{
																"type": "typeParameter",
																"name": "ToT"
															}
														]
													},
													{
														"type": "typeParameter",
														"name": "ToT"
													}
												]
											}
										},
										{
											"id": 2342,
											"name": "selector",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"text": "Function that takes the seed and then each value in the series and produces the aggregate value.\n"
											},
											"type": {
												"type": "reference",
												"name": "AggregateFn",
												"id": 3644,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "ValueT"
													},
													{
														"type": "typeParameter",
														"name": "ToT"
													}
												]
											}
										}
									],
									"type": {
										"type": "typeParameter",
										"name": "ToT"
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/series.ts",
									"line": 246,
									"character": 13
								}
							]
						},
						{
							"id": 2384,
							"name": "all",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 2385,
									"name": "all",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Determine if the predicate returns truthy for all values in the series.\nReturns false as soon as the predicate evaluates to falsy.\nReturns true if the predicate returns truthy for all values in the series.\nReturns false if the series is empty.",
										"text": "TODO: Should predicate here by optional  as well same as in any and none?\n",
										"returns": "Returns true if the predicate has returned truthy for every value in the sequence, otherwise returns false.\n"
									},
									"parameters": [
										{
											"id": 2386,
											"name": "predicate",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Predicate function that receives each value in turn and returns truthy for a match, otherwise falsy.\n"
											},
											"type": {
												"type": "reference",
												"name": "PredicateFn",
												"id": 3639,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "ValueT"
													}
												]
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/series.ts",
									"line": 387,
									"character": 7
								}
							]
						},
						{
							"id": 2387,
							"name": "any",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 2388,
									"name": "any",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Determine if the predicate returns truthy for any of the values in the series.\nReturns true as soon as the predicate returns truthy.\nReturns false if the predicate never returns truthy.\nIf no predicate is specified the value itself is checked.",
										"returns": "Returns true if the predicate has returned truthy for any value in the sequence, otherwise returns false.\n"
									},
									"parameters": [
										{
											"id": 2389,
											"name": "predicate",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "reference",
												"name": "PredicateFn",
												"id": 3639,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "ValueT"
													}
												]
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/series.ts",
									"line": 399,
									"character": 7
								}
							]
						},
						{
							"id": 2560,
							"name": "appendPair",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 2561,
									"name": "appendPair",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Append a pair to the end of a Series.",
										"returns": "Returns a new series with the specified pair appended.\n"
									},
									"parameters": [
										{
											"id": 2562,
											"name": "pair",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The pair to append.\n"
											},
											"type": {
												"type": "tuple",
												"elements": [
													{
														"type": "typeParameter",
														"name": "IndexT"
													},
													{
														"type": "typeParameter",
														"name": "ValueT"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "ISeries",
										"id": 2287,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "IndexT"
											},
											{
												"type": "typeParameter",
												"name": "ValueT"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/series.ts",
									"line": 781,
									"character": 14
								}
							]
						},
						{
							"id": 2369,
							"name": "at",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 2370,
									"name": "at",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Get the value at a specified index.",
										"returns": "Returns the value from the specified index in the sequence or undefined if there is no such index in the series.\n"
									},
									"parameters": [
										{
											"id": 2371,
											"name": "index",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Index to for which to retreive the value.\n"
											},
											"type": {
												"type": "typeParameter",
												"name": "IndexT"
											}
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "typeParameter",
												"name": "ValueT"
											},
											{
												"type": "intrinsic",
												"name": "undefined"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/series.ts",
									"line": 337,
									"character": 6
								}
							]
						},
						{
							"id": 2429,
							"name": "average",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 2430,
									"name": "average",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Average the values in a series.",
										"returns": "Returns the average of the number values in the series.\n"
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/series.ts",
									"line": 528,
									"character": 11
								}
							]
						},
						{
							"id": 2421,
							"name": "bake",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 2422,
									"name": "bake",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Forces lazy evaluation to complete and 'bakes' the series into memory.",
										"returns": "Returns a series that has been 'baked', all lazy evaluation has completed.\n"
									},
									"type": {
										"type": "reference",
										"name": "ISeries",
										"id": 2287,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "IndexT"
											},
											{
												"type": "typeParameter",
												"name": "ValueT"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/series.ts",
									"line": 505,
									"character": 8
								}
							]
						},
						{
							"id": 2399,
							"name": "before",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 2400,
									"name": "before",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Get a new series containing all values up to the specified index value (exclusive).",
										"returns": "Returns a new series containing all values up to the specified inde value.\n"
									},
									"parameters": [
										{
											"id": 2401,
											"name": "indexValue",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The index value to search for before ending the new series.\n"
											},
											"type": {
												"type": "typeParameter",
												"name": "IndexT"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "ISeries",
										"id": 2287,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "IndexT"
											},
											{
												"type": "typeParameter",
												"name": "ValueT"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/series.ts",
									"line": 439,
									"character": 10
								}
							]
						},
						{
							"id": 2405,
							"name": "between",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 2406,
									"name": "between",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Get a new series containing all values between the specified index values (inclusive).",
										"returns": "Returns a new series containing all values between the specified index values (inclusive).\n"
									},
									"parameters": [
										{
											"id": 2407,
											"name": "startIndexValue",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The index where the new sequence starts."
											},
											"type": {
												"type": "typeParameter",
												"name": "IndexT"
											}
										},
										{
											"id": 2408,
											"name": "endIndexValue",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The index where the new sequence ends.\n"
											},
											"type": {
												"type": "typeParameter",
												"name": "IndexT"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "ISeries",
										"id": 2287,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "IndexT"
											},
											{
												"type": "typeParameter",
												"name": "ValueT"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/series.ts",
									"line": 458,
									"character": 11
								}
							]
						},
						{
							"id": 2451,
							"name": "concat",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 2452,
									"name": "concat",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Concatenate multiple other series onto this series.",
										"returns": "Returns a single series concatenated from multiple input series.\n"
									},
									"parameters": [
										{
											"id": 2453,
											"name": "series",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isRest": true
											},
											"comment": {
												"text": "Multiple arguments. Each can be either a series or an array of series.\n"
											},
											"type": {
												"type": "array",
												"elementType": {
													"type": "union",
													"types": [
														{
															"type": "reference",
															"name": "ISeries",
															"id": 2287,
															"typeArguments": [
																{
																	"type": "unknown",
																	"name": "IndexT"
																},
																{
																	"type": "unknown",
																	"name": "ValueT"
																}
															]
														},
														{
															"type": "array",
															"elementType": {
																"type": "reference",
																"name": "ISeries",
																"id": 2287,
																"typeArguments": [
																	{
																		"type": "unknown",
																		"name": "IndexT"
																	},
																	{
																		"type": "unknown",
																		"name": "ValueT"
																	}
																]
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "ISeries",
										"id": 2287,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "IndexT"
											},
											{
												"type": "typeParameter",
												"name": "ValueT"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/series.ts",
									"line": 592,
									"character": 10
								}
							]
						},
						{
							"id": 2363,
							"name": "count",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 2364,
									"name": "count",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Count the number of values in the series.",
										"returns": "Returns the count of all values in the series.\n"
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/series.ts",
									"line": 314,
									"character": 9
								}
							]
						},
						{
							"id": 2567,
							"name": "defaultIfEmpty",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 2568,
									"name": "defaultIfEmpty",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Returns the specified default sequence if the series is empty.",
										"returns": "Returns 'defaultSequence' if the series is empty.\n"
									},
									"parameters": [
										{
											"id": 2569,
											"name": "defaultSequence",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Default sequence to return if the series is empty.\n"
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "array",
														"elementType": {
															"type": "typeParameter",
															"name": "ValueT"
														}
													},
													{
														"type": "reference",
														"name": "ISeries",
														"id": 2287,
														"typeArguments": [
															{
																"type": "typeParameter",
																"name": "IndexT"
															},
															{
																"type": "typeParameter",
																"name": "ValueT"
															}
														]
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "ISeries",
										"id": 2287,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "IndexT"
											},
											{
												"type": "typeParameter",
												"name": "ValueT"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/series.ts",
									"line": 800,
									"character": 18
								}
							]
						},
						{
							"id": 2570,
							"name": "detectTypes",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 2571,
									"name": "detectTypes",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Detect the types of the values in the sequence.",
										"returns": "Returns a dataframe that describes the data types contained in the input series or dataframe.\n"
									},
									"type": {
										"type": "reference",
										"name": "IDataFrame",
										"id": 683,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "number"
											},
											{
												"type": "reference",
												"name": "ITypeFrequency",
												"id": 2281
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/series.ts",
									"line": 807,
									"character": 15
								}
							]
						},
						{
							"id": 2572,
							"name": "detectValues",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 2573,
									"name": "detectValues",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Detect the frequency of values in the sequence.",
										"returns": "Returns a dataframe that describes the values contained in the input sequence.\n"
									},
									"type": {
										"type": "reference",
										"name": "IDataFrame",
										"id": 683,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "number"
											},
											{
												"type": "reference",
												"name": "IValueFrequency",
												"id": 2284
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/series.ts",
									"line": 814,
									"character": 16
								}
							]
						},
						{
							"id": 2439,
							"name": "distinct",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 2440,
									"name": "distinct",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Returns only values in the series that have distinct values.",
										"returns": "Returns a series containing only unique values as determined by the 'selector' function.\n"
									},
									"typeParameter": [
										{
											"id": 2441,
											"name": "ToT",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										}
									],
									"parameters": [
										{
											"id": 2442,
											"name": "selector",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"text": "Selects the value used to compare for duplicates.\n"
											},
											"type": {
												"type": "reference",
												"name": "SelectorFn",
												"id": 3625,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "ValueT"
													},
													{
														"type": "typeParameter",
														"name": "ToT"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "ISeries",
										"id": 2287,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "IndexT"
											},
											{
												"type": "typeParameter",
												"name": "ValueT"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/series.ts",
									"line": 565,
									"character": 12
								}
							]
						},
						{
							"id": 2396,
							"name": "endAt",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 2397,
									"name": "endAt",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Get a new series containing all values up until and including the specified index value (inclusive).",
										"returns": "Returns a new series containing all values up until and including the specified index value.\n"
									},
									"parameters": [
										{
											"id": 2398,
											"name": "indexValue",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The index value to search for before ending the new series.\n"
											},
											"type": {
												"type": "typeParameter",
												"name": "IndexT"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "ISeries",
										"id": 2287,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "IndexT"
											},
											{
												"type": "typeParameter",
												"name": "ValueT"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/series.ts",
									"line": 430,
									"character": 9
								}
							]
						},
						{
							"id": 2506,
							"name": "except",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 2507,
									"name": "except",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Returns the exception of values between two series.",
										"returns": "Returns the difference between the two series.\n"
									},
									"typeParameter": [
										{
											"id": 2508,
											"name": "InnerIndexT",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										},
										{
											"id": 2509,
											"name": "InnerValueT",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										},
										{
											"id": 2510,
											"name": "KeyT",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										}
									],
									"parameters": [
										{
											"id": 2511,
											"name": "inner",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The other series to combine."
											},
											"type": {
												"type": "reference",
												"name": "ISeries",
												"id": 2287,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "InnerIndexT"
													},
													{
														"type": "typeParameter",
														"name": "InnerValueT"
													}
												]
											}
										},
										{
											"id": 2512,
											"name": "outerSelector",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "reference",
												"name": "SelectorFn",
												"id": 3625,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "ValueT"
													},
													{
														"type": "typeParameter",
														"name": "KeyT"
													}
												]
											}
										},
										{
											"id": 2513,
											"name": "innerSelector",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "reference",
												"name": "SelectorFn",
												"id": 3625,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "InnerValueT"
													},
													{
														"type": "typeParameter",
														"name": "KeyT"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "ISeries",
										"id": 2287,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "IndexT"
											},
											{
												"type": "typeParameter",
												"name": "ValueT"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/series.ts",
									"line": 663,
									"character": 10
								}
							]
						},
						{
							"id": 2563,
							"name": "fillGaps",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 2564,
									"name": "fillGaps",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Fill gaps in a series or dataframe.",
										"returns": "Returns a new series with gaps filled in.\n"
									},
									"parameters": [
										{
											"id": 2565,
											"name": "comparer",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Comparer that is passed pairA and pairB, two consecutive rows, return truthy if there is a gap between the rows, or falsey if there is no gap."
											},
											"type": {
												"type": "reference",
												"name": "ComparerFn",
												"id": 3651,
												"typeArguments": [
													{
														"type": "tuple",
														"elements": [
															{
																"type": "typeParameter",
																"name": "IndexT"
															},
															{
																"type": "typeParameter",
																"name": "ValueT"
															}
														]
													},
													{
														"type": "tuple",
														"elements": [
															{
																"type": "typeParameter",
																"name": "IndexT"
															},
															{
																"type": "typeParameter",
																"name": "ValueT"
															}
														]
													}
												]
											}
										},
										{
											"id": 2566,
											"name": "generator",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Generator that is passed pairA and pairB, two consecutive rows, returns an array of pairs that fills the gap between the rows.\n"
											},
											"type": {
												"type": "reference",
												"name": "GapFillFn",
												"id": 3663,
												"typeArguments": [
													{
														"type": "tuple",
														"elements": [
															{
																"type": "typeParameter",
																"name": "IndexT"
															},
															{
																"type": "typeParameter",
																"name": "ValueT"
															}
														]
													},
													{
														"type": "tuple",
														"elements": [
															{
																"type": "typeParameter",
																"name": "IndexT"
															},
															{
																"type": "typeParameter",
																"name": "ValueT"
															}
														]
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "ISeries",
										"id": 2287,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "IndexT"
											},
											{
												"type": "typeParameter",
												"name": "ValueT"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/series.ts",
									"line": 791,
									"character": 12
								}
							]
						},
						{
							"id": 2365,
							"name": "first",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 2366,
									"name": "first",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Get the first value of the series.",
										"returns": "Returns the first value of the series.\n"
									},
									"type": {
										"type": "typeParameter",
										"name": "ValueT"
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/series.ts",
									"line": 321,
									"character": 9
								}
							]
						},
						{
							"id": 2381,
							"name": "forEach",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 2382,
									"name": "forEach",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Invoke a callback function for each value in the series.",
										"returns": "Returns the input series with no modifications.\n"
									},
									"parameters": [
										{
											"id": 2383,
											"name": "callback",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The calback to invoke for each value.\n"
											},
											"type": {
												"type": "reference",
												"name": "CallbackFn",
												"id": 3563,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "ValueT"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "ISeries",
										"id": 2287,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "IndexT"
											},
											{
												"type": "typeParameter",
												"name": "ValueT"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/series.ts",
									"line": 373,
									"character": 11
								}
							]
						},
						{
							"id": 2292,
							"name": "getIndex",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 2293,
									"name": "getIndex",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Get the index for the series."
									},
									"type": {
										"type": "reference",
										"name": "IIndex",
										"id": 3671,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "IndexT"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/series.ts",
									"line": 139,
									"character": 12
								}
							]
						},
						{
							"id": 2443,
							"name": "groupBy",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 2444,
									"name": "groupBy",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Group the series according to the selector.",
										"returns": "Returns a series of groups. Each group is a series with values that have been grouped by the 'selector' function.\n"
									},
									"typeParameter": [
										{
											"id": 2445,
											"name": "GroupT",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										}
									],
									"parameters": [
										{
											"id": 2446,
											"name": "selector",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Selector that defines the value to group by.\n"
											},
											"type": {
												"type": "reference",
												"name": "SelectorFn",
												"id": 3625,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "ValueT"
													},
													{
														"type": "typeParameter",
														"name": "GroupT"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "ISeries",
										"id": 2287,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "number"
											},
											{
												"type": "reference",
												"name": "ISeries",
												"id": 2287,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "IndexT"
													},
													{
														"type": "typeParameter",
														"name": "ValueT"
													}
												]
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/series.ts",
									"line": 574,
									"character": 11
								}
							]
						},
						{
							"id": 2447,
							"name": "groupSequentialBy",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 2448,
									"name": "groupSequentialBy",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Group sequential values into a Series of windows.",
										"returns": "Returns a series of groups. Each group is a series with values that have been grouped by the 'selector' function.\n"
									},
									"typeParameter": [
										{
											"id": 2449,
											"name": "GroupT",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										}
									],
									"parameters": [
										{
											"id": 2450,
											"name": "selector",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"text": "Optional selector that defines the value to group by.\n"
											},
											"type": {
												"type": "reference",
												"name": "SelectorFn",
												"id": 3625,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "ValueT"
													},
													{
														"type": "typeParameter",
														"name": "GroupT"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "ISeries",
										"id": 2287,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "number"
											},
											{
												"type": "reference",
												"name": "ISeries",
												"id": 2287,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "IndexT"
													},
													{
														"type": "typeParameter",
														"name": "ValueT"
													}
												]
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/series.ts",
									"line": 583,
									"character": 21
								}
							]
						},
						{
							"id": 2372,
							"name": "head",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 2373,
									"name": "head",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Get X values from the start of the series.",
										"returns": "Returns a new series that has only the specified number of values taken from the start of the input sequence.\n"
									},
									"parameters": [
										{
											"id": 2374,
											"name": "numValues",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Number of values to take.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "ISeries",
										"id": 2287,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "IndexT"
											},
											{
												"type": "typeParameter",
												"name": "ValueT"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/series.ts",
									"line": 346,
									"character": 8
								}
							]
						},
						{
							"id": 2423,
							"name": "inflate",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 2424,
									"name": "inflate",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Inflate the series to a dataframe.",
										"returns": "Returns a new dataframe that has been created from the input series via the 'selector' function.\n"
									},
									"typeParameter": [
										{
											"id": 2425,
											"name": "ToT",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										}
									],
									"parameters": [
										{
											"id": 2426,
											"name": "selector",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "reference",
												"name": "SelectorWithIndexFn",
												"id": 3569,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "ValueT"
													},
													{
														"type": "typeParameter",
														"name": "ToT"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "IDataFrame",
										"id": 683,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "IndexT"
											},
											{
												"type": "typeParameter",
												"name": "ToT"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/series.ts",
									"line": 514,
									"character": 11
								}
							]
						},
						{
							"id": 2557,
							"name": "insertPair",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 2558,
									"name": "insertPair",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Insert a pair at the start of the series.",
										"returns": "Returns a new series with the specified pair inserted.\n"
									},
									"parameters": [
										{
											"id": 2559,
											"name": "pair",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The pair to insert.\n"
											},
											"type": {
												"type": "tuple",
												"elements": [
													{
														"type": "typeParameter",
														"name": "IndexT"
													},
													{
														"type": "typeParameter",
														"name": "ValueT"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "ISeries",
										"id": 2287,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "IndexT"
											},
											{
												"type": "typeParameter",
												"name": "ValueT"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/series.ts",
									"line": 772,
									"character": 14
								}
							]
						},
						{
							"id": 2498,
							"name": "intersection",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 2499,
									"name": "intersection",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Returns the intersection of values between two series.",
										"returns": "Returns the intersection of two series.\n"
									},
									"typeParameter": [
										{
											"id": 2500,
											"name": "InnerIndexT",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										},
										{
											"id": 2501,
											"name": "InnerValueT",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										},
										{
											"id": 2502,
											"name": "KeyT",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										}
									],
									"parameters": [
										{
											"id": 2503,
											"name": "inner",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The other series to combine."
											},
											"type": {
												"type": "reference",
												"name": "ISeries",
												"id": 2287,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "InnerIndexT"
													},
													{
														"type": "typeParameter",
														"name": "InnerValueT"
													}
												]
											}
										},
										{
											"id": 2504,
											"name": "outerSelector",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "reference",
												"name": "SelectorFn",
												"id": 3625,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "ValueT"
													},
													{
														"type": "typeParameter",
														"name": "KeyT"
													}
												]
											}
										},
										{
											"id": 2505,
											"name": "innerSelector",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "reference",
												"name": "SelectorFn",
												"id": 3625,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "InnerValueT"
													},
													{
														"type": "typeParameter",
														"name": "KeyT"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "ISeries",
										"id": 2287,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "IndexT"
											},
											{
												"type": "typeParameter",
												"name": "ValueT"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/series.ts",
									"line": 648,
									"character": 16
								}
							]
						},
						{
							"id": 2514,
							"name": "join",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 2515,
									"name": "join",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Correlates the elements of two series on matching keys.",
										"returns": "Returns the joined series.\n"
									},
									"typeParameter": [
										{
											"id": 2516,
											"name": "KeyT",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										},
										{
											"id": 2517,
											"name": "InnerIndexT",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										},
										{
											"id": 2518,
											"name": "InnerValueT",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										},
										{
											"id": 2519,
											"name": "ResultValueT",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										}
									],
									"parameters": [
										{
											"id": 2520,
											"name": "inner",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The inner Series or DataFrame to join."
											},
											"type": {
												"type": "reference",
												"name": "ISeries",
												"id": 2287,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "InnerIndexT"
													},
													{
														"type": "typeParameter",
														"name": "InnerValueT"
													}
												]
											}
										},
										{
											"id": 2521,
											"name": "outerKeySelector",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Selector that chooses the join key from the outer sequence."
											},
											"type": {
												"type": "reference",
												"name": "SelectorFn",
												"id": 3625,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "ValueT"
													},
													{
														"type": "typeParameter",
														"name": "KeyT"
													}
												]
											}
										},
										{
											"id": 2522,
											"name": "innerKeySelector",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Selector that chooses the join key from the inner sequence."
											},
											"type": {
												"type": "reference",
												"name": "SelectorFn",
												"id": 3625,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "InnerValueT"
													},
													{
														"type": "typeParameter",
														"name": "KeyT"
													}
												]
											}
										},
										{
											"id": 2523,
											"name": "resultSelector",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Selector that defines how to merge outer and inner values.\n"
											},
											"type": {
												"type": "reference",
												"name": "JoinFn",
												"id": 3631,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "ValueT"
													},
													{
														"type": "typeParameter",
														"name": "InnerValueT"
													},
													{
														"type": "typeParameter",
														"name": "ResultValueT"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "ISeries",
										"id": 2287,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "number"
											},
											{
												"type": "typeParameter",
												"name": "ResultValueT"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/series.ts",
									"line": 680,
									"character": 8
								}
							]
						},
						{
							"id": 2524,
							"name": "joinOuter",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 2525,
									"name": "joinOuter",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Performs an outer join on two series. Correlates the elements based on matching keys.\nIncludes elements from both series that have no correlation in the other series.",
										"returns": "Returns the joined series.\n"
									},
									"typeParameter": [
										{
											"id": 2526,
											"name": "KeyT",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										},
										{
											"id": 2527,
											"name": "InnerIndexT",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										},
										{
											"id": 2528,
											"name": "InnerValueT",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										},
										{
											"id": 2529,
											"name": "ResultValueT",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										}
									],
									"parameters": [
										{
											"id": 2530,
											"name": "inner",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The inner series to join."
											},
											"type": {
												"type": "reference",
												"name": "ISeries",
												"id": 2287,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "InnerIndexT"
													},
													{
														"type": "typeParameter",
														"name": "InnerValueT"
													}
												]
											}
										},
										{
											"id": 2531,
											"name": "outerKeySelector",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Selector that chooses the join key from the outer sequence."
											},
											"type": {
												"type": "reference",
												"name": "SelectorFn",
												"id": 3625,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "ValueT"
													},
													{
														"type": "typeParameter",
														"name": "KeyT"
													}
												]
											}
										},
										{
											"id": 2532,
											"name": "innerKeySelector",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Selector that chooses the join key from the inner sequence."
											},
											"type": {
												"type": "reference",
												"name": "SelectorFn",
												"id": 3625,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "InnerValueT"
													},
													{
														"type": "typeParameter",
														"name": "KeyT"
													}
												]
											}
										},
										{
											"id": 2533,
											"name": "resultSelector",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Selector that defines how to merge outer and inner values.\n\nImplementation from here:\n\n\thttp://blogs.geniuscode.net/RyanDHatch/?p=116\n"
											},
											"type": {
												"type": "reference",
												"name": "JoinFn",
												"id": 3631,
												"typeArguments": [
													{
														"type": "union",
														"types": [
															{
																"type": "typeParameter",
																"name": "ValueT"
															},
															{
																"type": "intrinsic",
																"name": "null"
															}
														]
													},
													{
														"type": "union",
														"types": [
															{
																"type": "typeParameter",
																"name": "InnerValueT"
															},
															{
																"type": "intrinsic",
																"name": "null"
															}
														]
													},
													{
														"type": "typeParameter",
														"name": "ResultValueT"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "ISeries",
										"id": 2287,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "number"
											},
											{
												"type": "typeParameter",
												"name": "ResultValueT"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/series.ts",
									"line": 703,
									"character": 13
								}
							]
						},
						{
							"id": 2534,
							"name": "joinOuterLeft",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 2535,
									"name": "joinOuterLeft",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Performs a left outer join on two series. Correlates the elements based on matching keys.\nIncludes left elements that have no correlation.",
										"returns": "Returns the joined series or dataframe.\n"
									},
									"typeParameter": [
										{
											"id": 2536,
											"name": "KeyT",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										},
										{
											"id": 2537,
											"name": "InnerIndexT",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										},
										{
											"id": 2538,
											"name": "InnerValueT",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										},
										{
											"id": 2539,
											"name": "ResultValueT",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										}
									],
									"parameters": [
										{
											"id": 2540,
											"name": "inner",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The inner Series or DataFrame to join."
											},
											"type": {
												"type": "reference",
												"name": "ISeries",
												"id": 2287,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "InnerIndexT"
													},
													{
														"type": "typeParameter",
														"name": "InnerValueT"
													}
												]
											}
										},
										{
											"id": 2541,
											"name": "outerKeySelector",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Selector that chooses the join key from the outer sequence."
											},
											"type": {
												"type": "reference",
												"name": "SelectorFn",
												"id": 3625,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "ValueT"
													},
													{
														"type": "typeParameter",
														"name": "KeyT"
													}
												]
											}
										},
										{
											"id": 2542,
											"name": "innerKeySelector",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Selector that chooses the join key from the inner sequence."
											},
											"type": {
												"type": "reference",
												"name": "SelectorFn",
												"id": 3625,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "InnerValueT"
													},
													{
														"type": "typeParameter",
														"name": "KeyT"
													}
												]
											}
										},
										{
											"id": 2543,
											"name": "resultSelector",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Selector that defines how to merge outer and inner values.\n\nImplementation from here:\n\n\thttp://blogs.geniuscode.net/RyanDHatch/?p=116\n"
											},
											"type": {
												"type": "reference",
												"name": "JoinFn",
												"id": 3631,
												"typeArguments": [
													{
														"type": "union",
														"types": [
															{
																"type": "typeParameter",
																"name": "ValueT"
															},
															{
																"type": "intrinsic",
																"name": "null"
															}
														]
													},
													{
														"type": "union",
														"types": [
															{
																"type": "typeParameter",
																"name": "InnerValueT"
															},
															{
																"type": "intrinsic",
																"name": "null"
															}
														]
													},
													{
														"type": "typeParameter",
														"name": "ResultValueT"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "ISeries",
										"id": 2287,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "number"
											},
											{
												"type": "typeParameter",
												"name": "ResultValueT"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/series.ts",
									"line": 726,
									"character": 17
								}
							]
						},
						{
							"id": 2544,
							"name": "joinOuterRight",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 2545,
									"name": "joinOuterRight",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Performs a right outer join on two series. Correlates the elements based on matching keys.\nIncludes right elements that have no correlation.",
										"returns": "Returns the joined series or dataframe.\n"
									},
									"typeParameter": [
										{
											"id": 2546,
											"name": "KeyT",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										},
										{
											"id": 2547,
											"name": "InnerIndexT",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										},
										{
											"id": 2548,
											"name": "InnerValueT",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										},
										{
											"id": 2549,
											"name": "ResultValueT",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										}
									],
									"parameters": [
										{
											"id": 2550,
											"name": "inner",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The inner Series or DataFrame to join."
											},
											"type": {
												"type": "reference",
												"name": "ISeries",
												"id": 2287,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "InnerIndexT"
													},
													{
														"type": "typeParameter",
														"name": "InnerValueT"
													}
												]
											}
										},
										{
											"id": 2551,
											"name": "outerKeySelector",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Selector that chooses the join key from the outer sequence."
											},
											"type": {
												"type": "reference",
												"name": "SelectorFn",
												"id": 3625,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "ValueT"
													},
													{
														"type": "typeParameter",
														"name": "KeyT"
													}
												]
											}
										},
										{
											"id": 2552,
											"name": "innerKeySelector",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Selector that chooses the join key from the inner sequence."
											},
											"type": {
												"type": "reference",
												"name": "SelectorFn",
												"id": 3625,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "InnerValueT"
													},
													{
														"type": "typeParameter",
														"name": "KeyT"
													}
												]
											}
										},
										{
											"id": 2553,
											"name": "resultSelector",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Selector that defines how to merge outer and inner values.\n\nImplementation from here:\n\n\thttp://blogs.geniuscode.net/RyanDHatch/?p=116\n"
											},
											"type": {
												"type": "reference",
												"name": "JoinFn",
												"id": 3631,
												"typeArguments": [
													{
														"type": "union",
														"types": [
															{
																"type": "typeParameter",
																"name": "ValueT"
															},
															{
																"type": "intrinsic",
																"name": "null"
															}
														]
													},
													{
														"type": "union",
														"types": [
															{
																"type": "typeParameter",
																"name": "InnerValueT"
															},
															{
																"type": "intrinsic",
																"name": "null"
															}
														]
													},
													{
														"type": "typeParameter",
														"name": "ResultValueT"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "ISeries",
										"id": 2287,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "number"
											},
											{
												"type": "typeParameter",
												"name": "ResultValueT"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/series.ts",
									"line": 749,
									"character": 18
								}
							]
						},
						{
							"id": 2367,
							"name": "last",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 2368,
									"name": "last",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Get the last value of the series.",
										"returns": "Returns the last value of the series.\n"
									},
									"type": {
										"type": "typeParameter",
										"name": "ValueT"
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/series.ts",
									"line": 328,
									"character": 8
								}
							]
						},
						{
							"id": 2435,
							"name": "max",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 2436,
									"name": "max",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Get the max value in the series.",
										"returns": "Returns the maximum of the number values in the series.\n"
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/series.ts",
									"line": 549,
									"character": 7
								}
							]
						},
						{
							"id": 2431,
							"name": "median",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 2432,
									"name": "median",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Get the median value in the series. Not this sorts the series, so can be expensive.",
										"returns": "Returns the median of the values in the series.\n"
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/series.ts",
									"line": 535,
									"character": 10
								}
							]
						},
						{
							"id": 2433,
							"name": "min",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 2434,
									"name": "min",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Get the min value in the series.",
										"returns": "Returns the minimum of the number values in the series.\n"
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/series.ts",
									"line": 542,
									"character": 7
								}
							]
						},
						{
							"id": 2390,
							"name": "none",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 2391,
									"name": "none",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Determine if the predicate returns truthy for none of the values in the series.\nReturns true for an empty series.\nReturns true if the predicate always returns falsy.\nOtherwise returns false.\nIf no predicate is specified the value itself is checked.",
										"returns": "Returns true if the predicate has returned truthy for no values in the series, otherwise returns false.\n"
									},
									"parameters": [
										{
											"id": 2392,
											"name": "predicate",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "reference",
												"name": "PredicateFn",
												"id": 3639,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "ValueT"
													}
												]
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/series.ts",
									"line": 412,
									"character": 8
								}
							]
						},
						{
							"id": 2485,
							"name": "orderBy",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 2486,
									"name": "orderBy",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Sorts the series by a value defined by the selector (ascending).",
										"returns": "Returns a new ordered series that has been sorted by the value returned by the selector.\n"
									},
									"typeParameter": [
										{
											"id": 2487,
											"name": "SortT",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										}
									],
									"parameters": [
										{
											"id": 2488,
											"name": "selector",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Selects the value to sort by.\n"
											},
											"type": {
												"type": "reference",
												"name": "SelectorWithIndexFn",
												"id": 3569,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "ValueT"
													},
													{
														"type": "typeParameter",
														"name": "SortT"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "IOrderedSeries",
										"id": 2574,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "IndexT"
											},
											{
												"type": "typeParameter",
												"name": "ValueT"
											},
											{
												"type": "typeParameter",
												"name": "SortT"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/series.ts",
									"line": 615,
									"character": 11
								}
							]
						},
						{
							"id": 2489,
							"name": "orderByDescending",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 2490,
									"name": "orderByDescending",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Sorts the series by a value defined by the selector (descending).",
										"returns": "Returns a new ordered series that has been sorted by the value returned by the selector.\n"
									},
									"typeParameter": [
										{
											"id": 2491,
											"name": "SortT",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										}
									],
									"parameters": [
										{
											"id": 2492,
											"name": "selector",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Selects the value to sort by.\n"
											},
											"type": {
												"type": "reference",
												"name": "SelectorWithIndexFn",
												"id": 3569,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "ValueT"
													},
													{
														"type": "typeParameter",
														"name": "SortT"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "IOrderedSeries",
										"id": 2574,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "IndexT"
											},
											{
												"type": "typeParameter",
												"name": "ValueT"
											},
											{
												"type": "typeParameter",
												"name": "SortT"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/series.ts",
									"line": 624,
									"character": 21
								}
							]
						},
						{
							"id": 2415,
							"name": "parseDates",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 2416,
									"name": "parseDates",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Parse a series with string values to a series with date values.",
										"returns": "Returns a new series where string values from the original series have been parsed to Date values.\n"
									},
									"parameters": [
										{
											"id": 2417,
											"name": "formatString",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "undefined"
													},
													{
														"type": "intrinsic",
														"name": "string"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "ISeries",
										"id": 2287,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "IndexT"
											},
											{
												"type": "reference",
												"name": "Date"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/series.ts",
									"line": 489,
									"character": 14
								}
							]
						},
						{
							"id": 2413,
							"name": "parseFloats",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 2414,
									"name": "parseFloats",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Parse a series with string values to a series with float values.",
										"returns": "Returns a new series where string values from the original series have been parsed to floating-point values.\n"
									},
									"type": {
										"type": "reference",
										"name": "ISeries",
										"id": 2287,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "IndexT"
											},
											{
												"type": "intrinsic",
												"name": "number"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/series.ts",
									"line": 480,
									"character": 15
								}
							]
						},
						{
							"id": 2411,
							"name": "parseInts",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 2412,
									"name": "parseInts",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Parse a series with string values to a series with int values.",
										"returns": "Returns a new series where string values from the original series have been parsed to integer values.\n"
									},
									"type": {
										"type": "reference",
										"name": "ISeries",
										"id": 2287,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "IndexT"
											},
											{
												"type": "intrinsic",
												"name": "number"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/series.ts",
									"line": 473,
									"character": 13
								}
							]
						},
						{
							"id": 2343,
							"name": "percentChange",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 2344,
									"name": "percentChange",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Compute the percent change between each pair of values.\nPercentages are expressed as 0-1 values.",
										"returns": "Returns a new series where each value indicates the percent change from the previous number value in the original series.\n"
									},
									"type": {
										"type": "reference",
										"name": "ISeries",
										"id": 2287,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "IndexT"
											},
											{
												"type": "intrinsic",
												"name": "number"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/series.ts",
									"line": 254,
									"character": 17
								}
							]
						},
						{
							"id": 2298,
							"name": "resetIndex",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 2299,
									"name": "resetIndex",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Resets the index of the series back to the default zero-based sequential integer index.",
										"returns": "Returns a new series with the index reset to the default zero-based index.\n"
									},
									"type": {
										"type": "reference",
										"name": "ISeries",
										"id": 2287,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "number"
											},
											{
												"type": "typeParameter",
												"name": "ValueT"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/series.ts",
									"line": 155,
									"character": 14
								}
							]
						},
						{
							"id": 2437,
							"name": "reverse",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 2438,
									"name": "reverse",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Reverse the series.",
										"returns": "Returns a new series that is the reverse of the input.\n"
									},
									"type": {
										"type": "reference",
										"name": "ISeries",
										"id": 2287,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "IndexT"
											},
											{
												"type": "typeParameter",
												"name": "ValueT"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/series.ts",
									"line": 556,
									"character": 11
								}
							]
						},
						{
							"id": 2328,
							"name": "rollingWindow",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 2329,
									"name": "rollingWindow",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Segment a Series into 'rolling windows'. Returns a new Series. Each value in the new Series contains a 'window' (or segment) of the original series.",
										"returns": "Returns a new series, each value of which is a 'window' (or segment) of the original series.\n"
									},
									"parameters": [
										{
											"id": 2330,
											"name": "period",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The number of values in the window.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "ISeries",
										"id": 2287,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "number"
											},
											{
												"type": "reference",
												"name": "ISeries",
												"id": 2287,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "IndexT"
													},
													{
														"type": "typeParameter",
														"name": "ValueT"
													}
												]
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/series.ts",
									"line": 218,
									"character": 17
								}
							]
						},
						{
							"id": 2317,
							"name": "select",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 2318,
									"name": "select",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Generate a new series based by calling the selector function on each value.",
										"returns": "Returns a new series that has been transformed by the selector function.\n"
									},
									"typeParameter": [
										{
											"id": 2319,
											"name": "ToT",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										}
									],
									"parameters": [
										{
											"id": 2320,
											"name": "selector",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Selector function that transforms each value to create a new series or dataframe.\n"
											},
											"type": {
												"type": "reference",
												"name": "SelectorWithIndexFn",
												"id": 3569,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "ValueT"
													},
													{
														"type": "typeParameter",
														"name": "ToT"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "ISeries",
										"id": 2287,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "IndexT"
											},
											{
												"type": "typeParameter",
												"name": "ToT"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/series.ts",
									"line": 190,
									"character": 10
								}
							]
						},
						{
							"id": 2321,
							"name": "selectMany",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 2322,
									"name": "selectMany",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Generate a new series based on the results of the selector function.",
										"returns": "Returns a new series with values that have been produced by the selector function.\n"
									},
									"typeParameter": [
										{
											"id": 2323,
											"name": "ToT",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										}
									],
									"parameters": [
										{
											"id": 2324,
											"name": "selector",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Selector function that transforms each value into a list of values.\n"
											},
											"type": {
												"type": "reference",
												"name": "SelectorWithIndexFn",
												"id": 3569,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "ValueT"
													},
													{
														"type": "reference",
														"name": "Iterable",
														"typeArguments": [
															{
																"type": "typeParameter",
																"name": "ToT"
															}
														]
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "ISeries",
										"id": 2287,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "IndexT"
											},
											{
												"type": "typeParameter",
												"name": "ToT"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/series.ts",
									"line": 199,
									"character": 14
								}
							]
						},
						{
							"id": 2334,
							"name": "sequentialDistinct",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 2335,
									"name": "sequentialDistinct",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Group sequential duplicate values into a Series of windows.",
										"returns": "Returns a series of groups. Each group is itself a series.\n"
									},
									"typeParameter": [
										{
											"id": 2336,
											"name": "ToT",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										}
									],
									"parameters": [
										{
											"id": 2337,
											"name": "selector",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Selects the value used to compare for duplicates.\n"
											},
											"type": {
												"type": "reference",
												"name": "SelectorFn",
												"id": 3625,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "ValueT"
													},
													{
														"type": "typeParameter",
														"name": "ToT"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "ISeries",
										"id": 2287,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "IndexT"
											},
											{
												"type": "typeParameter",
												"name": "ValueT"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/series.ts",
									"line": 236,
									"character": 22
								}
							]
						},
						{
							"id": 2345,
							"name": "skip",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 2346,
									"name": "skip",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Skip a number of values in the series.",
										"returns": "Returns a new series with the specified number of values skipped.\n"
									},
									"parameters": [
										{
											"id": 2347,
											"name": "numValues",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Number of values to skip."
											},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "ISeries",
										"id": 2287,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "IndexT"
											},
											{
												"type": "typeParameter",
												"name": "ValueT"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/series.ts",
									"line": 262,
									"character": 8
								}
							]
						},
						{
							"id": 2351,
							"name": "skipUntil",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 2352,
									"name": "skipUntil",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Skips values in the series until a condition is met.",
										"returns": "Returns a new series with all initial sequential values removed that don't match the predicate.\n"
									},
									"parameters": [
										{
											"id": 2353,
											"name": "predicate",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Return true to indicate the condition met.\n"
											},
											"type": {
												"type": "reference",
												"name": "PredicateFn",
												"id": 3639,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "ValueT"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "ISeries",
										"id": 2287,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "IndexT"
											},
											{
												"type": "typeParameter",
												"name": "ValueT"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/series.ts",
									"line": 280,
									"character": 13
								}
							]
						},
						{
							"id": 2348,
							"name": "skipWhile",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 2349,
									"name": "skipWhile",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Skips values in the series while a condition is met.",
										"returns": "Returns a new series with all initial sequential values removed that match the predicate.\n"
									},
									"parameters": [
										{
											"id": 2350,
											"name": "predicate",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Return true to indicate the condition met.\n"
											},
											"type": {
												"type": "reference",
												"name": "PredicateFn",
												"id": 3639,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "ValueT"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "ISeries",
										"id": 2287,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "IndexT"
											},
											{
												"type": "typeParameter",
												"name": "ValueT"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/series.ts",
									"line": 271,
									"character": 13
								}
							]
						},
						{
							"id": 2393,
							"name": "startAt",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 2394,
									"name": "startAt",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Get a new series containing all values starting at and after the specified index value.",
										"returns": "Returns a new series containing all values starting at and after the specified index value.\n"
									},
									"parameters": [
										{
											"id": 2395,
											"name": "indexValue",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The index value to search for before starting the new series.\n"
											},
											"type": {
												"type": "typeParameter",
												"name": "IndexT"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "ISeries",
										"id": 2287,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "IndexT"
											},
											{
												"type": "typeParameter",
												"name": "ValueT"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/series.ts",
									"line": 421,
									"character": 11
								}
							]
						},
						{
							"id": 2427,
							"name": "sum",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 2428,
									"name": "sum",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Sum the values in a series.",
										"returns": "Returns the sum of the number values in the series.\n"
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/series.ts",
									"line": 521,
									"character": 7
								}
							]
						},
						{
							"id": 2375,
							"name": "tail",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 2376,
									"name": "tail",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Get X values from the end of the series.",
										"returns": "Returns a new series that has only the specified number of values taken from the end of the input sequence.\n"
									},
									"parameters": [
										{
											"id": 2377,
											"name": "numValues",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Number of values to take.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "ISeries",
										"id": 2287,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "IndexT"
											},
											{
												"type": "typeParameter",
												"name": "ValueT"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/series.ts",
									"line": 355,
									"character": 8
								}
							]
						},
						{
							"id": 2354,
							"name": "take",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 2355,
									"name": "take",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Take a number of rows in the series.",
										"returns": "Returns a new series with up to the specified number of values included.\n"
									},
									"parameters": [
										{
											"id": 2356,
											"name": "numRows",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Number of rows to take.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "ISeries",
										"id": 2287,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "IndexT"
											},
											{
												"type": "typeParameter",
												"name": "ValueT"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/series.ts",
									"line": 289,
									"character": 8
								}
							]
						},
						{
							"id": 2360,
							"name": "takeUntil",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 2361,
									"name": "takeUntil",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Take values from the series until a condition is met.",
										"returns": "Returns a new series or dataframe that only includes the initial sequential values that have not matched the predicate.\n"
									},
									"parameters": [
										{
											"id": 2362,
											"name": "predicate",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Return true to indicate the condition met.\n"
											},
											"type": {
												"type": "reference",
												"name": "PredicateFn",
												"id": 3639,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "ValueT"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "ISeries",
										"id": 2287,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "IndexT"
											},
											{
												"type": "typeParameter",
												"name": "ValueT"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/series.ts",
									"line": 307,
									"character": 13
								}
							]
						},
						{
							"id": 2357,
							"name": "takeWhile",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 2358,
									"name": "takeWhile",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Take values from the series while a condition is met.",
										"returns": "Returns a new series that only includes the initial sequential values that have matched the predicate.\n"
									},
									"parameters": [
										{
											"id": 2359,
											"name": "predicate",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Return true to indicate the condition met.\n"
											},
											"type": {
												"type": "reference",
												"name": "PredicateFn",
												"id": 3639,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "ValueT"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "ISeries",
										"id": 2287,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "IndexT"
											},
											{
												"type": "typeParameter",
												"name": "ValueT"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/series.ts",
									"line": 298,
									"character": 13
								}
							]
						},
						{
							"id": 2300,
							"name": "toArray",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 2301,
									"name": "toArray",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Extract values from the series as an array.\nThis forces lazy evaluation to complete.",
										"returns": "Returns an array of values contained within the series.\n"
									},
									"type": {
										"type": "array",
										"elementType": {
											"type": "typeParameter",
											"name": "ValueT"
										}
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/series.ts",
									"line": 163,
									"character": 11
								}
							]
						},
						{
							"id": 2304,
							"name": "toObject",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 2305,
									"name": "toObject",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Convert the series to a JavaScript object.",
										"returns": "Returns a JavaScript object generated from the input sequence by the key and value selector funtions.\n"
									},
									"typeParameter": [
										{
											"id": 2306,
											"name": "KeyT",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										},
										{
											"id": 2307,
											"name": "FieldT",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										},
										{
											"id": 2308,
											"name": "OutT",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										}
									],
									"parameters": [
										{
											"id": 2309,
											"name": "keySelector",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Function that selects keys for the resulting object."
											},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 2310,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"signatures": [
														{
															"id": 2311,
															"name": "__call",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {},
															"parameters": [
																{
																	"id": 2312,
																	"name": "value",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {},
																	"type": {
																		"type": "typeParameter",
																		"name": "ValueT"
																	}
																}
															],
															"type": {
																"type": "typeParameter",
																"name": "KeyT"
															}
														}
													],
													"sources": [
														{
															"fileName": "lib/series.ts",
															"line": 181,
															"character": 64
														}
													]
												}
											}
										},
										{
											"id": 2313,
											"name": "valueSelector",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Function that selects values for the resulting object.\n"
											},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 2314,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"signatures": [
														{
															"id": 2315,
															"name": "__call",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {},
															"parameters": [
																{
																	"id": 2316,
																	"name": "value",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {},
																	"type": {
																		"type": "typeParameter",
																		"name": "ValueT"
																	}
																}
															],
															"type": {
																"type": "typeParameter",
																"name": "FieldT"
															}
														}
													],
													"sources": [
														{
															"fileName": "lib/series.ts",
															"line": 181,
															"character": 104
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "typeParameter",
										"name": "OutT"
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/series.ts",
									"line": 181,
									"character": 12
								}
							]
						},
						{
							"id": 2302,
							"name": "toPairs",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 2303,
									"name": "toPairs",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Retreive the index and values from the Series as an array of pairs.\nEach pairs is [index, value].",
										"returns": "Returns an array of pairs that contains the series content. Each pair is a two element array that contains an index and a value.\n"
									},
									"type": {
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "Object"
										}
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/series.ts",
									"line": 171,
									"character": 11
								}
							]
						},
						{
							"id": 2409,
							"name": "toString",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 2410,
									"name": "toString",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Format the series for display as a string.\nThis forces lazy evaluation to complete.",
										"returns": "Generates and returns a string representation of the series or dataframe.\n"
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/series.ts",
									"line": 466,
									"character": 12
								}
							]
						},
						{
							"id": 2418,
							"name": "toStrings",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 2419,
									"name": "toStrings",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Convert a series of values of different types to a series of string values.",
										"returns": "Returns a new series where the values from the original series have been stringified.\n"
									},
									"parameters": [
										{
											"id": 2420,
											"name": "formatString",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "undefined"
													},
													{
														"type": "intrinsic",
														"name": "string"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "ISeries",
										"id": 2287,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "IndexT"
											},
											{
												"type": "intrinsic",
												"name": "string"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/series.ts",
									"line": 498,
									"character": 13
								}
							]
						},
						{
							"id": 2554,
							"name": "truncateStrings",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 2555,
									"name": "truncateStrings",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Produces a new series with all string values truncated to the requested maximum length.",
										"returns": "Returns a new series with strings that are truncated to the specified maximum length.\n"
									},
									"parameters": [
										{
											"id": 2556,
											"name": "maxLength",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The maximum length of the string values after truncation.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "ISeries",
										"id": 2287,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "IndexT"
											},
											{
												"type": "typeParameter",
												"name": "ValueT"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/series.ts",
									"line": 763,
									"character": 19
								}
							]
						},
						{
							"id": 2493,
							"name": "union",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 2494,
									"name": "union",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Returns the unique union of values between two series.",
										"returns": "Returns the union of two series.\n"
									},
									"typeParameter": [
										{
											"id": 2495,
											"name": "KeyT",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										}
									],
									"parameters": [
										{
											"id": 2496,
											"name": "other",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The other Series or DataFrame to combine."
											},
											"type": {
												"type": "reference",
												"name": "ISeries",
												"id": 2287,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "IndexT"
													},
													{
														"type": "typeParameter",
														"name": "ValueT"
													}
												]
											}
										},
										{
											"id": 2497,
											"name": "selector",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "reference",
												"name": "SelectorFn",
												"id": 3625,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "ValueT"
													},
													{
														"type": "typeParameter",
														"name": "KeyT"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "ISeries",
										"id": 2287,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "IndexT"
											},
											{
												"type": "typeParameter",
												"name": "ValueT"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/series.ts",
									"line": 634,
									"character": 9
								}
							]
						},
						{
							"id": 2331,
							"name": "variableWindow",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 2332,
									"name": "variableWindow",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Groups sequential values into variable length 'windows'.",
										"returns": "Returns a series of groups. Each group is itself a series that contains the values in the 'window'.\n"
									},
									"parameters": [
										{
											"id": 2333,
											"name": "comparer",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Predicate that compares two values and returns true if they should be in the same window.\n"
											},
											"type": {
												"type": "reference",
												"name": "ComparerFn",
												"id": 3651,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "ValueT"
													},
													{
														"type": "typeParameter",
														"name": "ValueT"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "ISeries",
										"id": 2287,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "number"
											},
											{
												"type": "reference",
												"name": "ISeries",
												"id": 2287,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "IndexT"
													},
													{
														"type": "typeParameter",
														"name": "ValueT"
													}
												]
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/series.ts",
									"line": 227,
									"character": 18
								}
							]
						},
						{
							"id": 2378,
							"name": "where",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 2379,
									"name": "where",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Filter a series by a predicate selector.",
										"returns": "Returns a new series containing only the values that match the predicate.\n"
									},
									"parameters": [
										{
											"id": 2380,
											"name": "predicate",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Predicte function to filter rows of the series.\n"
											},
											"type": {
												"type": "reference",
												"name": "PredicateFn",
												"id": 3639,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "ValueT"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "ISeries",
										"id": 2287,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "IndexT"
											},
											{
												"type": "typeParameter",
												"name": "ValueT"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/series.ts",
									"line": 364,
									"character": 9
								}
							]
						},
						{
							"id": 2325,
							"name": "window",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 2326,
									"name": "window",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Segment a Series into 'windows'. Returns a new Series. Each value in the new Series contains a 'window' (or segment) of the original series.\nUse select or selectPairs to aggregate.",
										"returns": "Returns a new series, each value of which is a 'window' (or segment) of the original series.\n"
									},
									"parameters": [
										{
											"id": 2327,
											"name": "period",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The number of values in the window.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "ISeries",
										"id": 2287,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "number"
											},
											{
												"type": "reference",
												"name": "ISeries",
												"id": 2287,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "IndexT"
													},
													{
														"type": "typeParameter",
														"name": "ValueT"
													}
												]
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/series.ts",
									"line": 209,
									"character": 10
								}
							]
						},
						{
							"id": 2294,
							"name": "withIndex",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 2295,
									"name": "withIndex",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Apply a new index to the series.",
										"returns": "Returns a new series with the specified index attached.\n"
									},
									"typeParameter": [
										{
											"id": 2296,
											"name": "NewIndexT",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										}
									],
									"parameters": [
										{
											"id": 2297,
											"name": "newIndex",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The new array or iterable to apply to the dataframe. Can also be a selector to choose the index for each row in the dataframe.\n"
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "reference",
														"name": "Iterable",
														"typeArguments": [
															{
																"type": "typeParameter",
																"name": "NewIndexT"
															}
														]
													},
													{
														"type": "reference",
														"name": "SelectorFn",
														"id": 3625,
														"typeArguments": [
															{
																"type": "typeParameter",
																"name": "ValueT"
															},
															{
																"type": "typeParameter",
																"name": "NewIndexT"
															}
														]
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "ISeries",
										"id": 2287,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "NewIndexT"
											},
											{
												"type": "typeParameter",
												"name": "ValueT"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/series.ts",
									"line": 148,
									"character": 13
								}
							]
						},
						{
							"id": 2454,
							"name": "zip",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 2455,
									"name": "zip",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Zip together multiple series to create a new series.\nPreserves the index of the first series.",
										"returns": "Returns a single series concatenated from multiple input series.\n"
									},
									"typeParameter": [
										{
											"id": 2456,
											"name": "Index2T",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										},
										{
											"id": 2457,
											"name": "Value2T",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										},
										{
											"id": 2458,
											"name": "ResultT",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										}
									],
									"parameters": [
										{
											"id": 2459,
											"name": "s2",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "ISeries",
												"id": 2287,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "Index2T"
													},
													{
														"type": "typeParameter",
														"name": "Value2T"
													}
												]
											}
										},
										{
											"id": 2460,
											"name": "zipper",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Zipper function that produces a new series based on the input series.\n"
											},
											"type": {
												"type": "reference",
												"name": "Zip2Fn",
												"id": 3582,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "ValueT"
													},
													{
														"type": "typeParameter",
														"name": "Value2T"
													},
													{
														"type": "typeParameter",
														"name": "ResultT"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "ISeries",
										"id": 2287,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "IndexT"
											},
											{
												"type": "typeParameter",
												"name": "ResultT"
											}
										]
									}
								},
								{
									"id": 2461,
									"name": "zip",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"typeParameter": [
										{
											"id": 2462,
											"name": "Index2T",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										},
										{
											"id": 2463,
											"name": "Value2T",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										},
										{
											"id": 2464,
											"name": "Index3T",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										},
										{
											"id": 2465,
											"name": "Value3T",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										},
										{
											"id": 2466,
											"name": "ResultT",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										}
									],
									"parameters": [
										{
											"id": 2467,
											"name": "s2",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "ISeries",
												"id": 2287,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "Index2T"
													},
													{
														"type": "typeParameter",
														"name": "Value2T"
													}
												]
											}
										},
										{
											"id": 2468,
											"name": "s3",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "ISeries",
												"id": 2287,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "Index3T"
													},
													{
														"type": "typeParameter",
														"name": "Value3T"
													}
												]
											}
										},
										{
											"id": 2469,
											"name": "zipper",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Zip3Fn",
												"id": 3590,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "ValueT"
													},
													{
														"type": "typeParameter",
														"name": "Value2T"
													},
													{
														"type": "typeParameter",
														"name": "Value3T"
													},
													{
														"type": "typeParameter",
														"name": "ResultT"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "ISeries",
										"id": 2287,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "IndexT"
											},
											{
												"type": "typeParameter",
												"name": "ResultT"
											}
										]
									}
								},
								{
									"id": 2470,
									"name": "zip",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"typeParameter": [
										{
											"id": 2471,
											"name": "Index2T",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										},
										{
											"id": 2472,
											"name": "Value2T",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										},
										{
											"id": 2473,
											"name": "Index3T",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										},
										{
											"id": 2474,
											"name": "Value3T",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										},
										{
											"id": 2475,
											"name": "Index4T",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										},
										{
											"id": 2476,
											"name": "Value4T",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										},
										{
											"id": 2477,
											"name": "ResultT",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										}
									],
									"parameters": [
										{
											"id": 2478,
											"name": "s2",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "ISeries",
												"id": 2287,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "Index2T"
													},
													{
														"type": "typeParameter",
														"name": "Value2T"
													}
												]
											}
										},
										{
											"id": 2479,
											"name": "s3",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "ISeries",
												"id": 2287,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "Index3T"
													},
													{
														"type": "typeParameter",
														"name": "Value3T"
													}
												]
											}
										},
										{
											"id": 2480,
											"name": "s4",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "ISeries",
												"id": 2287,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "Index4T"
													},
													{
														"type": "typeParameter",
														"name": "Value4T"
													}
												]
											}
										},
										{
											"id": 2481,
											"name": "zipper",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Zip3Fn",
												"id": 3590,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "ValueT"
													},
													{
														"type": "typeParameter",
														"name": "Value2T"
													},
													{
														"type": "typeParameter",
														"name": "Value3T"
													},
													{
														"type": "typeParameter",
														"name": "ResultT"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "ISeries",
										"id": 2287,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "IndexT"
											},
											{
												"type": "typeParameter",
												"name": "ResultT"
											}
										]
									}
								},
								{
									"id": 2482,
									"name": "zip",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"typeParameter": [
										{
											"id": 2483,
											"name": "ResultT",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										}
									],
									"parameters": [
										{
											"id": 2484,
											"name": "args",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isRest": true
											},
											"type": {
												"type": "array",
												"elementType": {
													"type": "intrinsic",
													"name": "any"
												}
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "ISeries",
										"id": 2287,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "IndexT"
											},
											{
												"type": "typeParameter",
												"name": "ResultT"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/series.ts",
									"line": 603,
									"character": 6
								},
								{
									"fileName": "lib/series.ts",
									"line": 604,
									"character": 6
								},
								{
									"fileName": "lib/series.ts",
									"line": 605,
									"character": 6
								},
								{
									"fileName": "lib/series.ts",
									"line": 606,
									"character": 6
								}
							]
						}
					],
					"groups": [
						{
							"title": "Methods",
							"kind": 2048,
							"children": [
								2290,
								2402,
								2338,
								2384,
								2387,
								2560,
								2369,
								2429,
								2421,
								2399,
								2405,
								2451,
								2363,
								2567,
								2570,
								2572,
								2439,
								2396,
								2506,
								2563,
								2365,
								2381,
								2292,
								2443,
								2447,
								2372,
								2423,
								2557,
								2498,
								2514,
								2524,
								2534,
								2544,
								2367,
								2435,
								2431,
								2433,
								2390,
								2485,
								2489,
								2415,
								2413,
								2411,
								2343,
								2298,
								2437,
								2328,
								2317,
								2321,
								2334,
								2345,
								2351,
								2348,
								2393,
								2427,
								2375,
								2354,
								2360,
								2357,
								2300,
								2304,
								2302,
								2409,
								2418,
								2554,
								2493,
								2331,
								2378,
								2325,
								2294,
								2454
							]
						}
					],
					"sources": [
						{
							"fileName": "lib/series.ts",
							"line": 129,
							"character": 24
						}
					],
					"extendedTypes": [
						{
							"type": "reference",
							"name": "Iterable",
							"typeArguments": [
								{
									"type": "typeParameter",
									"name": "ValueT"
								}
							]
						}
					],
					"extendedBy": [
						{
							"type": "reference",
							"name": "IOrderedSeries",
							"id": 2574
						},
						{
							"type": "reference",
							"name": "IIndex",
							"id": 3671
						}
					],
					"implementedBy": [
						{
							"type": "reference",
							"name": "Index",
							"id": 3965
						},
						{
							"type": "reference",
							"name": "OrderedSeries",
							"id": 3220
						},
						{
							"type": "reference",
							"name": "Series",
							"id": 2877
						}
					]
				},
				{
					"id": 2274,
					"name": "ISeriesConfig",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "Series configuration."
					},
					"typeParameter": [
						{
							"id": 2275,
							"name": "IndexT",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {}
						},
						{
							"id": 2276,
							"name": "ValueT",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {}
						}
					],
					"children": [
						{
							"id": 2280,
							"name": "baked",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "lib/series.ts",
									"line": 36,
									"character": 9
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "true"
									},
									{
										"type": "intrinsic",
										"name": "false"
									}
								]
							}
						},
						{
							"id": 2278,
							"name": "index",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "lib/series.ts",
									"line": 34,
									"character": 9
								}
							],
							"type": {
								"type": "reference",
								"name": "Iterable",
								"typeArguments": [
									{
										"type": "typeParameter",
										"name": "IndexT"
									}
								]
							}
						},
						{
							"id": 2279,
							"name": "pairs",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "lib/series.ts",
									"line": 35,
									"character": 9
								}
							],
							"type": {
								"type": "reference",
								"name": "Iterable",
								"typeArguments": [
									{
										"type": "tuple",
										"elements": [
											{
												"type": "typeParameter",
												"name": "IndexT"
											},
											{
												"type": "typeParameter",
												"name": "ValueT"
											}
										]
									}
								]
							}
						},
						{
							"id": 2277,
							"name": "values",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "lib/series.ts",
									"line": 33,
									"character": 10
								}
							],
							"type": {
								"type": "reference",
								"name": "Iterable",
								"typeArguments": [
									{
										"type": "typeParameter",
										"name": "ValueT"
									}
								]
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								2280,
								2278,
								2279,
								2277
							]
						}
					],
					"sources": [
						{
							"fileName": "lib/series.ts",
							"line": 32,
							"character": 30
						}
					]
				},
				{
					"id": 2870,
					"name": "ISeriesContent",
					"kind": 256,
					"kindString": "Interface",
					"flags": {},
					"typeParameter": [
						{
							"id": 2871,
							"name": "IndexT",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {}
						},
						{
							"id": 2872,
							"name": "ValueT",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {}
						}
					],
					"children": [
						{
							"id": 2873,
							"name": "index",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"sources": [
								{
									"fileName": "lib/series.ts",
									"line": 845,
									"character": 9
								}
							],
							"type": {
								"type": "reference",
								"name": "Iterable",
								"typeArguments": [
									{
										"type": "typeParameter",
										"name": "IndexT"
									}
								]
							}
						},
						{
							"id": 2876,
							"name": "isBaked",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"sources": [
								{
									"fileName": "lib/series.ts",
									"line": 852,
									"character": 11
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						},
						{
							"id": 2875,
							"name": "pairs",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"sources": [
								{
									"fileName": "lib/series.ts",
									"line": 847,
									"character": 9
								}
							],
							"type": {
								"type": "reference",
								"name": "Iterable",
								"typeArguments": [
									{
										"type": "tuple",
										"elements": [
											{
												"type": "typeParameter",
												"name": "IndexT"
											},
											{
												"type": "typeParameter",
												"name": "ValueT"
											}
										]
									}
								]
							}
						},
						{
							"id": 2874,
							"name": "values",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"sources": [
								{
									"fileName": "lib/series.ts",
									"line": 846,
									"character": 10
								}
							],
							"type": {
								"type": "reference",
								"name": "Iterable",
								"typeArguments": [
									{
										"type": "typeParameter",
										"name": "ValueT"
									}
								]
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								2873,
								2876,
								2875,
								2874
							]
						}
					],
					"sources": [
						{
							"fileName": "lib/series.ts",
							"line": 844,
							"character": 24
						}
					]
				},
				{
					"id": 2281,
					"name": "ITypeFrequency",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "Represents the frequency of a type in a series or dataframe."
					},
					"children": [
						{
							"id": 2283,
							"name": "Frequency",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The frequency of the type's appearance in the series or dataframe."
							},
							"sources": [
								{
									"fileName": "lib/series.ts",
									"line": 107,
									"character": 13
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						},
						{
							"id": 2282,
							"name": "Type",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The name of the type."
							},
							"sources": [
								{
									"fileName": "lib/series.ts",
									"line": 102,
									"character": 8
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								2283,
								2282
							]
						}
					],
					"sources": [
						{
							"fileName": "lib/series.ts",
							"line": 97,
							"character": 31
						}
					]
				},
				{
					"id": 2284,
					"name": "IValueFrequency",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "Represents the frequency of a value in a series or dataframe."
					},
					"children": [
						{
							"id": 2286,
							"name": "Frequency",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The frequency of the value's appearance in the series or dataframe."
							},
							"sources": [
								{
									"fileName": "lib/series.ts",
									"line": 123,
									"character": 13
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						},
						{
							"id": 2285,
							"name": "Value",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The value."
							},
							"sources": [
								{
									"fileName": "lib/series.ts",
									"line": 118,
									"character": 9
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "any"
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								2286,
								2285
							]
						}
					],
					"sources": [
						{
							"fileName": "lib/series.ts",
							"line": 113,
							"character": 32
						}
					]
				},
				{
					"id": 3644,
					"name": "AggregateFn",
					"kind": 4194304,
					"kindString": "Type alias",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "Defines a function for aggregation."
					},
					"typeParameter": [
						{
							"id": 3645,
							"name": "ValueT",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {}
						},
						{
							"id": 3646,
							"name": "ToT",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {}
						}
					],
					"sources": [
						{
							"fileName": "lib/series.ts",
							"line": 76,
							"character": 23
						}
					],
					"type": {
						"type": "reflection",
						"declaration": {
							"id": 3647,
							"name": "__type",
							"kind": 65536,
							"kindString": "Type literal",
							"flags": {},
							"signatures": [
								{
									"id": 3648,
									"name": "__call",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 3649,
											"name": "accum",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "typeParameter",
												"name": "ToT"
											}
										},
										{
											"id": 3650,
											"name": "value",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "typeParameter",
												"name": "ValueT"
											}
										}
									],
									"type": {
										"type": "typeParameter",
										"name": "ToT"
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/series.ts",
									"line": 76,
									"character": 38
								}
							]
						}
					}
				},
				{
					"id": 3563,
					"name": "CallbackFn",
					"kind": 4194304,
					"kindString": "Type alias",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "A callback function that can be applied to each value."
					},
					"typeParameter": [
						{
							"id": 3564,
							"name": "ValueT",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {}
						}
					],
					"sources": [
						{
							"fileName": "lib/series.ts",
							"line": 42,
							"character": 22
						}
					],
					"type": {
						"type": "reflection",
						"declaration": {
							"id": 3565,
							"name": "__type",
							"kind": 65536,
							"kindString": "Type literal",
							"flags": {},
							"signatures": [
								{
									"id": 3566,
									"name": "__call",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 3567,
											"name": "value",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "typeParameter",
												"name": "ValueT"
											}
										},
										{
											"id": 3568,
											"name": "index",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/series.ts",
									"line": 42,
									"character": 32
								}
							]
						}
					}
				},
				{
					"id": 3651,
					"name": "ComparerFn",
					"kind": 4194304,
					"kindString": "Type alias",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "Compares to values and returns true if they are equivalent."
					},
					"typeParameter": [
						{
							"id": 3652,
							"name": "ValueT1",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {}
						},
						{
							"id": 3653,
							"name": "ValueT2",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {}
						}
					],
					"sources": [
						{
							"fileName": "lib/series.ts",
							"line": 81,
							"character": 22
						}
					],
					"type": {
						"type": "reflection",
						"declaration": {
							"id": 3654,
							"name": "__type",
							"kind": 65536,
							"kindString": "Type literal",
							"flags": {},
							"signatures": [
								{
									"id": 3655,
									"name": "__call",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 3656,
											"name": "a",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "typeParameter",
												"name": "ValueT1"
											}
										},
										{
											"id": 3657,
											"name": "b",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "typeParameter",
												"name": "ValueT2"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/series.ts",
									"line": 81,
									"character": 42
								}
							]
						}
					}
				},
				{
					"id": 3663,
					"name": "GapFillFn",
					"kind": 4194304,
					"kindString": "Type alias",
					"flags": {
						"isExported": true
					},
					"typeParameter": [
						{
							"id": 3664,
							"name": "ValueT",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {}
						},
						{
							"id": 3665,
							"name": "ResultT",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {}
						}
					],
					"sources": [
						{
							"fileName": "lib/series.ts",
							"line": 92,
							"character": 21
						}
					],
					"type": {
						"type": "reflection",
						"declaration": {
							"id": 3666,
							"name": "__type",
							"kind": 65536,
							"kindString": "Type literal",
							"flags": {},
							"signatures": [
								{
									"id": 3667,
									"name": "__call",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 3668,
											"name": "a",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "typeParameter",
												"name": "ValueT"
											}
										},
										{
											"id": 3669,
											"name": "b",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "typeParameter",
												"name": "ValueT"
											}
										}
									],
									"type": {
										"type": "array",
										"elementType": {
											"type": "typeParameter",
											"name": "ResultT"
										}
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/series.ts",
									"line": 92,
									"character": 40
								}
							]
						}
					}
				},
				{
					"id": 3631,
					"name": "JoinFn",
					"kind": 4194304,
					"kindString": "Type alias",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "A function that joins to vlaues."
					},
					"typeParameter": [
						{
							"id": 3632,
							"name": "ValueT1",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {}
						},
						{
							"id": 3633,
							"name": "ValueT2",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {}
						},
						{
							"id": 3634,
							"name": "ResultT",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {}
						}
					],
					"sources": [
						{
							"fileName": "lib/series.ts",
							"line": 66,
							"character": 18
						}
					],
					"type": {
						"type": "reflection",
						"declaration": {
							"id": 3635,
							"name": "__type",
							"kind": 65536,
							"kindString": "Type literal",
							"flags": {},
							"signatures": [
								{
									"id": 3636,
									"name": "__call",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 3637,
											"name": "a",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "typeParameter",
												"name": "ValueT1"
											}
										},
										{
											"id": 3638,
											"name": "b",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "typeParameter",
												"name": "ValueT2"
											}
										}
									],
									"type": {
										"type": "typeParameter",
										"name": "ResultT"
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/series.ts",
									"line": 66,
									"character": 47
								}
							]
						}
					}
				},
				{
					"id": 3639,
					"name": "PredicateFn",
					"kind": 4194304,
					"kindString": "Type alias",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "A predicate function, returns true or false based on input."
					},
					"typeParameter": [
						{
							"id": 3640,
							"name": "ValueT",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {}
						}
					],
					"sources": [
						{
							"fileName": "lib/series.ts",
							"line": 71,
							"character": 23
						}
					],
					"type": {
						"type": "reflection",
						"declaration": {
							"id": 3641,
							"name": "__type",
							"kind": 65536,
							"kindString": "Type literal",
							"flags": {},
							"signatures": [
								{
									"id": 3642,
									"name": "__call",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 3643,
											"name": "value",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "typeParameter",
												"name": "ValueT"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/series.ts",
									"line": 71,
									"character": 33
								}
							]
						}
					}
				},
				{
					"id": 3625,
					"name": "SelectorFn",
					"kind": 4194304,
					"kindString": "Type alias",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "A selector function with no index. Transforms a value into another kind of value."
					},
					"typeParameter": [
						{
							"id": 3626,
							"name": "FromT",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {}
						},
						{
							"id": 3627,
							"name": "ToT",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {}
						}
					],
					"sources": [
						{
							"fileName": "lib/series.ts",
							"line": 61,
							"character": 22
						}
					],
					"type": {
						"type": "reflection",
						"declaration": {
							"id": 3628,
							"name": "__type",
							"kind": 65536,
							"kindString": "Type literal",
							"flags": {},
							"signatures": [
								{
									"id": 3629,
									"name": "__call",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 3630,
											"name": "value",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "typeParameter",
												"name": "FromT"
											}
										}
									],
									"type": {
										"type": "typeParameter",
										"name": "ToT"
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/series.ts",
									"line": 61,
									"character": 36
								}
							]
						}
					}
				},
				{
					"id": 3569,
					"name": "SelectorWithIndexFn",
					"kind": 4194304,
					"kindString": "Type alias",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "A selector function. Transforms a value into another kind of value."
					},
					"typeParameter": [
						{
							"id": 3570,
							"name": "FromT",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {}
						},
						{
							"id": 3571,
							"name": "ToT",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {}
						}
					],
					"sources": [
						{
							"fileName": "lib/series.ts",
							"line": 47,
							"character": 31
						}
					],
					"type": {
						"type": "reflection",
						"declaration": {
							"id": 3572,
							"name": "__type",
							"kind": 65536,
							"kindString": "Type literal",
							"flags": {},
							"signatures": [
								{
									"id": 3573,
									"name": "__call",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 3574,
											"name": "value",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "typeParameter",
												"name": "FromT"
											}
										},
										{
											"id": 3575,
											"name": "index",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										}
									],
									"type": {
										"type": "typeParameter",
										"name": "ToT"
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/series.ts",
									"line": 47,
									"character": 45
								}
							]
						}
					}
				},
				{
					"id": 3658,
					"name": "SeriesConfigFn",
					"kind": 4194304,
					"kindString": "Type alias",
					"flags": {
						"isExported": true
					},
					"typeParameter": [
						{
							"id": 3659,
							"name": "IndexT",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {}
						},
						{
							"id": 3660,
							"name": "ValueT",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {}
						}
					],
					"sources": [
						{
							"fileName": "lib/series.ts",
							"line": 87,
							"character": 26
						}
					],
					"type": {
						"type": "reflection",
						"declaration": {
							"id": 3661,
							"name": "__type",
							"kind": 65536,
							"kindString": "Type literal",
							"flags": {},
							"signatures": [
								{
									"id": 3662,
									"name": "__call",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "ISeriesConfig",
										"id": 2274,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "IndexT"
											},
											{
												"type": "typeParameter",
												"name": "ValueT"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/series.ts",
									"line": 87,
									"character": 44
								}
							]
						}
					}
				},
				{
					"id": 3582,
					"name": "Zip2Fn",
					"kind": 4194304,
					"kindString": "Type alias",
					"flags": {
						"isExported": true
					},
					"typeParameter": [
						{
							"id": 3583,
							"name": "T1",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {}
						},
						{
							"id": 3584,
							"name": "T2",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {}
						},
						{
							"id": 3585,
							"name": "ReturnT",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {}
						}
					],
					"sources": [
						{
							"fileName": "lib/series.ts",
							"line": 53,
							"character": 18
						}
					],
					"type": {
						"type": "reflection",
						"declaration": {
							"id": 3586,
							"name": "__type",
							"kind": 65536,
							"kindString": "Type literal",
							"flags": {},
							"signatures": [
								{
									"id": 3587,
									"name": "__call",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 3588,
											"name": "a",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "typeParameter",
												"name": "T1"
											}
										},
										{
											"id": 3589,
											"name": "b",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "typeParameter",
												"name": "T2"
											}
										}
									],
									"type": {
										"type": "typeParameter",
										"name": "ReturnT"
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/series.ts",
									"line": 53,
									"character": 37
								}
							]
						}
					}
				},
				{
					"id": 3590,
					"name": "Zip3Fn",
					"kind": 4194304,
					"kindString": "Type alias",
					"flags": {
						"isExported": true
					},
					"typeParameter": [
						{
							"id": 3591,
							"name": "T1",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {}
						},
						{
							"id": 3592,
							"name": "T2",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {}
						},
						{
							"id": 3593,
							"name": "T3",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {}
						},
						{
							"id": 3594,
							"name": "ReturnT",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {}
						}
					],
					"sources": [
						{
							"fileName": "lib/series.ts",
							"line": 54,
							"character": 18
						}
					],
					"type": {
						"type": "reflection",
						"declaration": {
							"id": 3595,
							"name": "__type",
							"kind": 65536,
							"kindString": "Type literal",
							"flags": {},
							"signatures": [
								{
									"id": 3596,
									"name": "__call",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 3597,
											"name": "a",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "typeParameter",
												"name": "T1"
											}
										},
										{
											"id": 3598,
											"name": "b",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "typeParameter",
												"name": "T2"
											}
										},
										{
											"id": 3599,
											"name": "c",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "typeParameter",
												"name": "T3"
											}
										}
									],
									"type": {
										"type": "typeParameter",
										"name": "ReturnT"
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/series.ts",
									"line": 54,
									"character": 41
								}
							]
						}
					}
				},
				{
					"id": 3600,
					"name": "Zip4Fn",
					"kind": 4194304,
					"kindString": "Type alias",
					"flags": {
						"isExported": true
					},
					"typeParameter": [
						{
							"id": 3601,
							"name": "T1",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {}
						},
						{
							"id": 3602,
							"name": "T2",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {}
						},
						{
							"id": 3603,
							"name": "T3",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {}
						},
						{
							"id": 3604,
							"name": "T4",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {}
						},
						{
							"id": 3605,
							"name": "ReturnT",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {}
						}
					],
					"sources": [
						{
							"fileName": "lib/series.ts",
							"line": 55,
							"character": 18
						}
					],
					"type": {
						"type": "reflection",
						"declaration": {
							"id": 3606,
							"name": "__type",
							"kind": 65536,
							"kindString": "Type literal",
							"flags": {},
							"signatures": [
								{
									"id": 3607,
									"name": "__call",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 3608,
											"name": "a",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "typeParameter",
												"name": "T1"
											}
										},
										{
											"id": 3609,
											"name": "b",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "typeParameter",
												"name": "T2"
											}
										},
										{
											"id": 3610,
											"name": "c",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "typeParameter",
												"name": "T3"
											}
										},
										{
											"id": 3611,
											"name": "d",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "typeParameter",
												"name": "T4"
											}
										}
									],
									"type": {
										"type": "typeParameter",
										"name": "ReturnT"
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/series.ts",
									"line": 55,
									"character": 45
								}
							]
						}
					}
				},
				{
					"id": 3612,
					"name": "Zip5Fn",
					"kind": 4194304,
					"kindString": "Type alias",
					"flags": {
						"isExported": true
					},
					"typeParameter": [
						{
							"id": 3613,
							"name": "T1",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {}
						},
						{
							"id": 3614,
							"name": "T2",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {}
						},
						{
							"id": 3615,
							"name": "T3",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {}
						},
						{
							"id": 3616,
							"name": "T4",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {}
						},
						{
							"id": 3617,
							"name": "T5",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {}
						},
						{
							"id": 3618,
							"name": "ReturnT",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {}
						}
					],
					"sources": [
						{
							"fileName": "lib/series.ts",
							"line": 56,
							"character": 18
						}
					],
					"type": {
						"type": "reflection",
						"declaration": {
							"id": 3619,
							"name": "__type",
							"kind": 65536,
							"kindString": "Type literal",
							"flags": {},
							"signatures": [
								{
									"id": 3620,
									"name": "__call",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 3621,
											"name": "a",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "typeParameter",
												"name": "T1"
											}
										},
										{
											"id": 3622,
											"name": "b",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "typeParameter",
												"name": "T2"
											}
										},
										{
											"id": 3623,
											"name": "c",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "typeParameter",
												"name": "T3"
											}
										},
										{
											"id": 3624,
											"name": "d",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "typeParameter",
												"name": "T4"
											}
										}
									],
									"type": {
										"type": "typeParameter",
										"name": "ReturnT"
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/series.ts",
									"line": 56,
									"character": 49
								}
							]
						}
					}
				},
				{
					"id": 3576,
					"name": "ZipNFn",
					"kind": 4194304,
					"kindString": "Type alias",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "Functions to zip together multiple values."
					},
					"typeParameter": [
						{
							"id": 3577,
							"name": "ValueT",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {}
						},
						{
							"id": 3578,
							"name": "ReturnT",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {}
						}
					],
					"sources": [
						{
							"fileName": "lib/series.ts",
							"line": 52,
							"character": 18
						}
					],
					"type": {
						"type": "reflection",
						"declaration": {
							"id": 3579,
							"name": "__type",
							"kind": 65536,
							"kindString": "Type literal",
							"flags": {},
							"signatures": [
								{
									"id": 3580,
									"name": "__call",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 3581,
											"name": "input",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "ISeries",
												"id": 2287,
												"typeArguments": [
													{
														"type": "intrinsic",
														"name": "number"
													},
													{
														"type": "typeParameter",
														"name": "ValueT"
													}
												]
											}
										}
									],
									"type": {
										"type": "typeParameter",
										"name": "ReturnT"
									}
								}
							],
							"sources": [
								{
									"fileName": "lib/series.ts",
									"line": 52,
									"character": 37
								}
							]
						}
					}
				},
				{
					"id": 3562,
					"name": "Table",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isConst": true
					},
					"sources": [
						{
							"fileName": "lib/series.ts",
							"line": 23,
							"character": 11
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "any"
					},
					"defaultValue": " require('easy-table')"
				}
			],
			"groups": [
				{
					"title": "Classes",
					"kind": 128,
					"children": [
						3220,
						2877
					]
				},
				{
					"title": "Interfaces",
					"kind": 256,
					"children": [
						2574,
						2287,
						2274,
						2870,
						2281,
						2284
					]
				},
				{
					"title": "Type aliases",
					"kind": 4194304,
					"children": [
						3644,
						3563,
						3651,
						3663,
						3631,
						3639,
						3625,
						3569,
						3658,
						3582,
						3590,
						3600,
						3612,
						3576
					]
				},
				{
					"title": "Variables",
					"kind": 32,
					"children": [
						3562
					]
				}
			],
			"sources": [
				{
					"fileName": "lib/series.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 609,
			"name": "\"lib/utils\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "C:/projects/github/data-forge/data-forge-ts/src/lib/utils.ts",
			"children": [
				{
					"id": 619,
					"name": "makeDistinct",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 620,
							"name": "makeDistinct",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"typeParameter": [
								{
									"id": 621,
									"name": "ItemT",
									"kind": 131072,
									"kindString": "Type parameter",
									"flags": {}
								},
								{
									"id": 622,
									"name": "KeyT",
									"kind": 131072,
									"kindString": "Type parameter",
									"flags": {}
								}
							],
							"parameters": [
								{
									"id": 623,
									"name": "items",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Iterable",
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "ItemT"
											}
										]
									}
								},
								{
									"id": 624,
									"name": "selector",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isOptional": true
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "undefined"
											},
											{
												"type": "reflection",
												"declaration": {
													"id": 625,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"signatures": [
														{
															"id": 626,
															"name": "__call",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {},
															"parameters": [
																{
																	"id": 627,
																	"name": "item",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {},
																	"type": {
																		"type": "typeParameter",
																		"name": "ItemT"
																	}
																}
															],
															"type": {
																"type": "typeParameter",
																"name": "KeyT"
															}
														}
													]
												}
											}
										]
									}
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "typeParameter",
									"name": "ItemT"
								}
							}
						}
					],
					"sources": [
						{
							"fileName": "lib/utils.ts",
							"line": 19,
							"character": 28
						}
					]
				},
				{
					"id": 610,
					"name": "mapIterable",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 611,
							"name": "mapIterable",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"typeParameter": [
								{
									"id": 612,
									"name": "InT",
									"kind": 131072,
									"kindString": "Type parameter",
									"flags": {}
								},
								{
									"id": 613,
									"name": "OutT",
									"kind": 131072,
									"kindString": "Type parameter",
									"flags": {}
								}
							],
							"parameters": [
								{
									"id": 614,
									"name": "items",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Iterable",
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "InT"
											}
										]
									}
								},
								{
									"id": 615,
									"name": "mapFn",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 616,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"signatures": [
												{
													"id": 617,
													"name": "__call",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"parameters": [
														{
															"id": 618,
															"name": "item",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "typeParameter",
																"name": "InT"
															}
														}
													],
													"type": {
														"type": "typeParameter",
														"name": "OutT"
													}
												}
											],
											"sources": [
												{
													"fileName": "lib/utils.ts",
													"line": 5,
													"character": 69
												}
											]
										}
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "Iterable",
								"typeArguments": [
									{
										"type": "typeParameter",
										"name": "OutT"
									}
								]
							}
						}
					],
					"sources": [
						{
							"fileName": "lib/utils.ts",
							"line": 5,
							"character": 28
						}
					]
				},
				{
					"id": 628,
					"name": "toMap",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 629,
							"name": "toMap",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"typeParameter": [
								{
									"id": 630,
									"name": "InT",
									"kind": 131072,
									"kindString": "Type parameter",
									"flags": {}
								},
								{
									"id": 631,
									"name": "KeyT",
									"kind": 131072,
									"kindString": "Type parameter",
									"flags": {}
								},
								{
									"id": 632,
									"name": "ValueT",
									"kind": 131072,
									"kindString": "Type parameter",
									"flags": {}
								}
							],
							"parameters": [
								{
									"id": 633,
									"name": "items",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Iterable",
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "InT"
											}
										]
									}
								},
								{
									"id": 634,
									"name": "keySelector",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 635,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"signatures": [
												{
													"id": 636,
													"name": "__call",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"parameters": [
														{
															"id": 637,
															"name": "item",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "typeParameter",
																"name": "InT"
															}
														}
													],
													"type": {
														"type": "typeParameter",
														"name": "KeyT"
													}
												}
											],
											"sources": [
												{
													"fileName": "lib/utils.ts",
													"line": 37,
													"character": 75
												}
											]
										}
									}
								},
								{
									"id": 638,
									"name": "valueSelector",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 639,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"signatures": [
												{
													"id": 640,
													"name": "__call",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"parameters": [
														{
															"id": 641,
															"name": "item",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "typeParameter",
																"name": "InT"
															}
														}
													],
													"type": {
														"type": "typeParameter",
														"name": "ValueT"
													}
												}
											],
											"sources": [
												{
													"fileName": "lib/utils.ts",
													"line": 37,
													"character": 111
												}
											]
										}
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "any"
							}
						}
					],
					"sources": [
						{
							"fileName": "lib/utils.ts",
							"line": 37,
							"character": 21
						}
					]
				}
			],
			"groups": [
				{
					"title": "Functions",
					"kind": 64,
					"children": [
						619,
						610,
						628
					]
				}
			],
			"sources": [
				{
					"fileName": "lib/utils.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 4356,
			"name": "\"test/accessing-columns-rows-and-cells\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "C:/projects/github/data-forge/data-forge-ts/src/test/accessing-columns-rows-and-cells.ts",
			"sources": [
				{
					"fileName": "test/accessing-columns-rows-and-cells.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 4357,
			"name": "\"test/csv.integration.test\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "C:/projects/github/data-forge/data-forge-ts/src/test/csv.integration.test.ts",
			"sources": [
				{
					"fileName": "test/csv.integration.test.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 4358,
			"name": "\"test/data-forge.test\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "C:/projects/github/data-forge/data-forge-ts/src/test/data-forge.test.ts",
			"sources": [
				{
					"fileName": "test/data-forge.test.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 4359,
			"name": "\"test/dataframe.columns.test\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "C:/projects/github/data-forge/data-forge-ts/src/test/dataframe.columns.test.ts",
			"sources": [
				{
					"fileName": "test/dataframe.columns.test.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 4360,
			"name": "\"test/dataframe.concat.test\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "C:/projects/github/data-forge/data-forge-ts/src/test/dataframe.concat.test.ts",
			"sources": [
				{
					"fileName": "test/dataframe.concat.test.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 4361,
			"name": "\"test/dataframe.constructor.test\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "C:/projects/github/data-forge/data-forge-ts/src/test/dataframe.constructor.test.ts",
			"sources": [
				{
					"fileName": "test/dataframe.constructor.test.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 4362,
			"name": "\"test/dataframe.csv.file.test\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "C:/projects/github/data-forge/data-forge-ts/src/test/dataframe.csv.file.test.ts",
			"sources": [
				{
					"fileName": "test/dataframe.csv.file.test.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 4363,
			"name": "\"test/dataframe.csv.test\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "C:/projects/github/data-forge/data-forge-ts/src/test/dataframe.csv.test.ts",
			"sources": [
				{
					"fileName": "test/dataframe.csv.test.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 4364,
			"name": "\"test/dataframe.detect.test\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "C:/projects/github/data-forge/data-forge-ts/src/test/dataframe.detect.test.ts",
			"sources": [
				{
					"fileName": "test/dataframe.detect.test.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 4365,
			"name": "\"test/dataframe.group.test\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "C:/projects/github/data-forge/data-forge-ts/src/test/dataframe.group.test.ts",
			"sources": [
				{
					"fileName": "test/dataframe.group.test.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 4366,
			"name": "\"test/dataframe.html.test\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "C:/projects/github/data-forge/data-forge-ts/src/test/dataframe.html.test.ts",
			"sources": [
				{
					"fileName": "test/dataframe.html.test.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 4367,
			"name": "\"test/dataframe.index.test\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "C:/projects/github/data-forge/data-forge-ts/src/test/dataframe.index.test.ts",
			"sources": [
				{
					"fileName": "test/dataframe.index.test.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 4368,
			"name": "\"test/dataframe.join.test\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "C:/projects/github/data-forge/data-forge-ts/src/test/dataframe.join.test.ts",
			"sources": [
				{
					"fileName": "test/dataframe.join.test.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 4369,
			"name": "\"test/dataframe.json.file.test\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "C:/projects/github/data-forge/data-forge-ts/src/test/dataframe.json.file.test.ts",
			"sources": [
				{
					"fileName": "test/dataframe.json.file.test.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 4370,
			"name": "\"test/dataframe.json.test\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "C:/projects/github/data-forge/data-forge-ts/src/test/dataframe.json.test.ts",
			"sources": [
				{
					"fileName": "test/dataframe.json.test.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 4371,
			"name": "\"test/dataframe.pandas.join.test\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "C:/projects/github/data-forge/data-forge-ts/src/test/dataframe.pandas.join.test.ts",
			"sources": [
				{
					"fileName": "test/dataframe.pandas.join.test.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 4372,
			"name": "\"test/dataframe.parse.test\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "C:/projects/github/data-forge/data-forge-ts/src/test/dataframe.parse.test.ts",
			"sources": [
				{
					"fileName": "test/dataframe.parse.test.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 4373,
			"name": "\"test/dataframe.pivot.test\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "C:/projects/github/data-forge/data-forge-ts/src/test/dataframe.pivot.test.ts",
			"sources": [
				{
					"fileName": "test/dataframe.pivot.test.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 4374,
			"name": "\"test/dataframe.select.test\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "C:/projects/github/data-forge/data-forge-ts/src/test/dataframe.select.test.ts",
			"sources": [
				{
					"fileName": "test/dataframe.select.test.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 4375,
			"name": "\"test/dataframe.series.test\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "C:/projects/github/data-forge/data-forge-ts/src/test/dataframe.series.test.ts",
			"sources": [
				{
					"fileName": "test/dataframe.series.test.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 4376,
			"name": "\"test/dataframe.sort.test\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "C:/projects/github/data-forge/data-forge-ts/src/test/dataframe.sort.test.ts",
			"children": [
				{
					"id": 4377,
					"name": "DataFrame",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isConst": true
					},
					"sources": [
						{
							"fileName": "test/dataframe.sort.test.ts",
							"line": 5,
							"character": 15
						}
					],
					"type": {
						"type": "reference",
						"name": "DataFrame",
						"id": 1420
					},
					"defaultValue": " dataForge.DataFrame"
				}
			],
			"groups": [
				{
					"title": "Variables",
					"kind": 32,
					"children": [
						4377
					]
				}
			],
			"sources": [
				{
					"fileName": "test/dataframe.sort.test.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 4378,
			"name": "\"test/dataframe.test\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "C:/projects/github/data-forge/data-forge-ts/src/test/dataframe.test.ts",
			"sources": [
				{
					"fileName": "test/dataframe.test.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 4379,
			"name": "\"test/dataframe.window.test\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "C:/projects/github/data-forge/data-forge-ts/src/test/dataframe.window.test.ts",
			"sources": [
				{
					"fileName": "test/dataframe.window.test.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 4380,
			"name": "\"test/dataframe.zip.test\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "C:/projects/github/data-forge/data-forge-ts/src/test/dataframe.zip.test.ts",
			"sources": [
				{
					"fileName": "test/dataframe.zip.test.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 4403,
			"name": "\"test/iterables/ordered-iterable.test\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "C:/projects/github/data-forge/data-forge-ts/src/test/iterables/ordered-iterable.test.ts",
			"sources": [
				{
					"fileName": "test/iterables/ordered-iterable.test.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 4404,
			"name": "\"test/iterators/array-iterator.test\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "C:/projects/github/data-forge/data-forge-ts/src/test/iterators/array-iterator.test.ts",
			"sources": [
				{
					"fileName": "test/iterators/array-iterator.test.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 4405,
			"name": "\"test/iterators/column-names-iterator.test\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "C:/projects/github/data-forge/data-forge-ts/src/test/iterators/column-names-iterator.test.ts",
			"sources": [
				{
					"fileName": "test/iterators/column-names-iterator.test.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 4406,
			"name": "\"test/iterators/count-iterator.test\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "C:/projects/github/data-forge/data-forge-ts/src/test/iterators/count-iterator.test.ts",
			"sources": [
				{
					"fileName": "test/iterators/count-iterator.test.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 4407,
			"name": "\"test/iterators/empty-iterator.test\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "C:/projects/github/data-forge/data-forge-ts/src/test/iterators/empty-iterator.test.ts",
			"sources": [
				{
					"fileName": "test/iterators/empty-iterator.test.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 4408,
			"name": "\"test/iterators/extract-element-iterator.test\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "C:/projects/github/data-forge/data-forge-ts/src/test/iterators/extract-element-iterator.test.ts",
			"sources": [
				{
					"fileName": "test/iterators/extract-element-iterator.test.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 4409,
			"name": "\"test/iterators/multi-iterator.test\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "C:/projects/github/data-forge/data-forge-ts/src/test/iterators/multi-iterator.test.ts",
			"sources": [
				{
					"fileName": "test/iterators/multi-iterator.test.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 4410,
			"name": "\"test/iterators/selector-iterator.test\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "C:/projects/github/data-forge/data-forge-ts/src/test/iterators/selector-iterator.test.ts",
			"sources": [
				{
					"fileName": "test/iterators/selector-iterator.test.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 4411,
			"name": "\"test/iterators/selector-many-iterator.test\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "C:/projects/github/data-forge/data-forge-ts/src/test/iterators/selector-many-iterator.test.ts",
			"sources": [
				{
					"fileName": "test/iterators/selector-many-iterator.test.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 4412,
			"name": "\"test/iterators/skip-iterator.test\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "C:/projects/github/data-forge/data-forge-ts/src/test/iterators/skip-iterator.test.ts",
			"sources": [
				{
					"fileName": "test/iterators/skip-iterator.test.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 4413,
			"name": "\"test/iterators/skip-while-iterator.test\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "C:/projects/github/data-forge/data-forge-ts/src/test/iterators/skip-while-iterator.test.ts",
			"sources": [
				{
					"fileName": "test/iterators/skip-while-iterator.test.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 4414,
			"name": "\"test/iterators/take-iterator.test\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "C:/projects/github/data-forge/data-forge-ts/src/test/iterators/take-iterator.test.ts",
			"sources": [
				{
					"fileName": "test/iterators/take-iterator.test.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 4415,
			"name": "\"test/iterators/take-while-iterator.test\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "C:/projects/github/data-forge/data-forge-ts/src/test/iterators/take-while-iterator.test.ts",
			"sources": [
				{
					"fileName": "test/iterators/take-while-iterator.test.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 4416,
			"name": "\"test/iterators/where-iterator.test\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "C:/projects/github/data-forge/data-forge-ts/src/test/iterators/where-iterator.test.ts",
			"sources": [
				{
					"fileName": "test/iterators/where-iterator.test.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 4381,
			"name": "\"test/performance.test\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "C:/projects/github/data-forge/data-forge-ts/src/test/performance.test.ts",
			"children": [
				{
					"id": 4382,
					"name": "Stopwatch",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isConst": true
					},
					"sources": [
						{
							"fileName": "test/performance.test.ts",
							"line": 5,
							"character": 15
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "any"
					},
					"defaultValue": " require('statman-stopwatch')"
				}
			],
			"groups": [
				{
					"title": "Variables",
					"kind": 32,
					"children": [
						4382
					]
				}
			],
			"sources": [
				{
					"fileName": "test/performance.test.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 4383,
			"name": "\"test/readFile.csv.test\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "C:/projects/github/data-forge/data-forge-ts/src/test/readFile.csv.test.ts",
			"sources": [
				{
					"fileName": "test/readFile.csv.test.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 4384,
			"name": "\"test/rolling-window.performance.test\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "C:/projects/github/data-forge/data-forge-ts/src/test/rolling-window.performance.test.ts",
			"children": [
				{
					"id": 4385,
					"name": "Stopwatch",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isConst": true
					},
					"sources": [
						{
							"fileName": "test/rolling-window.performance.test.ts",
							"line": 5,
							"character": 15
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "any"
					},
					"defaultValue": " require('statman-stopwatch')"
				}
			],
			"groups": [
				{
					"title": "Variables",
					"kind": 32,
					"children": [
						4385
					]
				}
			],
			"sources": [
				{
					"fileName": "test/rolling-window.performance.test.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 4386,
			"name": "\"test/series.concat.test\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "C:/projects/github/data-forge/data-forge-ts/src/test/series.concat.test.ts",
			"sources": [
				{
					"fileName": "test/series.concat.test.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 4387,
			"name": "\"test/series.constructor.test\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "C:/projects/github/data-forge/data-forge-ts/src/test/series.constructor.test.ts",
			"sources": [
				{
					"fileName": "test/series.constructor.test.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 4388,
			"name": "\"test/series.detect.test\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "C:/projects/github/data-forge/data-forge-ts/src/test/series.detect.test.ts",
			"sources": [
				{
					"fileName": "test/series.detect.test.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 4389,
			"name": "\"test/series.group.test\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "C:/projects/github/data-forge/data-forge-ts/src/test/series.group.test.ts",
			"sources": [
				{
					"fileName": "test/series.group.test.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 4390,
			"name": "\"test/series.index.test\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "C:/projects/github/data-forge/data-forge-ts/src/test/series.index.test.ts",
			"sources": [
				{
					"fileName": "test/series.index.test.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 4391,
			"name": "\"test/series.join.test\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "C:/projects/github/data-forge/data-forge-ts/src/test/series.join.test.ts",
			"sources": [
				{
					"fileName": "test/series.join.test.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 4392,
			"name": "\"test/series.parse.test\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "C:/projects/github/data-forge/data-forge-ts/src/test/series.parse.test.ts",
			"children": [
				{
					"id": 4393,
					"name": "Series",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isConst": true
					},
					"sources": [
						{
							"fileName": "test/series.parse.test.ts",
							"line": 6,
							"character": 12
						}
					],
					"type": {
						"type": "reference",
						"name": "Series",
						"id": 2877
					},
					"defaultValue": " dataForge.Series"
				}
			],
			"groups": [
				{
					"title": "Variables",
					"kind": 32,
					"children": [
						4393
					]
				}
			],
			"sources": [
				{
					"fileName": "test/series.parse.test.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 4394,
			"name": "\"test/series.select.test\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "C:/projects/github/data-forge/data-forge-ts/src/test/series.select.test.ts",
			"sources": [
				{
					"fileName": "test/series.select.test.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 4395,
			"name": "\"test/series.sort.test\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "C:/projects/github/data-forge/data-forge-ts/src/test/series.sort.test.ts",
			"children": [
				{
					"id": 4396,
					"name": "Series",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isConst": true
					},
					"sources": [
						{
							"fileName": "test/series.sort.test.ts",
							"line": 10,
							"character": 12
						}
					],
					"type": {
						"type": "reference",
						"name": "Series",
						"id": 2877
					},
					"defaultValue": " dataForge.Series"
				}
			],
			"groups": [
				{
					"title": "Variables",
					"kind": 32,
					"children": [
						4396
					]
				}
			],
			"sources": [
				{
					"fileName": "test/series.sort.test.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 4397,
			"name": "\"test/series.stats.test\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "C:/projects/github/data-forge/data-forge-ts/src/test/series.stats.test.ts",
			"sources": [
				{
					"fileName": "test/series.stats.test.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 4398,
			"name": "\"test/series.test\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "C:/projects/github/data-forge/data-forge-ts/src/test/series.test.ts",
			"sources": [
				{
					"fileName": "test/series.test.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 4399,
			"name": "\"test/series.window.test\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "C:/projects/github/data-forge/data-forge-ts/src/test/series.window.test.ts",
			"sources": [
				{
					"fileName": "test/series.window.test.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 4400,
			"name": "\"test/series.zip.test\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "C:/projects/github/data-forge/data-forge-ts/src/test/series.zip.test.ts",
			"sources": [
				{
					"fileName": "test/series.zip.test.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 4401,
			"name": "\"test/window.performance.test\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "C:/projects/github/data-forge/data-forge-ts/src/test/window.performance.test.ts",
			"children": [
				{
					"id": 4402,
					"name": "Stopwatch",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isConst": true
					},
					"sources": [
						{
							"fileName": "test/window.performance.test.ts",
							"line": 5,
							"character": 15
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "any"
					},
					"defaultValue": " require('statman-stopwatch')"
				}
			],
			"groups": [
				{
					"title": "Variables",
					"kind": 32,
					"children": [
						4402
					]
				}
			],
			"sources": [
				{
					"fileName": "test/window.performance.test.ts",
					"line": 1,
					"character": 0
				}
			]
		}
	],
	"groups": [
		{
			"title": "External modules",
			"kind": 1,
			"children": [
				4294,
				642,
				3670,
				11,
				599,
				208,
				33,
				513,
				538,
				574,
				488,
				320,
				24,
				435,
				45,
				389,
				262,
				73,
				106,
				345,
				377,
				250,
				227,
				462,
				129,
				157,
				184,
				289,
				1,
				588,
				195,
				28,
				502,
				523,
				552,
				473,
				301,
				20,
				425,
				37,
				53,
				85,
				332,
				357,
				237,
				217,
				445,
				118,
				140,
				168,
				271,
				2273,
				609,
				4356,
				4357,
				4358,
				4359,
				4360,
				4361,
				4362,
				4363,
				4364,
				4365,
				4366,
				4367,
				4368,
				4369,
				4370,
				4371,
				4372,
				4373,
				4374,
				4375,
				4376,
				4378,
				4379,
				4380,
				4403,
				4404,
				4405,
				4406,
				4407,
				4408,
				4409,
				4410,
				4411,
				4412,
				4413,
				4414,
				4415,
				4416,
				4381,
				4383,
				4384,
				4386,
				4387,
				4388,
				4389,
				4390,
				4391,
				4392,
				4394,
				4395,
				4397,
				4398,
				4399,
				4400,
				4401
			]
		}
	]
}